precompile(Tuple{typeof(REPL.Terminals.hascolor), REPL.Terminals.TTYTerminal})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pair{Symbol, REPL.LineEdit.Prompt}, Vararg{Base.Pair{Symbol, REPL.LineEdit.Prompt}, N} where N})
precompile(Tuple{typeof(Base.peek), Base.IOStream})
precompile(Tuple{Type{Char}, Int32})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("#45#76"))}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("#74#105")){REPL.LineEdit.HistoryPrompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{Char, getfield(REPL, Symbol("#49#58")){REPL.LineEdit.Prompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("#251#255")){REPL.LineEdit.PrefixHistoryPrompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{Char, getfield(REPL, Symbol("#39#42")){REPL.LineEdit.Prompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.UnixTerminal, Any})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.LineEdit.ModeState})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#22#23")){getfield(REPL, Symbol("#39#42")){REPL.LineEdit.Prompt}, String}, Any, Any})
precompile(Tuple{getfield(REPL, Symbol("#39#42")){REPL.LineEdit.Prompt}, Any, Any, Vararg{Any, N} where N})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("##edit_splice!#17")), Bool, typeof(REPL.LineEdit.edit_splice!), Any, Base.Pair{#s662, #s661} where #s661<:Integer where #s662<:Integer, AbstractString})
precompile(Tuple{typeof(Base.setproperty!), Pkg.Types.Project, Symbol, Base.VersionNumber})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Pkg.Types.UpgradeLevel, Base.VersionNumber, Pkg.Types.VersionSpec}}, Base.VersionNumber})
precompile(Tuple{typeof(Base.setproperty!), Pkg.Types.PackageEntry, Symbol, Base.VersionNumber})
precompile(Tuple{typeof(Base.setproperty!), Pkg.Types.PackageEntry, Symbol, Base.SHA1})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Base.SHA1}}, Base.SHA1})
precompile(Tuple{Type{Base.VersionNumber}, UInt32, UInt32, UInt32, Tuple{}, Tuple{UInt64}})
precompile(Tuple{typeof(Base.deepcopy_internal), Any, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Tuple{}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{UInt8, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{UInt64, 1}}})
precompile(Tuple{typeof(Base.deepcopy_internal), Tuple{UInt64}, Base.IdDict{Any, Any}})
precompile(Tuple{Type{Pkg.Types.EnvCache}, Nothing, String, String, String, Pkg.Types.PackageSpec, Pkg.Types.Project, Base.Dict{Base.UUID, Pkg.Types.PackageEntry}, Pkg.Types.Project, Base.Dict{Base.UUID, Pkg.Types.PackageEntry}, Base.Dict{String, Array{Base.UUID, 1}}, Base.Dict{Base.UUID, Array{String, 1}}, Base.Dict{Base.UUID, Array{String, 1}}})
precompile(Tuple{typeof(Base.:(==)), Base.UUID, Base.UUID})
precompile(Tuple{typeof(Base.collect), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.filter!), Base.Fix2{typeof(Base.:(!=)), Symbol}, Array{Symbol, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Pkg.Types, Symbol("#23#24")){Pkg.Types.PackageEntry, Pkg.Types.PackageEntry}, Array{Symbol, 1}})
precompile(Tuple{getfield(Pkg.Types, Symbol("#23#24")){Pkg.Types.PackageEntry, Pkg.Types.PackageEntry}, Symbol})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Symbol, 1}, getfield(Pkg.Types, Symbol("#23#24")){Pkg.Types.PackageEntry, Pkg.Types.PackageEntry}}})
precompile(Tuple{typeof(Base._array_for), Type{Bool}, Array{Symbol, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Bool, 1}, Base.Generator{Array{Symbol, 1}, getfield(Pkg.Types, Symbol("#23#24")){Pkg.Types.PackageEntry, Pkg.Types.PackageEntry}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Bool, 1}, Bool, Base.Generator{Array{Symbol, 1}, getfield(Pkg.Types, Symbol("#23#24")){Pkg.Types.PackageEntry, Pkg.Types.PackageEntry}}, Int64})
precompile(Tuple{typeof(Base.:(==)), Bool, Bool})
precompile(Tuple{typeof(Base.:(==)), Pkg.Types.GitRepo, Pkg.Types.GitRepo})
precompile(Tuple{typeof(Base.:(==)), Base.SHA1, Base.SHA1})
precompile(Tuple{typeof(Base.ident_cmp), Tuple{UInt64}, Tuple{UInt64}})
precompile(Tuple{getfield(REPL, Symbol("#40#43")){REPL.LineEdit.MIState, Base.GenericIOBuffer{Array{UInt8, 1}}, REPL.LineEdit.Prompt}})
precompile(Tuple{typeof(JuliaInterpreter.set_compiled_methods)})
precompile(Tuple{typeof(JuliaInterpreter.__init__)})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Method, Nothing}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Method, Nothing}, Method})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Method, Nothing}, Nothing, Method})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Module, Nothing}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Module, Nothing}, Module})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Module, Nothing}, Nothing, Module})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.UUID})
precompile(Tuple{typeof(Base.debug_color)})
precompile(Tuple{typeof(Base.warn_color)})
precompile(Tuple{typeof(Logging.default_metafmt), Base.CoreLogging.LogLevel, Module, Symbol, Symbol, String, Int64})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.CoreLogging.LogLevel})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, String, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, String, String}, Int64, Int64})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.TTY})
precompile(Tuple{typeof(Base.afoldl), typeof(Base.:(+)), Int64, Int64, Int64})
precompile(Tuple{getfield(Base, Symbol("#printstyled##kw")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{getfield(Base, Symbol("#printstyled##kw")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##printstyled#702")), Bool, Symbol, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("#with_output_color##kw")), NamedTuple{(:bold,), Tuple{Bool}}, typeof(Base.with_output_color), Function, Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##with_output_color#701")), Bool, typeof(Base.with_output_color), Function, Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.write), Base.TTY, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Base.UUID})
precompile(Tuple{Type{NamedTuple{(:stderr,), T} where T<:Tuple}, Tuple{Base.TTY}})
precompile(Tuple{getfield(Base, Symbol("##pipeline#549")), Nothing, Nothing, Base.TTY, Bool, typeof(Base.pipeline), Base.Cmd})
precompile(Tuple{getfield(Base, Symbol("#pipeline##kw")), NamedTuple{(:stderr,), Tuple{Base.TTY}}, typeof(Base.pipeline), Base.Cmd})
precompile(Tuple{getfield(Base, Symbol("##open#559")), Bool, Bool, typeof(Base.open), Base.CmdRedirect, Base.TTY})
precompile(Tuple{typeof(Base.open), Base.CmdRedirect, String, Base.TTY})
precompile(Tuple{typeof(Base.convert), Type{IO}, Base.PipeEndpoint})
precompile(Tuple{typeof(Base.getproperty), Base.Process, Symbol})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{String, 1}})
precompile(Tuple{typeof(Base.write), Base.PipeEndpoint, String})
precompile(Tuple{getfield(Base, Symbol("##sprint#338")), Nothing, Int64, typeof(Base.sprint), Function, UInt64})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, UInt64})
precompile(Tuple{typeof(Base.write), Base.Process, String})
precompile(Tuple{typeof(Base.show_delim_array), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{UInt64, UInt64}, Char, Char, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{UInt64, UInt64}})
precompile(Tuple{getfield(Base, Symbol("##open#270")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#692#694")), String, Vararg{String, N} where N})
precompile(Tuple{typeof(Revise.setup_atom), Module})
precompile(Tuple{typeof(Revise.parse_cache_header), Base.IOStream})
precompile(Tuple{typeof(Revise.parse_cache_header), String})
precompile(Tuple{typeof(Revise.filter_valid_cachefiles), String, Array{String, 1}})
precompile(Tuple{typeof(Revise.pkg_fileinfo), Base.PkgId})
precompile(Tuple{typeof(Base.Filesystem.relpath), String, Revise.PkgData})
precompile(Tuple{Type{OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}}, Module})
precompile(Tuple{typeof(Revise.first_bad_position), String})
precompile(Tuple{typeof(Revise.unwrap), Expr})
precompile(Tuple{typeof(Revise.parse_source!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, String, String, Module})
precompile(Tuple{typeof(Revise.parse_source!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, String, Module})
precompile(Tuple{Type{Revise.CodeTrackingMethodInfo}, Expr})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("#rep#77")), Any, Bool})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("#replace_coretypes_list!##kw")), NamedTuple{(:rev,), Tuple{Bool}}, typeof(JuliaInterpreter.replace_coretypes_list!), Array{Any, 1}})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("##replace_coretypes_list!#76")), Bool, typeof(JuliaInterpreter.replace_coretypes_list!), Array{Any, 1}})
precompile(Tuple{typeof(JuliaInterpreter.compute_ssa_mapping_delete_statements!), Core.CodeInfo, Array{Int64, 1}})
precompile(Tuple{typeof(JuliaInterpreter.replace_ssa!), Expr, Array{Int64, 1}})
precompile(Tuple{typeof(JuliaInterpreter.renumber_ssa!), Array{Any, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(JuliaInterpreter.extract_inner_call!), Expr, Int64, Bool})
precompile(Tuple{typeof(JuliaInterpreter.lookup_global_refs!), Expr})
precompile(Tuple{typeof(JuliaInterpreter.optimize!), Core.CodeInfo, Module})
precompile(Tuple{typeof(JuliaInterpreter.scan_ssa_use!), Base.BitSet, Any})
precompile(Tuple{typeof(JuliaInterpreter.find_used), Core.CodeInfo})
precompile(Tuple{typeof(JuliaInterpreter.getfile), Expr})
precompile(Tuple{typeof(JuliaInterpreter.getline), Expr})
precompile(Tuple{typeof(JuliaInterpreter.getfile), Core.LineInfoNode})
precompile(Tuple{typeof(JuliaInterpreter.getfile), LineNumberNode})
precompile(Tuple{typeof(CodeTracking.whereis), JuliaInterpreter.FrameCode, Int64})
precompile(Tuple{typeof(JuliaInterpreter.toplevel_code_contains_line), JuliaInterpreter.FrameCode, Int64})
precompile(Tuple{typeof(JuliaInterpreter.framecode_matches_breakpoint), JuliaInterpreter.FrameCode, JuliaInterpreter.BreakpointFileLocation})
precompile(Tuple{typeof(JuliaInterpreter.statementnumber), JuliaInterpreter.FrameCode, Int64})
precompile(Tuple{typeof(JuliaInterpreter.add_breakpoint_if_match!), JuliaInterpreter.FrameCode, JuliaInterpreter.BreakpointFileLocation})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("##FrameCode#1")), Bool, Bool, Type{JuliaInterpreter.FrameCode}, Module, Core.CodeInfo})
precompile(Tuple{typeof(JuliaInterpreter.ntupleany), getfield(JuliaInterpreter, Symbol("#39#40")){Array{Any, 1}, Int64}, Int64})
precompile(Tuple{typeof(JuliaInterpreter.prepare_framedata), JuliaInterpreter.FrameCode, Array{Any, 1}, Core.SimpleVector, Bool})
precompile(Tuple{Type{JuliaInterpreter.Frame}, JuliaInterpreter.FrameCode, JuliaInterpreter.FrameData, Int64, Nothing})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("#prepare_thunk##kw")), NamedTuple{(:eval,), Tuple{Bool}}, typeof(JuliaInterpreter.prepare_thunk), Module, Expr, Bool})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("##prepare_thunk#41")), Bool, typeof(JuliaInterpreter.prepare_thunk), Module, Expr, Bool})
precompile(Tuple{typeof(Revise.toplevel_blocks), Core.Compiler.CFG})
precompile(Tuple{typeof(Revise.add_deps!), Array{Int64, 1}, Any, Array{Revise.SlotDep, 1}})
precompile(Tuple{getfield(Revise, Symbol("#errorder#12")), Int64, Int64})
precompile(Tuple{typeof(Revise.add_block_dependents!), Revise.BackEdges, Core.Compiler.CFG, Base.BitArray{1}, Int64, Int64})
precompile(Tuple{typeof(Base.push!), Revise.BackEdges, Base.Pair{GlobalRef, Int64}})
precompile(Tuple{typeof(Base.push!), Revise.BackEdges, Base.Pair{Symbol, Int64}})
precompile(Tuple{typeof(Revise.add_to_backedges!), Revise.BackEdges, Array{Revise.SlotDep, 1}, Int64, Expr})
precompile(Tuple{Type{Revise.BackEdges}, Core.CodeInfo})
precompile(Tuple{typeof(Revise.toplevel_chunks), Revise.BackEdges})
precompile(Tuple{getfield(Revise, Symbol("#hastrackedexpr##kw")), NamedTuple{(:heads,), Tuple{Tuple{Symbol, Symbol, Symbol, Symbol}}}, typeof(Revise.hastrackedexpr), Core.CodeInfo})
precompile(Tuple{getfield(Revise, Symbol("##hastrackedexpr#13")), Tuple{Symbol, Symbol, Symbol, Symbol}, typeof(Revise.hastrackedexpr), Core.CodeInfo, Base.OneTo{Int64}})
precompile(Tuple{getfield(Revise, Symbol("#hastrackedexpr##kw")), NamedTuple{(:heads,), Tuple{Tuple{Symbol, Symbol, Symbol, Symbol}}}, typeof(Revise.hastrackedexpr), Core.CodeInfo, Base.OneTo{Int64}})
precompile(Tuple{getfield(Revise, Symbol("##hastrackedexpr#13")), Tuple{Symbol, Symbol, Symbol, Symbol}, typeof(Revise.hastrackedexpr), Core.CodeInfo, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Revise.add_dependencies!), Revise.CodeTrackingMethodInfo, Revise.BackEdges, Core.CodeInfo, Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{typeof(Revise.minimal_evaluation!), Revise.CodeTrackingMethodInfo, JuliaInterpreter.Frame})
precompile(Tuple{typeof(Revise.trim_toplevel!), Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{typeof(JuliaInterpreter.sparam_syms), Method})
precompile(Tuple{typeof(JuliaInterpreter.lookup_expr), JuliaInterpreter.Frame, Expr})
precompile(Tuple{typeof(JuliaInterpreter.get_return), JuliaInterpreter.Frame})
precompile(Tuple{typeof(LoweredCodeUtils.isanonymous_typedef), Core.CodeInfo})
precompile(Tuple{getfield(Revise, Symbol("##fixpath#45")), String, String, typeof(Revise.fixpath), String})
precompile(Tuple{getfield(Revise, Symbol("##_fixpath#46")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Revise._fixpath), Core.LineInfoNode})
precompile(Tuple{getfield(Revise, Symbol("##_fixpath#46")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Revise._fixpath), LineNumberNode})
precompile(Tuple{typeof(Revise._fixpath), LineNumberNode})
precompile(Tuple{getfield(Revise, Symbol("##fixpath#47")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Revise.fixpath), LineNumberNode})
precompile(Tuple{typeof(Revise.fixpath), LineNumberNode})
precompile(Tuple{typeof(Revise.add_docexpr!), Base.Dict{Module, Array{Expr, 1}}, Module, Expr})
precompile(Tuple{typeof(LoweredCodeUtils.ismethod3), JuliaInterpreter.Frame})
precompile(Tuple{typeof(LoweredCodeUtils.identify_framemethod_calls), JuliaInterpreter.Frame})
precompile(Tuple{typeof(LoweredCodeUtils.callchain), Array{NamedTuple{(:linetop, :linebody, :callee, :caller), Tuple{Int64, Int64, Symbol, Union{Bool, Symbol}}}, 1}})
precompile(Tuple{typeof(LoweredCodeUtils.replacename!), Array{Any, 1}, Base.Pair{Symbol, Nothing}})
precompile(Tuple{typeof(LoweredCodeUtils.replacename!), Array{Any, 1}, Base.Pair{Symbol, Symbol}})
precompile(Tuple{typeof(LoweredCodeUtils.rename_framemethods!), Any, JuliaInterpreter.Frame, Base.Dict{Symbol, LoweredCodeUtils.MethodInfo}, Array{NamedTuple{(:linetop, :linebody, :callee, :caller), Tuple{Int64, Int64, Symbol, Union{Bool, Symbol}}}, 1}, Base.Dict{Symbol, Union{Bool, Symbol}}})
precompile(Tuple{typeof(JuliaInterpreter.resolvefc), JuliaInterpreter.Frame, Any})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("##collect_args#60")), Bool, typeof(JuliaInterpreter.collect_args), JuliaInterpreter.Frame, Expr})
precompile(Tuple{getfield(Revise, Symbol("##methods_by_execution!#22")), Bool, Bool, typeof(Revise.methods_by_execution!), Any, Revise.CodeTrackingMethodInfo, Base.Dict{Module, Array{Expr, 1}}, JuliaInterpreter.Frame, Base.BitArray{1}})
precompile(Tuple{getfield(Revise, Symbol("##methods_by_execution!#17")), Bool, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Revise.methods_by_execution!), Any, Revise.CodeTrackingMethodInfo, Base.Dict{Module, Array{Expr, 1}}, Module, Expr})
precompile(Tuple{typeof(Revise.storedeps), Base.Set{Union{GlobalRef, Symbol}}, Nothing, Module})
precompile(Tuple{typeof(Revise.storedeps), Base.Set{Union{GlobalRef, Symbol}}, Array{Any, 1}, Module})
precompile(Tuple{typeof(Revise.storedeps), Base.Set{Union{GlobalRef, Symbol}}, Revise.RelocatableExpr, Module})
precompile(Tuple{getfield(Revise, Symbol("##instantiate_sigs!#79")), Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Revise.instantiate_sigs!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}})
precompile(Tuple{typeof(Revise.queue_includes!), Revise.PkgData, Base.PkgId})
precompile(Tuple{typeof(Revise.parse_pkg_files), Base.PkgId})
precompile(Tuple{Type{Revise.WatchList}})
precompile(Tuple{typeof(Revise.init_watching), Revise.PkgData, Array{String, 1}})
precompile(Tuple{typeof(Revise.__init__)})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Base.PkgId, Revise.PkgData}, Base.PkgId})
precompile(Tuple{typeof(CodeTracking.basepath), Base.PkgId})
precompile(Tuple{typeof(Base.push!), Array{Tuple{Module, String, Float64}, 1}, Tuple{Module, String, Float64}})
precompile(Tuple{typeof(Base._deleteat!), Array{Tuple{Module, String, Float64}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Array{Tuple{Module, String, Float64}, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Array{Tuple{Module, String, Float64}, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.fill!), Array{Int32, 1}, Int64})
precompile(Tuple{typeof(OrderedCollections.rehash!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, Int64})
precompile(Tuple{typeof(OrderedCollections.ht_keyindex2), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, Module})
precompile(Tuple{typeof(OrderedCollections._setindex!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Module, Int64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Module})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Base.PkgId, CodeTracking.PkgFiles}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Base.PkgId, CodeTracking.PkgFiles}, Base.PkgId})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Base.PkgId, CodeTracking.PkgFiles}, CodeTracking.PkgFiles, Base.PkgId})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Revise.WatchList}, String})
precompile(Tuple{Type{Base.Dict{String, Base.PkgId}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, Revise.WatchList}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, Revise.WatchList}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Revise.WatchList}, Revise.WatchList, String})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, Base.PkgId}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, Base.PkgId}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Base.PkgId}, Base.PkgId, String})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Base.PkgId, Revise.PkgData}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Base.PkgId, Revise.PkgData}, Base.PkgId})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Base.PkgId, Revise.PkgData}, Revise.PkgData, Base.PkgId})
precompile(Tuple{getfield(Base, Symbol("#683#684")){Base.UUID, String}, Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#270")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#683#684")){Base.UUID, String}, String})
precompile(Tuple{typeof(Base.manifest_deps_get), String, Base.PkgId, String})
precompile(Tuple{typeof(Base.identify_package), Base.PkgId, String})
precompile(Tuple{typeof(Base.stale_cachefile), String, String})
precompile(Tuple{typeof(Base.sort!), Array{String, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.ReverseOrdering{Base.Order.By{getfield(Revise, Symbol("#26#27"))}}})
precompile(Tuple{typeof(Base.sort!), Array{String, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.ReverseOrdering{Base.Order.By{getfield(Revise, Symbol("#26#27"))}}, Array{String, 1}})
precompile(Tuple{typeof(Revise.watch_package), Base.PkgId})
precompile(Tuple{getfield(Revise, Symbol("#97#98")){REPL.REPLBackend}})
precompile(Tuple{Revise.TaskThunk})
precompile(Tuple{typeof(Revise.wait_changed), String})
precompile(Tuple{typeof(Revise.throwto_repl), InterruptException})
precompile(Tuple{typeof(Revise.watch_files_via_dir), String})
precompile(Tuple{typeof(Revise.hasfile), Revise.PkgData, String})
precompile(Tuple{typeof(Revise.revise_dir_queued), String})
precompile(Tuple{Type{FileWatching.FileMonitor}, String})
precompile(Tuple{typeof(Base.preserve_handle), FileWatching.FileMonitor})
precompile(Tuple{typeof(FileWatching.start_watching), FileWatching.FileMonitor})
precompile(Tuple{typeof(Base.unpreserve_handle), FileWatching.FileMonitor})
precompile(Tuple{typeof(FileWatching.stop_watching), FileWatching.FileMonitor})
precompile(Tuple{typeof(Base.wait), FileWatching.FileMonitor})
precompile(Tuple{typeof(FileWatching.watch_file), String, Int64})
precompile(Tuple{typeof(Revise.watch_manifest), String})
precompile(Tuple{typeof(Revise.remove_from_included_files), Symbol})
precompile(Tuple{typeof(Revise.has_writable_paths), Revise.PkgData})
precompile(Tuple{typeof(Revise._watch_package), Base.PkgId})
precompile(Tuple{getfield(Revise, Symbol("#35#36")){Base.PkgId}})
precompile(Tuple{typeof(Revise.add_definitions_from_repl), String})
precompile(Tuple{typeof(Revise.read_from_cache), Revise.PkgData, String})
precompile(Tuple{typeof(Revise.maybe_parse_from_cache!), Revise.PkgData, String})
precompile(Tuple{typeof(Revise.delete_missing!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}})
precompile(Tuple{typeof(Revise.handle_deletions), Revise.PkgData, String})
precompile(Tuple{typeof(Revise.init_watching), Revise.PkgData, Tuple{String}})
precompile(Tuple{typeof(Revise.maybe_add_includes_to_pkgdata!), Revise.PkgData, String, Array{Base.Pair{Module, String}, 1}})
precompile(Tuple{typeof(Revise.errors), Array{Any, 1}})
precompile(Tuple{typeof(Revise.queue_includes), Module})
precompile(Tuple{getfield(Revise, Symbol("##process_user_callbacks!#65")), Bool, typeof(Revise.process_user_callbacks!), Base.Set{Any}})
precompile(Tuple{getfield(Revise, Symbol("##revise#84")), Bool, typeof(Revise.revise)})
precompile(Tuple{typeof(Revise.run_backend), REPL.REPLBackend})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{REPL.REPLCompletions.Completion, Nothing}, REPL.REPLCompletions.PackageCompletion})
precompile(Tuple{typeof(Base.in), REPL.REPLCompletions.PackageCompletion, Base.Set{REPL.REPLCompletions.Completion}})
precompile(Tuple{typeof(REPL.LineEdit.edit_splice!), Any, Base.Pair{#s662, #s661} where #s661<:Integer where #s662<:Integer, AbstractString})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Tuple{Revise.PkgData, String}, Nothing}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Any, Nothing}})
precompile(Tuple{typeof(Base.register_root_module), Module})
precompile(Tuple{typeof(Base._include_from_serialized), String, Array{Any, 1}})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, String})
precompile(Tuple{typeof(Base._require_search_from_serialized), Base.PkgId, String})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Nothing})
precompile(Tuple{typeof(Base.compilecache), Base.PkgId, String})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, Nothing})
precompile(Tuple{typeof(Base._require_from_serialized), String})
precompile(Tuple{typeof(Base._require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{typeof(Base.CoreLogging.shouldlog), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, Module, Symbol, Symbol})
precompile(Tuple{typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, Symbol, Symbol, String, Int64})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Base.UUID})
precompile(Tuple{typeof(Requires.__init__)})
precompile(Tuple{typeof(Requires.loadpkg), Base.PkgId})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Base.PkgId, Array{Function, 1}}, Base.PkgId})
precompile(Tuple{typeof(MacroTools.__init__)})
precompile(Tuple{typeof(Base.nextpow), Int64, Int64})
precompile(Tuple{typeof(Random.shuffle!), Random.MersenneTwister, Array{Symbol, 1}})
precompile(Tuple{typeof(Parsers.__init__)})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.MPFR.BigFloat, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.MPFR.BigFloat, 1}, Base.MPFR.BigFloat})
precompile(Tuple{typeof(ColorTypes.register_hints)})
precompile(Tuple{typeof(ColorTypes.__init__)})
precompile(Tuple{typeof(PyCall.pythonenv), Base.Cmd})
precompile(Tuple{typeof(PyCall.find_libpython), String})
precompile(Tuple{typeof(PyCall._preserveas!), Array{UInt8, 1}, Type{Base.Cstring}, String})
precompile(Tuple{getfield(Base, Symbol("#thrownonint#205")){Int32, UInt8}, Type{Int32}, Type{UInt8}, Int64})
precompile(Tuple{typeof(Base.unalias), Array{UInt8, 1}, Base.ReinterpretArray{UInt8, 1, Int32, Array{Int32, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.ReinterpretArray{UInt8, 1, Int32, Array{Int32, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), Array{UInt8, 1}, Base.ReinterpretArray{UInt8, 1, Int32, Array{Int32, 1}}})
precompile(Tuple{typeof(PyCall._preserveas!), Array{UInt8, 1}, Type{Base.Cwstring}, String})
precompile(Tuple{typeof(PyCall.Py_SetProgramName), Nothing, Base.VersionNumber, String})
precompile(Tuple{typeof(PyCall._pyimport), String})
precompile(Tuple{Type{PyCall.PyError}, String})
precompile(Tuple{typeof(PyCall.pyimport), String})
precompile(Tuple{typeof(PyCall.pydecref_), PyCall.PyObject})
precompile(Tuple{typeof(Base.getproperty), PyCall.PyObject, String})
precompile(Tuple{typeof(PyCall.pyexc_initialize)})
precompile(Tuple{typeof(PyCall._handle_error), String})
precompile(Tuple{typeof(PyCall.pyjlwrap_dealloc), Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyjlwrap_repr), Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(Base.hash), PyCall.PyObject})
precompile(Tuple{typeof(PyCall.pyjlwrap_hash), Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyjlwrap_hash32), Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.convert), Type{String}, PyCall.PyObject})
precompile(Tuple{Type{PyCall.PyObject}, Nothing})
precompile(Tuple{typeof(PyCall.pyjlwrap_getattr), Ptr{PyCall.PyObject_struct}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyjlwrap_getiter), Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.PyTypeObject!), getfield(PyCall, Symbol("#129#130")){Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}}, PyCall.PyTypeObject, String, Int64})
precompile(Tuple{typeof(PyCall.pyjlwrap_init)})
precompile(Tuple{typeof(PyCall.pyhasproperty), PyCall.PyObject, String})
precompile(Tuple{typeof(PyCall._setproperty!), PyCall.PyObject, String, String})
precompile(Tuple{typeof(PyCall._set_finalized)})
precompile(Tuple{typeof(PyCall.Py_SetProgramName), Ptr{Nothing}, Base.VersionNumber, String})
precompile(Tuple{typeof(PyCall.__init__)})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Module, PyCall.PyDict{String, PyCall.PyObject, true}}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Symbol, Base.Timer}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Symbol, Ptr{Nothing}}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Ptr{PyCall.PyObject_struct}, Any}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}})
precompile(Tuple{typeof(PyCall.Py_SetPythonHome), Ptr{Nothing}, Base.VersionNumber, String})
precompile(Tuple{typeof(Base.filter!), getfield(Base, Symbol("#66#67")){typeof(Base.isempty)}, Array{Base.SubString{String}, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{Base.SubString{String}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.SubString{String}, 1}, Int64, Base.Generator{Array{Base.SubString{String}, 1}, typeof(VersionParsing.digits2num)}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Int64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Array{Base.SubString{String}, 1}, typeof(VersionParsing.digits2num)}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Base.SubString{String}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Base.SubString{String}, 1}, Int64, Array{Base.SubString{String}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.SubString{String}, 1}, Base.Generator{Array{Base.SubString{String}, 1}, typeof(VersionParsing.digits2num)}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Int64, 1}, Base.SubString{String}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Base.SubString{String}, Base.Generator{Array{Base.SubString{String}, 1}, typeof(VersionParsing.digits2num)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{Base.SubString{String}, 1}, Base.Generator{Array{Base.SubString{String}, 1}, typeof(VersionParsing.digits2num)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(VersionParsing.vparse), String})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Bool}})
precompile(Tuple{typeof(PyCall.typetuple), Base.Generator{Base.UnitRange{Int64}, getfield(PyCall, Symbol("#36#37")){PyCall.PyObject}}})
precompile(Tuple{typeof(PyCall.array_format), PyCall.PyBuffer})
precompile(Tuple{typeof(PyCall.pysequence_query), PyCall.PyObject})
precompile(Tuple{typeof(PyCall.pytype_query), PyCall.PyObject, Type{PyCall.PyObject}})
precompile(Tuple{typeof(Base.convert), Type{PyCall.PyAny}, PyCall.PyObject})
precompile(Tuple{typeof(PyCall.pyptr_query), PyCall.PyObject})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Ptr{PyCall.PyObject_struct}}})
precompile(Tuple{typeof(PyCall.pyisinstance), PyCall.PyObject, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pynothing_query), PyCall.PyObject})
precompile(Tuple{typeof(Base.convert), Type{PyCall.PyObject}, PyCall.PyObject})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{Exception}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Type{T} where T})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{ErrorException}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{Base.SystemError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{TypeError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{Base.Meta.ParseError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{ArgumentError}})
precompile(Tuple{typeof(PyCall.pydecref), PyCall.PyBuffer})
precompile(Tuple{typeof(PyCall.pydecref), PyCall.PyObject})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{Base.KeyError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{LoadError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{MethodError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{Base.EOFError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{BoundsError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{DivideError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{DomainError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{OverflowError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{InexactError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{OutOfMemoryError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{StackOverflowError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{UndefRefError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{InterruptException}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{PyCall.PyIOError}})
precompile(Tuple{typeof(Base._append!), Array{PyCall.PyMemberDef, 1}, Base.HasLength, Tuple{PyCall.PyMemberDef, PyCall.PyMemberDef}})
precompile(Tuple{typeof(PyCall.pyeval_), String, PyCall.PyDict{String, PyCall.PyObject, true}, PyCall.PyDict{String, PyCall.PyObject, true}, Int64, String})
precompile(Tuple{typeof(PyCall.pyeval_), String})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Module, PyCall.PyDict{String, PyCall.PyObject, true}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Module, PyCall.PyDict{String, PyCall.PyObject, true}}, Module})
precompile(Tuple{typeof(Base.setindex!), PyCall.PyDict{String, PyCall.PyObject, true}, PyCall.PyObject, String})
precompile(Tuple{getfield(PyCall, Symbol("#118#119")){Module}})
precompile(Tuple{typeof(Base.get!), getfield(PyCall, Symbol("#118#119")){Module}, Base.Dict{Module, PyCall.PyDict{String, PyCall.PyObject, true}}, Module})
precompile(Tuple{Type{PyCall.PyObject}, Symbol})
precompile(Tuple{typeof(Base.:(!=)), PyCall.PyObject, PyCall.PyObject})
precompile(Tuple{typeof(PyPlot.init_colormaps)})
precompile(Tuple{typeof(PyPlot.__init__)})
precompile(Tuple{typeof(Base.print_to_string), Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{typeof(Base.Multimedia.istextmime), Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{typeof(Base.Multimedia.displayable), Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{typeof(Base.Multimedia.displayable), REPL.REPLDisplay{REPL.LineEditREPL}, Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{typeof(PyCall.anaconda_conda)})
precompile(Tuple{typeof(PyCall.pyimport_conda), String, String, String})
precompile(Tuple{typeof(Base.getindex), Array{Ptr{UInt8}, 1}, Int64})
precompile(Tuple{typeof(Base.allocatedinline), Type{Ptr{PyCall.PyObject_struct}}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Symbol, String}, 1}, Base.Generator{Array{Symbol, 1}, getfield(PyPlot, Symbol("#3#4")){Base.Dict{Symbol, String}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Symbol, 1}, getfield(PyPlot, Symbol("#3#4")){Base.Dict{Symbol, String}}}})
precompile(Tuple{Type{Base.Dict{String, Symbol}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, Symbol}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, Symbol}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Symbol}, Symbol, String})
precompile(Tuple{Type{PyCall.PyDict{PyCall.PyAny, PyCall.PyAny, isdict} where isdict}, PyCall.PyObject})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Symbol}, String})
precompile(Tuple{typeof(Base.isequal), PyCall.PyObject, Symbol})
precompile(Tuple{typeof(Base.:(==)), WeakRef, Symbol})
precompile(Tuple{typeof(PyCall.pydecref_), Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{String}, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Bool}, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(PyCall.pyexists), String})
precompile(Tuple{typeof(PyCall.pygui_works), Symbol})
precompile(Tuple{typeof(Base.haskey), PyCall.PyDict{PyCall.PyAny, PyCall.PyAny, true}, String})
precompile(Tuple{typeof(PyCall.pygui), Symbol})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, Base.Timer}, Symbol})
precompile(Tuple{typeof(PyCall.wx_eventloop), Float64})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, Base.Timer}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, Base.Timer}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Base.Timer}, Base.Timer, Symbol})
precompile(Tuple{typeof(Base.:(==)), Base.VersionNumber, Base.VersionNumber})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.VersionNumber})
precompile(Tuple{typeof(Base.print_to_string), Base.VersionNumber})
precompile(Tuple{typeof(PyCall.gtk_requireversion), String, Base.VersionNumber})
precompile(Tuple{typeof(PyCall.gtk_eventloop), String, Float64})
precompile(Tuple{typeof(PyCall.Tk_eventloop), Float64})
precompile(Tuple{typeof(PyCall.fixqtpath), String})
precompile(Tuple{typeof(PyCall.qt_eventloop), PyCall.PyObject, Float64})
precompile(Tuple{typeof(PyCall.qt_eventloop), Float64})
precompile(Tuple{typeof(PyCall.pygui_start), Symbol, Float64})
precompile(Tuple{typeof(Base.haskey), PyCall.PyDict{PyCall.PyAny, PyCall.PyAny, false}, String})
precompile(Tuple{typeof(PyCall.pygui)})
precompile(Tuple{typeof(PyPlot.find_backend), PyCall.PyObject})
precompile(Tuple{Type{PyCall.PyDict{PyCall.PyAny, PyCall.PyAny, true}}, PyCall.PyObject})
precompile(Tuple{typeof(Base.get), PyCall.PyObject, Type{PyCall.PyAny}, String, String})
precompile(Tuple{typeof(Base.insert!), Array{Tuple{Symbol, String}, 1}, Int64, Tuple{Symbol, String}})
precompile(Tuple{typeof(Base.:(==)), Symbol, Symbol})
precompile(Tuple{typeof(Base.convert), Type{Nothing}, PyCall.PyObject})
precompile(Tuple{typeof(Base.getindex), Array{Bool, 1}, Int64})
precompile(Tuple{typeof(Base.convert), Type{AbstractString}, PyCall.PyObject})
precompile(Tuple{typeof(Base.tryparse_internal), Type{Base.GMP.BigInt}, String, Int64, Int64, Int64, Bool})
precompile(Tuple{getfield(Base, Symbol("##parse#346")), Nothing, typeof(Base.parse), Type{Base.GMP.BigInt}, String})
precompile(Tuple{typeof(Base.convert), Type{Base.GMP.BigInt}, PyCall.PyObject})
precompile(Tuple{typeof(Base.convert), Type{Integer}, PyCall.PyObject})
precompile(Tuple{typeof(Base.:(==)), PyCall.PyObject, PyCall.PyObject})
precompile(Tuple{typeof(PyCall.pytype_mapping), PyCall.PyObject, Type{T} where T})
precompile(Tuple{typeof(Base.allocatedinline), Type{PyCall.PyTypeObject}})
precompile(Tuple{typeof(Base.isimmutable), Any})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Ptr{PyCall.PyObject_struct}, Any}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Ptr{PyCall.PyObject_struct}, Any}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Ptr{PyCall.PyObject_struct}, Any}, Base.RefValue{Any}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Ptr{PyCall.PyObject_struct}, Any}, Function, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyjlwrap_new), PyCall.PyTypeObject, Function})
precompile(Tuple{typeof(PyCall._setproperty!), PyCall.PyObject, String, Function})
precompile(Tuple{typeof(Base.convert), Type{Bool}, PyCall.PyObject})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{}, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{}, Int64, PyCall.PyObject})
precompile(Tuple{Type{Base.Dict{AbstractString, Any}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{AbstractString, Any}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{AbstractString, Any}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{AbstractString, Any}, Int64, String})
precompile(Tuple{Type{Base.Dict{AbstractString, Any}}, Array{Base.Pair{String, Int64}, 1}})
precompile(Tuple{Type{PyCall.PyObject}, Base.Dict{AbstractString, Any}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{String, Int64}, 1}, Base.Pair{String, Int64}, Base.Generator{Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol, Symbol}, NamedTuple{(:vmin, :vmax), Tuple{Int64, Int64}}}, getfield(PyCall, Symbol("#108#109"))}, Int64})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{}, Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol, Symbol}, NamedTuple{(:vmin, :vmax), Tuple{Int64, Int64}}}})
precompile(Tuple{Type{PyCall.PyObject}, String})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{AbstractString, Any}, String})
precompile(Tuple{typeof(Base.getindex), Base.Dict{AbstractString, Any}, String})
precompile(Tuple{Type{PyCall.PyObject}, Int64})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{PyCall.PyObject_struct}}, PyCall.PyObject})
precompile(Tuple{typeof(CompilerSupportLibraries_jll.__init__)})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##load_overrides#3")), Bool, typeof(Pkg.Artifacts.load_overrides)})
precompile(Tuple{typeof(Pkg.Artifacts.process_overrides), Base.Dict{String, Any}, Base.UUID})
precompile(Tuple{typeof(Pkg.Artifacts.do_artifact_str), String, Base.Dict{String, Any}, String, Module})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, Symbol})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Base.UUID, Base.Dict{String, Union{Base.SHA1, String}}}, Base.UUID})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_meta#20")), Pkg.BinaryPlatforms.Platform, typeof(Pkg.Artifacts.artifact_meta), String, Base.Dict{String, Any}, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#artifact_meta##kw")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.Linux}}, typeof(Pkg.Artifacts.artifact_meta), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.unpack_platform), Base.Dict{String, Any}, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}, Base.Dict{String, Any}})
precompile(Tuple{Type{Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Generator{Array{Base.Dict{String, Any}, 1}, getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}}})
precompile(Tuple{Type{NamedTuple{(:libgfortran_version, :libstdcxx_version, :cxxstring_abi), T} where T<:Tuple}, Tuple{Base.VersionNumber, Nothing, Nothing}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:libgfortran_version, :libstdcxx_version, :cxxstring_abi), Tuple{Base.VersionNumber, Nothing, Nothing}}, Type{Pkg.BinaryPlatforms.CompilerABI}})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#FreeBSD#19#20")), Nothing, Nothing, Pkg.BinaryPlatforms.CompilerABI, Type{Pkg.BinaryPlatforms.FreeBSD}, Symbol})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:libc, :compiler_abi), Tuple{Nothing, Pkg.BinaryPlatforms.CompilerABI}}, Type{Pkg.BinaryPlatforms.FreeBSD}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Pkg.BinaryPlatforms.FreeBSD, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.FreeBSD})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Base.Dict{String, Any}, Pkg.BinaryPlatforms.FreeBSD})
precompile(Tuple{typeof(Base.mapfilter), getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.Linux}, typeof(Base.push!), Base.KeySet{Pkg.BinaryPlatforms.Platform, Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Set{Pkg.BinaryPlatforms.Platform}})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.Linux}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.Linux}, Pkg.BinaryPlatforms.FreeBSD})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#ensure_artifact_installed##kw")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.Linux}}, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.query_override), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_paths#9")), Bool, typeof(Pkg.Artifacts.artifact_paths), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_exists#11")), Bool, typeof(Pkg.Artifacts.artifact_exists), Base.SHA1})
precompile(Tuple{typeof(Base.Filesystem.temp_cleanup_purge), Bool})
precompile(Tuple{getfield(Base.Filesystem, Symbol("##temp_cleanup_later#14")), Bool, typeof(Base.Filesystem.temp_cleanup_later), String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##probe_cmd#13")), Bool, typeof(Pkg.PlatformEngines.probe_cmd), Base.Cmd})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##probe_platform_engines!#14")), Bool, typeof(Pkg.PlatformEngines.probe_platform_engines!)})
precompile(Tuple{getfield(Base.Filesystem, Symbol("##mktempdir#19")), String, Bool, typeof(Base.Filesystem.mktempdir), String})
precompile(Tuple{getfield(Base.Filesystem, Symbol("##tempname#17")), Bool, typeof(Base.Filesystem.tempname), String})
precompile(Tuple{typeof(Base.:(>=)), PyCall.PyObject, PyCall.PyObject})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("#78#79")), Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#270")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:write,), Tuple{Bool}}}, typeof(Base.open), getfield(Pkg.PlatformEngines, Symbol("#78#79")), String})
precompile(Tuple{getfield(Base.Filesystem, Symbol("#cptree##kw")), NamedTuple{(:force, :follow_symlinks), Tuple{Bool, Bool}}, typeof(Base.Filesystem.cptree), String, String})
precompile(Tuple{typeof(Base.stat), Base.Libc.RawFD})
precompile(Tuple{typeof(Base.Filesystem.sendfile), String, String})
precompile(Tuple{getfield(Base.Filesystem, Symbol("##cptree#11")), Bool, Bool, typeof(Base.Filesystem.cptree), String, String})
precompile(Tuple{getfield(Base.Filesystem, Symbol("##cp#12")), Bool, Bool, typeof(Base.Filesystem.cp), String, String})
precompile(Tuple{typeof(Base.Filesystem.rename), String, String})
precompile(Tuple{typeof(Pkg.PlatformEngines.get_server_dir), String, Base.SubString{String}})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##get_auth_header#77")), Bool, typeof(Pkg.PlatformEngines.get_auth_header), String})
precompile(Tuple{typeof(Random.make_seed)})
precompile(Tuple{Type{Random.MersenneTwister}, Nothing})
precompile(Tuple{typeof(Random.default_rng), Int64})
precompile(Tuple{typeof(UUIDs.uuid4)})
precompile(Tuple{typeof(Random.randstring), Int64})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("#81#86")), Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#270")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:write,), Tuple{Bool}}}, typeof(Base.open), getfield(Pkg.PlatformEngines, Symbol("#81#86")), String})
precompile(Tuple{typeof(Pkg.PlatformEngines.load_telemetry_file), String})
precompile(Tuple{typeof(Base.load_path_expand), String})
precompile(Tuple{typeof(Base.active_project), Bool})
precompile(Tuple{typeof(Pkg.PlatformEngines.get_telemetry_headers), String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download#87")), Bool, Nothing, typeof(Pkg.PlatformEngines.download), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download_verify#88")), Bool, Bool, Bool, typeof(Pkg.PlatformEngines.download_verify), String, Nothing, String})
precompile(Tuple{typeof(Pkg.PlatformEngines.probe_symlink_creation), String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##unpack#96")), Bool, typeof(Pkg.PlatformEngines.unpack), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download_verify_unpack#101")), Nothing, Bool, Bool, Bool, Bool, typeof(Pkg.PlatformEngines.download_verify_unpack), String, Nothing, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#artifact_paths##kw")), NamedTuple{(:honor_overrides,), Tuple{Bool}}, typeof(Pkg.Artifacts.artifact_paths), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_path#10")), Bool, typeof(Pkg.Artifacts.artifact_path), Base.SHA1})
precompile(Tuple{typeof(Pkg.set_readonly), String})
precompile(Tuple{typeof(Pkg.Artifacts.create_artifact), getfield(Pkg.Artifacts, Symbol("#39#40")){Bool, String, Nothing}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##download_artifact#38")), Bool, Bool, typeof(Pkg.Artifacts.download_artifact), Base.SHA1, String, Nothing})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#43#45")){Bool, Bool, Base.SHA1}})
precompile(Tuple{typeof(Pkg.Artifacts.with_show_download_info), getfield(Pkg.Artifacts, Symbol("#43#45")){Bool, Bool, Base.SHA1}, String, Bool})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##ensure_artifact_installed#42")), Pkg.BinaryPlatforms.Platform, Bool, Bool, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.artifact_path), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##query_override#7")), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, typeof(Pkg.Artifacts.query_override), Base.SHA1})
precompile(Tuple{typeof(Libdl.dlopen), String})
precompile(Tuple{typeof(DynamicalBilliards.__init__)})
precompile(Tuple{typeof(Requires.listenpkg), Any, Base.PkgId})
precompile(Tuple{typeof(Requires.withpath), Any, String})
precompile(Tuple{getfield(DynamicalBilliards, Symbol("#74#77"))})
precompile(Tuple{typeof(Requires.withnotifications), String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Revise.add_require), String, Module, String, String, Expr})
precompile(Tuple{getfield(DynamicalBilliards, Symbol("#75#78"))})
precompile(Tuple{typeof(Requires.err), Any, Module, String})
precompile(Tuple{getfield(DynamicalBilliards, Symbol("#76#79"))})
precompile(Tuple{typeof(Base.load_path)})
precompile(Tuple{typeof(Base.locate_package), Base.PkgId})
precompile(Tuple{typeof(Base.identify_package), String})
precompile(Tuple{getfield(Base, Symbol("#683#684")){Base.UUID, String}, Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#270")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#683#684")){Base.UUID, String}, String})
precompile(Tuple{typeof(Base.manifest_deps_get), String, Base.PkgId, String})
precompile(Tuple{typeof(Base.identify_package), Base.PkgId, String})
precompile(Tuple{typeof(Base.stat), Base.Libc.RawFD})
precompile(Tuple{typeof(Base.isvalid_file_crc), Base.IOStream})
precompile(Tuple{typeof(Base.stale_cachefile), String, String})
precompile(Tuple{typeof(Base.register_root_module), Module})
precompile(Tuple{typeof(Base._include_from_serialized), String, Array{Any, 1}})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, String})
precompile(Tuple{typeof(Base._require_search_from_serialized), Base.PkgId, String})
precompile(Tuple{typeof(Base.compilecache_path), Base.PkgId})
precompile(Tuple{typeof(Base.load_path_setup_code), Bool})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Nothing})
precompile(Tuple{typeof(Base.compilecache), Base.PkgId, String})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, Nothing})
precompile(Tuple{typeof(Base._require_from_serialized), String})
precompile(Tuple{typeof(Base._require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{typeof(Base.Filesystem.readdir), String})
precompile(Tuple{typeof(DynamicalBilliards.include), String})
precompile(Tuple{getfield(Revise, Symbol("#103#104")), Module, String})
precompile(Tuple{getfield(Base, Symbol("#@views")), LineNumberNode, Module, Any})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base._views), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base._views), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Base.BitArray{1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base._views), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base._views), Tuple{Array{Any, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base._views), Tuple{Array{Any, 1}}}})
precompile(Tuple{typeof(Base._views), Expr})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(Base._views), Expr})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Symbol, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base._views), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Any, 1}, Array{Symbol, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base._views), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, QuoteNode, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Expr, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base._views), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Any, 1}, Array{Symbol, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base._views), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Expr, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Docs.docm), LineNumberNode, Module, Any, Any, Bool})
precompile(Tuple{typeof(Base.Docs.docm), LineNumberNode, Module, Any, Any})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Expr})
precompile(Tuple{typeof(Base.show_unquoted_expr_fallback), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Expr, Int64, Int64})
precompile(Tuple{typeof(Base.show_list), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}, String, Int64, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.show_list), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}, Symbol, Int64, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.show_enclosed_list), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Array{Any, 1}, String, String, Int64, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.show_generator), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Expr, Int64, Int64})
precompile(Tuple{typeof(Base.show_list), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}, Char, Int64, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.show_block), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Array{Any, 1}, Expr, Int64, Int64})
precompile(Tuple{typeof(Base.show_unquoted), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Expr, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.show_unquoted), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Expr, Int64, Int64})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(Core, Symbol("#@cmd")), LineNumberNode, Module, Any})
precompile(Tuple{getfield(Base, Symbol("##shell_parse#349")), String, typeof(Base.shell_parse), String, Bool})
precompile(Tuple{getfield(Base, Symbol("#shell_parse##kw")), NamedTuple{(:special,), Tuple{String}}, typeof(Base.shell_parse), String})
precompile(Tuple{getfield(Base.Meta, Symbol("##parse#1")), Bool, Bool, Bool, typeof(Base.Meta.parse), Base.SubString{String}, Int64})
precompile(Tuple{getfield(Base.Meta, Symbol("#parse##kw")), NamedTuple{(:greedy,), Tuple{Bool}}, typeof(Base.Meta.parse), Base.SubString{String}, Int64})
precompile(Tuple{typeof(Base.CoreLogging.with_logger), Function, Logging.ConsoleLogger})
precompile(Tuple{typeof(Base.Docs.splitexpr), Expr})
precompile(Tuple{typeof(Base.Docs.bindingexpr), Any})
precompile(Tuple{typeof(Base.Docs.objectdoc), Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.Docs.docstr), Any, Any})
precompile(Tuple{typeof(Base.Docs._docstr), Core.SimpleVector, Any})
precompile(Tuple{typeof(Base.isequal), PyCall.PyObject, Module})
precompile(Tuple{typeof(Base.:(==)), Module, WeakRef})
precompile(Tuple{typeof(Base.Docs.doc!), Module, Base.Docs.Binding, Base.Docs.DocStr, Any})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{typeof(Base.foreach), getfield(OpenBLAS_jll, Symbol("#7#9")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(OpenBLAS_jll, Symbol("#8#10")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.vcat), Array{String, 1}, Array{String, 1}})
precompile(Tuple{typeof(OpenBLAS_jll.__init__)})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##load_overrides#3")), Bool, typeof(Pkg.Artifacts.load_overrides)})
precompile(Tuple{typeof(Pkg.Artifacts.process_overrides), Base.Dict{String, Any}, Base.UUID})
precompile(Tuple{typeof(Pkg.Artifacts.do_artifact_str), String, Base.Dict{String, Any}, String, Module})
precompile(Tuple{typeof(Pkg.Artifacts.unpack_platform), Base.Dict{String, Any}, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}, Base.Dict{String, Any}})
precompile(Tuple{Type{Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Generator{Array{Base.Dict{String, Any}, 1}, getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#ensure_artifact_installed##kw")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.Linux}}, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.query_override), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_paths#9")), Bool, typeof(Pkg.Artifacts.artifact_paths), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_exists#11")), Bool, typeof(Pkg.Artifacts.artifact_exists), Base.SHA1})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("#78#79")), Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#270")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:write,), Tuple{Bool}}}, typeof(Base.open), getfield(Pkg.PlatformEngines, Symbol("#78#79")), String})
precompile(Tuple{getfield(Base.Filesystem, Symbol("#cptree##kw")), NamedTuple{(:force, :follow_symlinks), Tuple{Bool, Bool}}, typeof(Base.Filesystem.cptree), String, String})
precompile(Tuple{typeof(Base.Filesystem.sendfile), String, String})
precompile(Tuple{getfield(Base.Filesystem, Symbol("##cptree#11")), Bool, Bool, typeof(Base.Filesystem.cptree), String, String})
precompile(Tuple{getfield(Base.Filesystem, Symbol("##cp#12")), Bool, Bool, typeof(Base.Filesystem.cp), String, String})
precompile(Tuple{typeof(Base.Filesystem.rename), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##get_auth_header#77")), Bool, typeof(Pkg.PlatformEngines.get_auth_header), String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("#81#86")), Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#270")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:write,), Tuple{Bool}}}, typeof(Base.open), getfield(Pkg.PlatformEngines, Symbol("#81#86")), String})
precompile(Tuple{typeof(Pkg.PlatformEngines.load_telemetry_file), String})
precompile(Tuple{typeof(Pkg.PlatformEngines.get_telemetry_headers), String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download#87")), Bool, Nothing, typeof(Pkg.PlatformEngines.download), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download_verify#88")), Bool, Bool, Bool, typeof(Pkg.PlatformEngines.download_verify), String, Nothing, String})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Array{Union{Nothing, Base.SubString{String}}, 1}, 1}, getfield(Pkg.PlatformEngines, Symbol("#93#95"))}})
precompile(Tuple{typeof(Pkg.PlatformEngines.list_tarball_symlinks), String})
precompile(Tuple{typeof(Base.:(>)), PyCall.PyObject, PyCall.PyObject})
precompile(Tuple{typeof(Base.write), Base.IOStream, Nothing})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##unpack#96")), Bool, typeof(Pkg.PlatformEngines.unpack), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download_verify_unpack#101")), Nothing, Bool, Bool, Bool, Bool, typeof(Pkg.PlatformEngines.download_verify_unpack), String, Nothing, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#artifact_paths##kw")), NamedTuple{(:honor_overrides,), Tuple{Bool}}, typeof(Pkg.Artifacts.artifact_paths), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_path#10")), Bool, typeof(Pkg.Artifacts.artifact_path), Base.SHA1})
precompile(Tuple{typeof(Pkg.Artifacts.create_artifact), getfield(Pkg.Artifacts, Symbol("#39#40")){Bool, String, Nothing}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##download_artifact#38")), Bool, Bool, typeof(Pkg.Artifacts.download_artifact), Base.SHA1, String, Nothing})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#43#45")){Bool, Bool, Base.SHA1}})
precompile(Tuple{typeof(Pkg.Artifacts.with_show_download_info), getfield(Pkg.Artifacts, Symbol("#43#45")){Bool, Bool, Base.SHA1}, String, Bool})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##ensure_artifact_installed#42")), Pkg.BinaryPlatforms.Platform, Bool, Bool, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.artifact_path), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##query_override#7")), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, typeof(Pkg.Artifacts.query_override), Base.SHA1})
precompile(Tuple{typeof(Base.foreach), getfield(Arpack_jll, Symbol("#7#9")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Arpack_jll, Symbol("#8#10")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Arpack_jll.__init__)})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:filename,), Tuple{String}}}, Type{NamedTuple{(:extract_docexprs,), Tuple{Bool}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:define,), Tuple{Bool}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(CodeTracking.basepath), Base.PkgId})
precompile(Tuple{typeof(Base.sort!), Array{String, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.By{getfield(Revise, Symbol("#26#27"))}})
precompile(Tuple{typeof(Base.sort!), Array{String, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.By{getfield(Revise, Symbol("#26#27"))}, Array{String, 1}})
precompile(Tuple{typeof(Revise.filter_valid_cachefiles), String, Array{String, 1}})
precompile(Tuple{typeof(Revise.pkg_fileinfo), Base.PkgId})
precompile(Tuple{typeof(Base.read), Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#270")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#279#280")){String}, String})
precompile(Tuple{typeof(Revise.first_bad_position), String})
precompile(Tuple{typeof(Base.count), Base.Fix2{typeof(Base.isequal), Char}, Base.SubString{String}})
precompile(Tuple{Type{Base.Dict{Module, Array{Expr, 1}}}})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("#split_expressions!##kw")), NamedTuple{(:filename, :extract_docexprs), Tuple{String, Bool}}, typeof(JuliaInterpreter.split_expressions!), Array{Tuple{Module, Expr}, 1}, Base.Dict{Module, Array{Expr, 1}}, Expr, Module, Expr})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("##split_expressions!#47")), String, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:extract_docexprs,), Tuple{Bool}}}, typeof(JuliaInterpreter.split_expressions!), Array{Tuple{Module, Expr}, 1}, Base.Dict{Module, Array{Expr, 1}}, Expr, Module, Array{Any, 1}})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("#split_expressions!##kw")), NamedTuple{(:extract_docexprs, :filename), Tuple{Bool, String}}, typeof(JuliaInterpreter.split_expressions!), Array{Tuple{Module, Expr}, 1}, Base.Dict{Module, Array{Expr, 1}}, Expr, Module, Array{Any, 1}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Base.PkgId, Module}, Nothing})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Module, Array{Expr, 1}}, Module})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Module, Array{Expr, 1}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Module, Array{Expr, 1}}, Module})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Module, Array{Expr, 1}}, Array{Expr, 1}, Module})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("##split_expressions!#44")), Bool, String, typeof(JuliaInterpreter.split_expressions!), Array{Tuple{Module, Expr}, 1}, Base.Dict{Module, Array{Expr, 1}}, Expr, Module, Expr})
precompile(Tuple{typeof(OrderedCollections.ht_keyindex), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, Module, Bool})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Nothing, Nothing})
precompile(Tuple{typeof(Revise.parse_source!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, String, String, Module})
precompile(Tuple{typeof(Revise.parse_source!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, String, Module})
precompile(Tuple{typeof(Revise.skip_to_nonline), Array{Any, 1}, Int64})
precompile(Tuple{typeof(Base.hash), Revise.LineSkippingIterator, UInt64})
precompile(Tuple{typeof(Base.hash), Revise.RelocatableExpr, UInt64})
precompile(Tuple{typeof(Base.:(&)), PyCall.PyObject, Int64})
precompile(Tuple{typeof(OrderedCollections.hashindex), Revise.RelocatableExpr, Int64})
precompile(Tuple{typeof(OrderedCollections.rehash!), OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Int64})
precompile(Tuple{typeof(Base.isequal), Revise.LineSkippingIterator, Revise.LineSkippingIterator})
precompile(Tuple{typeof(Base.:(==)), Revise.RelocatableExpr, Revise.RelocatableExpr})
precompile(Tuple{typeof(Base.isequal), PyCall.PyObject, Revise.RelocatableExpr})
precompile(Tuple{typeof(OrderedCollections.ht_keyindex2), OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Revise.RelocatableExpr})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Array{Any, 1}, Revise.RelocatableExpr})
precompile(Tuple{typeof(Base.getproperty), Array{Any, 1}, Symbol})
precompile(Tuple{getfield(Revise, Symbol("##instantiate_sigs!#79")), Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Revise.instantiate_sigs!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}})
precompile(Tuple{typeof(Base._deleteat!), Array{Tuple{Module, String}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Revise.queue_includes!), Revise.PkgData, Base.PkgId})
precompile(Tuple{typeof(Revise.parse_pkg_files), Base.PkgId})
precompile(Tuple{typeof(Revise._watch_package), Base.PkgId})
precompile(Tuple{getfield(Revise, Symbol("#35#36")){Base.PkgId}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Int64}, Int64, Ptr{Nothing}})
precompile(Tuple{getfield(PyCall, Symbol("##pycall#115")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(PyCall.pycall), PyCall.PyObject, Type{Bool}, Int64})
precompile(Tuple{getfield(PyCall, Symbol("#7#8")){PyCall.PyObject, Int64}, Base.Timer})
precompile(Tuple{getfield(Base, Symbol("#504#505")){getfield(PyCall, Symbol("#7#8")){PyCall.PyObject, Int64}, Base.Timer}})
precompile(Tuple{typeof(Revise.maybe_add_includes_to_pkgdata!), Revise.PkgData, String, Array{Base.Pair{Module, String}, 1}})
precompile(Tuple{typeof(Revise._add_require), String, Module, String, String, Expr})
precompile(Tuple{typeof(PyCall.:(≛)), PyCall.PyObject, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Nothing, Revise.RelocatableExpr})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.:(+)), UInt64, UInt64})
precompile(Tuple{typeof(Base.hash), String, UInt64})
precompile(Tuple{typeof(Base.reinterpret), Type{Int64}, UInt64})
precompile(Tuple{typeof(OrderedCollections._setindex!), OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Nothing, Revise.RelocatableExpr, Int64})
precompile(Tuple{typeof(Base.:(!=)), Int32, Int64})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.Pair{Module, String}}})
precompile(Tuple{typeof(OrderedCollections.ht_keyindex), OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Nothing, Bool})
precompile(Tuple{typeof(Base.CoreLogging.env_override_minlevel), String, Module})
precompile(Tuple{typeof(Base.CoreLogging.current_logger_for_env), Base.CoreLogging.LogLevel, String, Module})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Pair{Module, String}, 1}, Int64, Array{Base.Pair{Module, String}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(Distributed, Symbol("#59#61")), Array{Any, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(Distributed, Symbol("#59#61")), Array{Any, 1}}, Int64})
precompile(Tuple{typeof(Base._collect), Type{Int64}, Base.Generator{Base.Iterators.Filter{getfield(Distributed, Symbol("#59#61")), Array{Any, 1}}, getfield(Distributed, Symbol("#58#60"))}, Base.SizeUnknown})
precompile(Tuple{typeof(Distributed.procs)})
precompile(Tuple{typeof(OrderedCollections.ht_keyindex), OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Revise.RelocatableExpr, Bool})
precompile(Tuple{typeof(Base.getindex), OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Revise.RelocatableExpr})
precompile(Tuple{typeof(Revise.newloc), LineNumberNode, Nothing, Nothing})
precompile(Tuple{typeof(Base.print_to_string), LineNumberNode})
precompile(Tuple{typeof(Revise.fixpath), LineNumberNode})
precompile(Tuple{getfield(Revise, Symbol("##_fixpath#46")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Revise._fixpath), LineNumberNode})
precompile(Tuple{typeof(Revise._fixpath), LineNumberNode})
precompile(Tuple{getfield(Revise, Symbol("##fixpath#47")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Revise.fixpath), LineNumberNode})
precompile(Tuple{typeof(Revise.newloc), LineNumberNode, Nothing, LineNumberNode})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Missing, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Missing, Int64})
precompile(Tuple{typeof(Revise.firstline), Expr})
precompile(Tuple{typeof(OrderedCollections.hashindex), Array{Any, 1}, Int64})
precompile(Tuple{typeof(Base.isequal), PyCall.PyObject, Array{Any, 1}})
precompile(Tuple{typeof(OrderedCollections.ht_keyindex), OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Array{Any, 1}, Bool})
precompile(Tuple{typeof(Base.getkey), OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Array{Any, 1}, Nothing})
precompile(Tuple{typeof(Base.getkey), OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Revise.RelocatableExpr, Nothing})
precompile(Tuple{getfield(Revise, Symbol("#72#73")){OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Module, Array{Base.Pair{Module, String}, 1}}})
precompile(Tuple{typeof(Base.CoreLogging.with_logstate), getfield(Revise, Symbol("#72#73")){OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Module, Array{Base.Pair{Module, String}, 1}}, Base.CoreLogging.LogState})
precompile(Tuple{Type{Base.Dict{Union{GlobalRef, Symbol}, Nothing}}})
precompile(Tuple{Type{Base.Dict{Symbol, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, Array{Int64, 1}}, Symbol})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, Array{Int64, 1}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, Array{Int64, 1}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Array{Int64, 1}}, Array{Int64, 1}, Symbol})
precompile(Tuple{typeof(CodeTracking.fileline), LineNumberNode})
precompile(Tuple{typeof(CodeTracking.whereis), Method})
precompile(Tuple{typeof(Base.uncompressed_ast), Method})
precompile(Tuple{typeof(Base.getindex), Array{Core.LineInfoNode, 1}, Int64})
precompile(Tuple{typeof(Base.find_source_file), String})
precompile(Tuple{typeof(CodeTracking.safe_isfile), String})
precompile(Tuple{typeof(CodeTracking.replace_buildbot_stdlibpath), String})
precompile(Tuple{typeof(CodeTracking.maybe_fix_path), String})
precompile(Tuple{typeof(CodeTracking.whereis), Core.LineInfoNode, Method})
precompile(Tuple{typeof(CodeTracking.whereis), JuliaInterpreter.FrameCode, Int64})
precompile(Tuple{typeof(JuliaInterpreter.framecode_matches_breakpoint), JuliaInterpreter.FrameCode, JuliaInterpreter.BreakpointFileLocation})
precompile(Tuple{typeof(JuliaInterpreter.add_breakpoint_if_match!), JuliaInterpreter.FrameCode, JuliaInterpreter.BreakpointFileLocation})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("##FrameCode#1")), Bool, Bool, Type{JuliaInterpreter.FrameCode}, Module, Core.CodeInfo})
precompile(Tuple{typeof(Base.error), String, Expr})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("#prepare_thunk##kw")), NamedTuple{(:eval,), Tuple{Bool}}, typeof(JuliaInterpreter.prepare_thunk), Module, Expr, Bool})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("##prepare_thunk#41")), Bool, typeof(JuliaInterpreter.prepare_thunk), Module, Expr, Bool})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(<)), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Tuple{Int64}})
precompile(Tuple{typeof(Revise.toplevel_blocks), Core.Compiler.CFG})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Union{GlobalRef, Symbol}, Revise.Uses}, GlobalRef})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Union{GlobalRef, Symbol}, Revise.Uses}, Symbol})
precompile(Tuple{typeof(Revise.add_to_backedges!), Revise.BackEdges, Array{Revise.SlotDep, 1}, Int64, Expr})
precompile(Tuple{Type{Revise.BackEdges}, Core.CodeInfo})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Int64, 1}, 1}, Array{Int64, 1}, Base.Generator{Array{Array{Int64, 1}, 1}, typeof(Base.copy)}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Array{Int64, 1}, 1}, typeof(Base.copy)}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.min), Array{Int64, 1}, Int64, Int64})
precompile(Tuple{typeof(Revise.toplevel_chunks), Revise.BackEdges})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Bool, 1, Base.BitArray{1}, Tuple{Base.UnitRange{Int64}}, true}}, Base.BitArray{1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Bool, 1, Base.BitArray{1}, Tuple{Base.UnitRange{Int64}}, true}, Bool})
precompile(Tuple{typeof(JuliaInterpreter.hasarg), Base.Fix2{typeof(Base.isequal), Symbol}, Array{Any, 1}})
precompile(Tuple{typeof(Base.to_index), Array{Base.UnitRange{Int64}, 1}, Nothing})
precompile(Tuple{typeof(Revise.minimal_evaluation!), Revise.CodeTrackingMethodInfo, JuliaInterpreter.Frame})
precompile(Tuple{typeof(Base.StackTraces.lookup), Base.InterpreterIP})
precompile(Tuple{typeof(Base.StackTraces.lookup), Ptr{Nothing}})
precompile(Tuple{typeof(Revise.trim_toplevel!), Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{typeof(JuliaInterpreter.show_stackloc), JuliaInterpreter.Frame})
precompile(Tuple{typeof(JuliaInterpreter.check_isdefined), JuliaInterpreter.Frame, Any})
precompile(Tuple{typeof(JuliaInterpreter.bypass_builtins), JuliaInterpreter.Frame, Expr, Int64})
precompile(Tuple{typeof(JuliaInterpreter.getargs), Array{Any, 1}, JuliaInterpreter.Frame})
precompile(Tuple{typeof(JuliaInterpreter.ntupleany), getfield(JuliaInterpreter, Symbol("#69#70")){JuliaInterpreter.Frame, Array{Any, 1}}, Int64})
precompile(Tuple{typeof(JuliaInterpreter.maybe_evaluate_builtin), JuliaInterpreter.Frame, Expr, Bool})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("##evaluate_call_compiled!#63")), Bool, typeof(JuliaInterpreter.evaluate_call_compiled!), JuliaInterpreter.Compiled, JuliaInterpreter.Frame, Expr})
precompile(Tuple{typeof(JuliaInterpreter.step_expr!), Any, JuliaInterpreter.Frame, Bool})
precompile(Tuple{Type{JuliaInterpreter.BreakpointRef}, JuliaInterpreter.FrameCode, JuliaInterpreter.BreakpointRef, Nothing})
precompile(Tuple{Type{JuliaInterpreter.BreakpointRef}, JuliaInterpreter.FrameCode, JuliaInterpreter.BreakpointRef})
precompile(Tuple{typeof(JuliaInterpreter.finish!), Any, JuliaInterpreter.Frame, Bool})
precompile(Tuple{typeof(JuliaInterpreter.return_from), JuliaInterpreter.Frame})
precompile(Tuple{typeof(Base.indexed_iterate), JuliaInterpreter.Compiled, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), JuliaInterpreter.Compiled, Int64})
precompile(Tuple{typeof(Base._any), typeof(JuliaInterpreter.is_vararg_type), Array{Any, 1}, Base.Colon})
precompile(Tuple{typeof(JuliaInterpreter.whichtt), Any})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("##prepare_call#38")), Bool, typeof(JuliaInterpreter.prepare_call), Any, Array{Any, 1}})
precompile(Tuple{typeof(Base.setproperty!), JuliaInterpreter.DispatchableMethod, Symbol, JuliaInterpreter.Compiled})
precompile(Tuple{typeof(JuliaInterpreter.scopeof), Any})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("##get_call_framecode#59")), Bool, typeof(JuliaInterpreter.get_call_framecode), Array{Any, 1}, JuliaInterpreter.FrameCode, Int64})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("##evaluate_call_recurse!#64")), Bool, typeof(JuliaInterpreter.evaluate_call_recurse!), Any, JuliaInterpreter.Frame, Expr})
precompile(Tuple{typeof(JuliaInterpreter.evaluate_foreigncall), JuliaInterpreter.Frame, Expr})
precompile(Tuple{typeof(JuliaInterpreter.evaluate_methoddef), JuliaInterpreter.Frame, Expr})
precompile(Tuple{typeof(JuliaInterpreter.eval_rhs), Any, JuliaInterpreter.Frame, Expr})
precompile(Tuple{typeof(JuliaInterpreter.do_assignment!), JuliaInterpreter.Frame, Any, Any})
precompile(Tuple{typeof(Base.getproperty), GlobalRef, Symbol})
precompile(Tuple{getfield(Base, Symbol("##dump#385")), Int64, typeof(Base.dump), Expr})
precompile(Tuple{typeof(JuliaInterpreter.lookup_or_eval), Any, JuliaInterpreter.Frame, Any})
precompile(Tuple{typeof(JuliaInterpreter.inplace_lookup!), Expr, Int64, JuliaInterpreter.Frame})
precompile(Tuple{typeof(JuliaInterpreter.evaluate_structtype), Any, JuliaInterpreter.Frame, Expr})
precompile(Tuple{typeof(JuliaInterpreter.evaluate_abstracttype), Any, JuliaInterpreter.Frame, Expr})
precompile(Tuple{typeof(JuliaInterpreter.evaluate_primitivetype), Any, JuliaInterpreter.Frame, Expr})
precompile(Tuple{typeof(Base.setproperty!), Nothing, Symbol, JuliaInterpreter.Frame})
precompile(Tuple{typeof(Base.setproperty!), JuliaInterpreter.Frame, Symbol, JuliaInterpreter.Frame})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("##split_expressions#42")), Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(JuliaInterpreter.split_expressions), Module, Expr})
precompile(Tuple{typeof(JuliaInterpreter.step_expr!), Any, JuliaInterpreter.Frame, Any, Bool})
precompile(Tuple{typeof(LoweredCodeUtils.isanonymous_typedef), Core.CodeInfo})
precompile(Tuple{typeof(Base.to_index), JuliaInterpreter.BreakpointRef})
precompile(Tuple{typeof(Base.to_index), Array{Int32, 1}, JuliaInterpreter.BreakpointRef})
precompile(Tuple{typeof(JuliaInterpreter.codelocation), Core.CodeInfo, JuliaInterpreter.BreakpointRef})
precompile(Tuple{typeof(CodeTracking.whereis), JuliaInterpreter.FrameCode, JuliaInterpreter.BreakpointRef})
precompile(Tuple{typeof(Base.to_index), Array{Any, 1}, Nothing})
precompile(Tuple{typeof(JuliaInterpreter.pc_expr), Core.CodeInfo, Nothing})
precompile(Tuple{typeof(JuliaInterpreter.pc_expr), JuliaInterpreter.FrameCode, Nothing})
precompile(Tuple{typeof(JuliaInterpreter.pc_expr), JuliaInterpreter.Frame, Nothing})
precompile(Tuple{typeof(Base.to_index), Array{Any, 1}, JuliaInterpreter.BreakpointRef})
precompile(Tuple{typeof(JuliaInterpreter.pc_expr), Core.CodeInfo, JuliaInterpreter.BreakpointRef})
precompile(Tuple{typeof(JuliaInterpreter.pc_expr), JuliaInterpreter.FrameCode, JuliaInterpreter.BreakpointRef})
precompile(Tuple{typeof(JuliaInterpreter.pc_expr), JuliaInterpreter.Frame, JuliaInterpreter.BreakpointRef})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("##split_expressions#42")), Nothing, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:extract_docexprs,), Tuple{Bool}}}, typeof(JuliaInterpreter.split_expressions), Module, Expr})
precompile(Tuple{Type{Base.Dict{Symbol, LoweredCodeUtils.MethodInfo}}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, LoweredCodeUtils.MethodInfo}, Symbol})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, LoweredCodeUtils.MethodInfo}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, LoweredCodeUtils.MethodInfo}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, LoweredCodeUtils.MethodInfo}, LoweredCodeUtils.MethodInfo, Symbol})
precompile(Tuple{typeof(LoweredCodeUtils.identify_framemethod_calls), JuliaInterpreter.Frame})
precompile(Tuple{typeof(LoweredCodeUtils.replacename!), Array{Any, 1}, Base.Pair{Symbol, Nothing}})
precompile(Tuple{typeof(LoweredCodeUtils.replacename!), Array{Any, 1}, Base.Pair{Symbol, Symbol}})
precompile(Tuple{typeof(LoweredCodeUtils.rename_framemethods!), Any, JuliaInterpreter.Frame, Base.Dict{Symbol, LoweredCodeUtils.MethodInfo}, Array{NamedTuple{(:linetop, :linebody, :callee, :caller), Tuple{Int64, Int64, Symbol, Union{Bool, Symbol}}}, 1}, Base.Dict{Symbol, Union{Bool, Symbol}}})
precompile(Tuple{typeof(Base.:(==)), Core.SimpleVector, Core.SimpleVector})
precompile(Tuple{typeof(Base.to_index), Base.BitArray{1}, JuliaInterpreter.BreakpointRef})
precompile(Tuple{getfield(Revise, Symbol("##methods_by_execution!#22")), Bool, Bool, typeof(Revise.methods_by_execution!), Any, Revise.CodeTrackingMethodInfo, Base.Dict{Module, Array{Expr, 1}}, JuliaInterpreter.Frame, Base.BitArray{1}})
precompile(Tuple{getfield(Revise, Symbol("##methods_by_execution!#17")), Bool, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Revise.methods_by_execution!), Any, Revise.CodeTrackingMethodInfo, Base.Dict{Module, Array{Expr, 1}}, Module, Expr})
precompile(Tuple{typeof(Base.copy), Array{Int32, 1}})
precompile(Tuple{typeof(Base.getproperty), Core.SSAValue, Symbol})
precompile(Tuple{typeof(Base.getproperty), Core.SlotNumber, Symbol})
precompile(Tuple{typeof(Base._accumulate1!), typeof(Base.add_sum), Array{Int64, 1}, Int64, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(JuliaInterpreter.replace_ssa!), Symbol, Array{Int64, 1}})
precompile(Tuple{typeof(JuliaInterpreter.replace_ssa!), String, Array{Int64, 1}})
precompile(Tuple{typeof(JuliaInterpreter.replace_ssa!), JuliaInterpreter.SlotNumber, Array{Int64, 1}})
precompile(Tuple{typeof(JuliaInterpreter.replace_ssa!), QuoteNode, Array{Int64, 1}})
precompile(Tuple{typeof(JuliaInterpreter.replace_ssa!), Nothing, Array{Int64, 1}})
precompile(Tuple{typeof(JuliaInterpreter.replace_ssa!), Int64, Array{Int64, 1}})
precompile(Tuple{typeof(Base.fill!), Array{Union{Nothing, Base.Some{Any}}, 1}, Nothing})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Int64, 1}, 1}, Array{Int64, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Revise, Symbol("#10#11"))}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Revise, Symbol("#10#11"))}})
precompile(Tuple{Type{Base.Dict{Union{GlobalRef, Symbol}, Revise.Uses}}})
precompile(Tuple{typeof(Revise.add_to_backedges!), Revise.BackEdges, Array{Revise.SlotDep, 1}, Int64, Symbol})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Union{GlobalRef, Symbol}, Revise.Uses}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Union{GlobalRef, Symbol}, Revise.Uses}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{GlobalRef, Symbol}, Revise.Uses}, Revise.Uses, Symbol})
precompile(Tuple{typeof(Revise.add_to_backedges!), Revise.BackEdges, Array{Revise.SlotDep, 1}, Int64, String})
precompile(Tuple{typeof(Revise.add_to_backedges!), Revise.BackEdges, Array{Revise.SlotDep, 1}, Int64, JuliaInterpreter.SSAValue})
precompile(Tuple{typeof(Revise.add_to_backedges!), Revise.BackEdges, Array{Revise.SlotDep, 1}, Int64, JuliaInterpreter.SlotNumber})
precompile(Tuple{typeof(Revise.add_to_backedges!), Revise.BackEdges, Array{Revise.SlotDep, 1}, Int64, Nothing})
precompile(Tuple{typeof(Revise.add_to_backedges!), Revise.BackEdges, Array{Revise.SlotDep, 1}, Int64, Int64})
precompile(Tuple{typeof(Revise.add_to_backedges!), Revise.BackEdges, Array{Revise.SlotDep, 1}, Int64, Core.GotoNode})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), Symbol}, Symbol})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), Symbol}, String})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), Symbol}, QuoteNode})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), Symbol}, Function})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), Symbol}, JuliaInterpreter.SlotNumber})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), Symbol}, Nothing})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), Symbol}, JuliaInterpreter.SSAValue})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), Symbol}, Int64})
precompile(Tuple{typeof(Base.eltype), Array{JuliaInterpreter.AbstractBreakpoint, 1}})
precompile(Tuple{typeof(Base.getproperty), JuliaInterpreter.BreakpointRef, Symbol})
precompile(Tuple{getfield(Revise, Symbol("#18#20")), JuliaInterpreter.BreakpointRef})
precompile(Tuple{typeof(Base.foreach), getfield(Revise, Symbol("#18#20")), Array{JuliaInterpreter.BreakpointRef, 1}})
precompile(Tuple{typeof(Base.filter), getfield(Revise, Symbol("#19#21")), Array{JuliaInterpreter.BreakpointRef, 1}})
precompile(Tuple{typeof(Base.foreach), typeof(JuliaInterpreter.disable), Array{JuliaInterpreter.BreakpointRef, 1}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Module, Nothing}, Module})
precompile(Tuple{typeof(JuliaInterpreter.hasarg), Base.Fix2{typeof(===), Symbol}, Array{Any, 1}})
precompile(Tuple{typeof(Base._deleteat!), Array{Int32, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base._deleteat!), Array{Any, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Int64, 1}, getfield(JuliaInterpreter, Symbol("#71#72")){Array{Int64, 1}}}, Int64})
precompile(Tuple{typeof(JuliaInterpreter.static_eval), Expr})
precompile(Tuple{typeof(JuliaInterpreter.wrap_params), Expr, Array{Symbol, 1}})
precompile(Tuple{typeof(JuliaInterpreter.build_compiled_call!), Expr, Symbol, Core.CodeInfo, Int64, Int64, Array{Symbol, 1}, Module})
precompile(Tuple{typeof(JuliaInterpreter.optimize!), Core.CodeInfo, Method})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("#extract_function_from_method#88")), Method})
precompile(Tuple{typeof(JuliaInterpreter.framecode_matches_breakpoint), JuliaInterpreter.FrameCode, JuliaInterpreter.BreakpointSignature})
precompile(Tuple{typeof(JuliaInterpreter.add_breakpoint_if_match!), JuliaInterpreter.FrameCode, JuliaInterpreter.BreakpointSignature})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("##FrameCode#1")), Bool, Bool, Type{JuliaInterpreter.FrameCode}, Method, Core.CodeInfo})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Method, JuliaInterpreter.FrameCode}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Method, JuliaInterpreter.FrameCode}, Method})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Method, JuliaInterpreter.FrameCode}, JuliaInterpreter.FrameCode, Method})
precompile(Tuple{typeof(JuliaInterpreter.hasarg), getfield(JuliaInterpreter, Symbol("#36#37")), Array{Any, 1}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Method, JuliaInterpreter.FrameCode}, Method})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Method, Nothing}, Method})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("##prepare_framecode#35")), Bool, typeof(JuliaInterpreter.prepare_framecode), Method, Any})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("#prepare_framecode##kw")), NamedTuple{(:enter_generated,), Tuple{Bool}}, typeof(JuliaInterpreter.prepare_framecode), Method, Type{T} where T})
precompile(Tuple{typeof(JuliaInterpreter.replace_ssa!), Char, Array{Int64, 1}})
precompile(Tuple{Type{JuliaInterpreter.DispatchableMethod}, Nothing, JuliaInterpreter.FrameInstance, Type})
precompile(Tuple{typeof(JuliaInterpreter.replace_ssa!), Bool, Array{Int64, 1}})
precompile(Tuple{typeof(JuliaInterpreter.replace_ssa!), UInt8, Array{Int64, 1}})
precompile(Tuple{typeof(Base.hash), Tuple{Module, Int64}, UInt64})
precompile(Tuple{typeof(Base.hash), Tuple{Core.SimpleVector, Module, Int64}, UInt64})
precompile(Tuple{typeof(Base.hash), Tuple{DataType, Core.SimpleVector, Module, Int64}, UInt64})
precompile(Tuple{typeof(Base.hashindex), Tuple{QuoteNode, DataType, Core.SimpleVector, Module, Int64}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Any, Any}, Tuple{QuoteNode, DataType, Core.SimpleVector, Module, Int64}})
precompile(Tuple{typeof(Base.get), Base.Dict{Any, Any}, Tuple{QuoteNode, DataType, Core.SimpleVector, Module, Int64}, Nothing})
precompile(Tuple{typeof(JuliaInterpreter.scopename), Core.TypeName})
precompile(Tuple{typeof(JuliaInterpreter.parametric_type_to_expr), Type})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, Any}, Tuple{QuoteNode, DataType, Core.SimpleVector, Module, Int64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Function, Tuple{QuoteNode, DataType, Core.SimpleVector, Module, Int64}})
precompile(Tuple{typeof(Base.parentmodule), Function})
precompile(Tuple{typeof(Base.parentmodule), DataType})
precompile(Tuple{typeof(Base.invokelatest), Any, Any})
precompile(Tuple{getfield(JuliaInterpreter.CompiledCalls, Symbol("###compiledcall#253")), String})
precompile(Tuple{typeof(JuliaInterpreter.replace_ssa!), Type{T} where T, Array{Int64, 1}})
precompile(Tuple{typeof(Base._append!), Array{Any, 1}, Base.HasLength, Core.SimpleVector})
precompile(Tuple{typeof(JuliaInterpreter.append_any), Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.getproperty), JuliaInterpreter.SSAValue, Symbol})
precompile(Tuple{typeof(Base._groupedunique!), Array{Int64, 1}})
precompile(Tuple{typeof(Base._unique!), typeof(Base.identity), Array{Int64, 1}, Base.Set{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.unique!), Array{Int64, 1}})
precompile(Tuple{getfield(JuliaInterpreter.CompiledCalls, Symbol("###compiledcall#254")), Int64})
precompile(Tuple{typeof(Base.isequal), Tuple{QuoteNode, DataType, Core.SimpleVector, Module, Int64}, Tuple{QuoteNode, DataType, Core.SimpleVector, Module, Int64}})
precompile(Tuple{getfield(JuliaInterpreter.CompiledCalls, Symbol("###compiledcall#257")), Type{T} where T, Base.Val{UInt8}})
precompile(Tuple{getfield(JuliaInterpreter.CompiledCalls, Symbol("###compiledcall#255")), Ptr{UInt8}, Ptr{UInt8}, Int64, Base.Val{UInt8}})
precompile(Tuple{typeof(Base.invokelatest), Any})
precompile(Tuple{getfield(JuliaInterpreter.CompiledCalls, Symbol("###compiledcall#258"))})
precompile(Tuple{getfield(JuliaInterpreter.CompiledCalls, Symbol("###compiledcall#262")), TypeVar, Type{T} where T})
precompile(Tuple{typeof(Base.map), getfield(JuliaInterpreter, Symbol("#73#74")), Core.SimpleVector})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("#73#74")), TypeVar})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("#73#74")), Int64})
precompile(Tuple{typeof(JuliaInterpreter._scopename), Symbol})
precompile(Tuple{getfield(JuliaInterpreter.CompiledCalls, Symbol("###compiledcall#263")), Type{T} where T, Int64, Base.Val{UInt8}})
precompile(Tuple{getfield(JuliaInterpreter.CompiledCalls, Symbol("###compiledcall#264")), Array{UInt8, 1}, UInt8, Int64})
precompile(Tuple{getfield(JuliaInterpreter.CompiledCalls, Symbol("###compiledcall#259")), Ptr{Nothing}, Array{UInt8, 1}, String, Int64, Ptr{Nothing}})
precompile(Tuple{getfield(JuliaInterpreter.CompiledCalls, Symbol("###compiledcall#263")), Type{T} where T, Int64, Base.Val{String}})
precompile(Tuple{getfield(JuliaInterpreter.CompiledCalls, Symbol("###compiledcall#260")), Array{UInt8, 1}, Base.RefValue{Base.Filesystem.uv_dirent_t}})
precompile(Tuple{getfield(JuliaInterpreter.CompiledCalls, Symbol("###compiledcall#265")), Ptr{UInt8}})
precompile(Tuple{getfield(JuliaInterpreter.CompiledCalls, Symbol("###compiledcall#266")), Array{String, 1}, Int64})
precompile(Tuple{getfield(JuliaInterpreter.CompiledCalls, Symbol("###compiledcall#261")), Array{UInt8, 1}})
precompile(Tuple{getfield(JuliaInterpreter.CompiledCalls, Symbol("###compiledcall#267")), String, String, UInt64})
precompile(Tuple{typeof(Revise.add_includes!), Revise.CodeTrackingMethodInfo, Module, String})
precompile(Tuple{typeof(Base.foreach), typeof(JuliaInterpreter.enable), Array{JuliaInterpreter.BreakpointRef, 1}})
precompile(Tuple{typeof(Base.:(>)), Int32, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Revise.RelocatableExpr, 1}, Int32})
precompile(Tuple{typeof(Base.isequal), Revise.RelocatableExpr, Revise.RelocatableExpr})
precompile(Tuple{typeof(Base.oftype), Int64, Int32})
precompile(Tuple{typeof(JuliaInterpreter.is_doc_expr), Any})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("#split_expressions!##kw")), NamedTuple{(:extract_docexprs, :filename), Tuple{Bool, String}}, typeof(JuliaInterpreter.split_expressions!), Array{Tuple{Module, Expr}, 1}, Base.Dict{Module, Array{Expr, 1}}, Expr, Module, Expr})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{QuoteNode, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{QuoteNode, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.isequal), QuoteNode, QuoteNode})
precompile(Tuple{typeof(Base.hash), Float64, UInt64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{GlobalRef, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{GlobalRef, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.isequal), GlobalRef, GlobalRef})
precompile(Tuple{typeof(Base.hash), Bool, UInt64})
precompile(Tuple{typeof(JuliaInterpreter.replace_ssa!), Core.CodeInfo, Array{Int64, 1}})
precompile(Tuple{typeof(Revise.add_to_backedges!), Revise.BackEdges, Array{Revise.SlotDep, 1}, Int64, QuoteNode})
precompile(Tuple{typeof(Revise.add_to_backedges!), Revise.BackEdges, Array{Revise.SlotDep, 1}, Int64, GlobalRef})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Union{GlobalRef, Symbol}, Revise.Uses}, GlobalRef})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{GlobalRef, Symbol}, Revise.Uses}, Revise.Uses, GlobalRef})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Union{GlobalRef, Symbol}, Revise.Uses}, Symbol})
precompile(Tuple{typeof(Revise.add_to_backedges!), Revise.BackEdges, Array{Revise.SlotDep, 1}, Int64, Core.SSAValue})
precompile(Tuple{typeof(Revise.add_to_backedges!), Revise.BackEdges, Array{Revise.SlotDep, 1}, Int64, Bool})
precompile(Tuple{typeof(Revise.add_to_backedges!), Revise.BackEdges, Array{Revise.SlotDep, 1}, Int64, Core.CodeInfo})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), Symbol}, Type{T} where T})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), Symbol}, Bool})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, JuliaInterpreter.Frame}}, JuliaInterpreter.Frame})
precompile(Tuple{getfield(LoweredCodeUtils, Symbol("#methoddef!##kw")), NamedTuple{(:define,), Tuple{Bool}}, typeof(LoweredCodeUtils.methoddef!), Function, Array{Any, 1}, JuliaInterpreter.Frame, Expr, Int64})
precompile(Tuple{typeof(LoweredCodeUtils.define_anonymous), Any, JuliaInterpreter.Frame, Any})
precompile(Tuple{typeof(LoweredCodeUtils.signature), Core.SimpleVector})
precompile(Tuple{typeof(LoweredCodeUtils.signature), Any, JuliaInterpreter.Frame, Any, Int64})
precompile(Tuple{typeof(Base.setproperty!), JuliaInterpreter.Frame, Symbol, Nothing})
precompile(Tuple{typeof(Base.setproperty!), JuliaInterpreter.Frame, Symbol, Int64})
precompile(Tuple{typeof(Base.setproperty!), JuliaInterpreter.Frame, Symbol, JuliaInterpreter.BreakpointRef})
precompile(Tuple{typeof(Base.to_index), Array{Int32, 1}, Nothing})
precompile(Tuple{typeof(JuliaInterpreter.codelocation), Core.CodeInfo, Nothing})
precompile(Tuple{typeof(LoweredCodeUtils.next_or_nothing), JuliaInterpreter.Frame, Nothing})
precompile(Tuple{typeof(LoweredCodeUtils.next_or_nothing), JuliaInterpreter.Frame, JuliaInterpreter.BreakpointRef})
precompile(Tuple{getfield(LoweredCodeUtils, Symbol("##methoddef!#3")), Bool, typeof(LoweredCodeUtils.methoddef!), Any, Array{Any, 1}, JuliaInterpreter.Frame, Any, Int64})
precompile(Tuple{typeof(LoweredCodeUtils.ismethod3), Expr})
precompile(Tuple{getfield(Revise, Symbol("#isok#24")), Core.LineInfoNode})
precompile(Tuple{typeof(Revise.add_signature!), Revise.CodeTrackingMethodInfo, Any, Core.LineInfoNode})
precompile(Tuple{typeof(Base.setindex!), Base.IdDict{Type, Union{Base.Missing, Tuple{LineNumberNode, Expr}}}, Any, Any})
precompile(Tuple{typeof(JuliaInterpreter.is_quotenode), Any, Any})
precompile(Tuple{getfield(JuliaInterpreter.CompiledCalls, Symbol("###compiledcall#268")), Type{T} where T})
precompile(Tuple{typeof(Base.:(==)), Type{T} where T, Function})
precompile(Tuple{typeof(Base.isequal), Expr, Symbol})
precompile(Tuple{typeof(Base.isequal), Symbol, Expr})
precompile(Tuple{typeof(Base.uv_alloc_buf), Ptr{Nothing}, UInt64, Ptr{Nothing}})
precompile(Tuple{typeof(Base.uv_readcb), Ptr{Nothing}, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.LineEdit.MIState})
precompile(Tuple{typeof(REPL.LineEdit.setmark), REPL.LineEdit.MIState, Bool})
precompile(Tuple{typeof(REPL.LineEdit.setmark), REPL.LineEdit.MIState})
precompile(Tuple{typeof(REPL.LineEdit.set_action!), REPL.LineEdit.MIState, Symbol})
precompile(Tuple{typeof(REPL.LineEdit.edit_insert), REPL.LineEdit.MIState, Any})
precompile(Tuple{typeof(Base.:(!=)), PyCall.PyObject, String})
precompile(Tuple{typeof(REPL.LineEdit.edit_insert), REPL.LineEdit.PromptState, Any})
precompile(Tuple{typeof(REPL.LineEdit.refresh_line), Any})
precompile(Tuple{typeof(REPL.LineEdit.add_history), REPL.LineEdit.PromptState})
precompile(Tuple{typeof(REPL.LineEdit.add_history), REPL.LineEdit.MIState})
precompile(Tuple{typeof(REPL.LineEdit.commit_line), Any})
precompile(Tuple{typeof(REPL.LineEdit.edit_insert_newline), REPL.LineEdit.PromptState, Int64})
precompile(Tuple{typeof(REPL.LineEdit.edit_insert_newline), REPL.LineEdit.PromptState})
precompile(Tuple{typeof(REPL.LineEdit.edit_insert_newline), REPL.LineEdit.MIState})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#110#163")), Any, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.LineEdit.ModeState})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.LineEdit.SearchState})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("##refresh_multi_line#12")), Any, typeof(REPL.LineEdit.refresh_multi_line), REPL.LineEdit.ModeState})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.UnixTerminal, Any})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("##refresh_multi_line#16")), Any, typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.UnixTerminal, Any})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.Terminals.UnixTerminal, Union{REPL.LineEdit.PrefixSearchState, REPL.LineEdit.PromptState}})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("##refresh_multi_line#38")), Any, typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.Terminals.UnixTerminal, Union{REPL.LineEdit.PrefixSearchState, REPL.LineEdit.PromptState}})
precompile(Tuple{typeof(REPL.LineEdit.add_history), REPL.REPLHistoryProvider, Any})
precompile(Tuple{typeof(REPL.Terminals.raw!), REPL.Terminals.TTYTerminal, Bool})
precompile(Tuple{typeof(REPL.reset), REPL.LineEditREPL})
precompile(Tuple{getfield(REPL, Symbol("#do_respond#38")){Bool, getfield(REPL, Symbol("#48#57")){REPL.LineEditREPL, REPL.REPLHistoryProvider}, REPL.LineEditREPL, REPL.LineEdit.Prompt}, Any, Any, Any})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{Nothing}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.getindex), LaTeXStrings.LaTeXString, Base.UnitRange{Int64}})
precompile(Tuple{typeof(REPL.ends_with_semicolon), AbstractString})
precompile(Tuple{typeof(REPL.LineEdit.activate), REPL.LineEdit.TextInterface, REPL.LineEdit.ModeState, Any, REPL.Terminals.TextTerminal})
precompile(Tuple{typeof(REPL.LineEdit.refresh_line), Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.LineEdit.ModeState})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("##refresh_multi_line#13")), Any, typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.LineEdit.ModeState})
precompile(Tuple{typeof(REPL.LineEdit.edit_kill_region), REPL.LineEdit.MIState})
precompile(Tuple{typeof(REPL.LineEdit.edit_backspace), Base.GenericIOBuffer{Array{UInt8, 1}}, Bool, Bool})
precompile(Tuple{typeof(REPL.LineEdit.edit_backspace), REPL.LineEdit.PromptState})
precompile(Tuple{typeof(REPL.LineEdit.edit_backspace), REPL.LineEdit.MIState})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#111#164")), Any, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(REPL.LineEdit.edit_backspace), REPL.LineEdit.PromptState, Bool, Any})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("##edit_splice!#17")), Bool, typeof(REPL.LineEdit.edit_splice!), Any, Base.Pair{#s662, #s661} where #s661<:Integer where #s662<:Integer, AbstractString})
precompile(Tuple{typeof(Base.isassigned), Core.SimpleVector, Int64})
precompile(Tuple{typeof(AssetRegistry.__init__)})
precompile(Tuple{typeof(WebIO.__init__)})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Base.PkgId, Array{Function, 1}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Base.PkgId, Array{Function, 1}}, Base.PkgId})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Function, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{Function, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.get!), getfield(Requires, Symbol("#1#2")), Base.Dict{Base.PkgId, Array{Function, 1}}, Base.PkgId})
precompile(Tuple{typeof(Base.push!), Array{Function, 1}, Function})
precompile(Tuple{typeof(InteractBase.__init__)})
precompile(Tuple{typeof(Widgets.get_backend)})
precompile(Tuple{typeof(Interact.__init__)})
precompile(Tuple{typeof(OrderedCollections.rehash!), OrderedCollections.OrderedDict{Symbol, InteractBase.WidgetTheme}, Int64})
precompile(Tuple{typeof(OrderedCollections.ht_keyindex2), OrderedCollections.OrderedDict{Symbol, InteractBase.WidgetTheme}, Symbol})
precompile(Tuple{typeof(OrderedCollections._setindex!), OrderedCollections.OrderedDict{Symbol, InteractBase.WidgetTheme}, Interact.Bulma, Symbol, Int64})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Nothing})
precompile(Tuple{typeof(Base.compilecache), Base.PkgId, String})
precompile(Tuple{typeof(Base._require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{typeof(MbedTLS_jll.__init__)})
precompile(Tuple{typeof(Pkg.Artifacts.do_artifact_str), String, Base.Dict{String, Any}, String, Module})
precompile(Tuple{typeof(Pkg.Artifacts.unpack_platform), Base.Dict{String, Any}, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}, Base.Dict{String, Any}})
precompile(Tuple{Type{Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Generator{Array{Base.Dict{String, Any}, 1}, getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#ensure_artifact_installed##kw")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.Linux}}, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.PlatformEngines.get_telemetry_headers), String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download#87")), Bool, Nothing, typeof(Pkg.PlatformEngines.download), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download_verify#88")), Bool, Bool, Bool, typeof(Pkg.PlatformEngines.download_verify), String, Nothing, String})
precompile(Tuple{typeof(Base.convert), Type{Nothing}, Base.SubString{String}})
precompile(Tuple{typeof(Base.convert), Type{Base.Pair{Nothing, String}}, Base.Pair{Base.SubString{String}, String}})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Pair{Nothing, String}, 1}, Base.Pair{Base.SubString{String}, String}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Nothing, String}, 1}, Base.Pair{Base.SubString{String}, String}, Base.Generator{Array{Array{Union{Nothing, Base.SubString{String}}, 1}, 1}, getfield(Pkg.PlatformEngines, Symbol("#93#95"))}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Array{Union{Nothing, Base.SubString{String}}, 1}, 1}, getfield(Pkg.PlatformEngines, Symbol("#93#95"))}})
precompile(Tuple{typeof(Pkg.PlatformEngines.list_tarball_symlinks), String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##unpack#96")), Bool, typeof(Pkg.PlatformEngines.unpack), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download_verify_unpack#101")), Nothing, Bool, Bool, Bool, Bool, typeof(Pkg.PlatformEngines.download_verify_unpack), String, Nothing, String})
precompile(Tuple{typeof(Pkg.Artifacts.create_artifact), getfield(Pkg.Artifacts, Symbol("#39#40")){Bool, String, Nothing}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##download_artifact#38")), Bool, Bool, typeof(Pkg.Artifacts.download_artifact), Base.SHA1, String, Nothing})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#43#45")){Bool, Bool, Base.SHA1}})
precompile(Tuple{typeof(Pkg.Artifacts.with_show_download_info), getfield(Pkg.Artifacts, Symbol("#43#45")){Bool, Bool, Base.SHA1}, String, Bool})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##ensure_artifact_installed#42")), Pkg.BinaryPlatforms.Platform, Bool, Bool, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(MbedTLS.f_send), Ptr{Nothing}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(MbedTLS.f_recv), Ptr{Nothing}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(MbedTLS.__init__)})
precompile(Tuple{typeof(HTTP.URIs.__init__)})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{HTTP.URIs.RegexAndMatchData, 1}, HTTP.URIs.RegexAndMatchData})
precompile(Tuple{typeof(HTTP.Parsers.__init__)})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{HTTP.Parsers.RegexAndMatchData, 1}, HTTP.Parsers.RegexAndMatchData})
precompile(Tuple{typeof(HTTP.CookieRequest.__init__)})
precompile(Tuple{Type{Base.Dict{String, Base.Set{HTTP.Cookies.Cookie}}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, Base.Set{HTTP.Cookies.Cookie}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, Base.Set{HTTP.Cookies.Cookie}}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Base.Set{HTTP.Cookies.Cookie}}, Base.Set{HTTP.Cookies.Cookie}, String})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{String, Base.Set{HTTP.Cookies.Cookie}}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.Dict{String, Base.Set{HTTP.Cookies.Cookie}}, 1}, Base.Dict{String, Base.Set{HTTP.Cookies.Cookie}}})
precompile(Tuple{typeof(HTTP.ConnectionRequest.__init__)})
precompile(Tuple{typeof(HTTP.Servers.__init__)})
precompile(Tuple{Type{Base.Dict{Sockets.IPAddr, HTTP.Servers.RateLimit}}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{Sockets.IPAddr, HTTP.Servers.RateLimit}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.Dict{Sockets.IPAddr, HTTP.Servers.RateLimit}, 1}, Base.Dict{Sockets.IPAddr, HTTP.Servers.RateLimit}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Array{Function, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Array{Function, 1}, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base._delete!), Base.Dict{Base.PkgId, Array{Function, 1}}, Int64})
precompile(Tuple{getfield(WebIO, Symbol("#78#90"))})
precompile(Tuple{getfield(WebIO, Symbol("#79#91"))})
precompile(Tuple{getfield(WebIO, Symbol("#80#92"))})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:file, :code), Tuple{String, String}}, Symbol})
precompile(Tuple{typeof(Base.Filesystem.isfile), String})
precompile(Tuple{typeof(Base.typeintersect), Any, Any})
precompile(Tuple{typeof(Base.copyto!), Array{UInt8, 1}, UInt64, Base.CodeUnits{UInt8, String}, UInt64, UInt64})
precompile(Tuple{typeof(SHA.update!), SHA.SHA1_CTX, Base.CodeUnits{UInt8, String}, Int64})
precompile(Tuple{typeof(AssetRegistry.getkey), String})
precompile(Tuple{typeof(Pidfile.tryopen_exclusive), String, UInt16})
precompile(Tuple{typeof(Base.read), Base.Filesystem.File})
precompile(Tuple{typeof(Pidfile.parse_pidfile), String})
precompile(Tuple{typeof(Base.Libc.gethostname)})
precompile(Tuple{typeof(Pidfile.stale_pidfile), String, Int64})
precompile(Tuple{getfield(Pidfile, Symbol("##open_exclusive#6")), UInt16, Int64, Int64, typeof(Pidfile.open_exclusive), String})
precompile(Tuple{typeof(Pidfile.write_pidfile), Base.Filesystem.File, Int32})
precompile(Tuple{getfield(Pidfile, Symbol("#mkpidlock#1#2")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:stale_age,), Tuple{Int64}}}, typeof(Pidfile.mkpidlock), String, Int32})
precompile(Tuple{typeof(AssetRegistry.filekey), String})
precompile(Tuple{Type{Base.Dict{String, Tuple{String, Int64}}}})
precompile(Tuple{getfield(AssetRegistry, Symbol("#3#5")){String, String, String}})
precompile(Tuple{typeof(Base.close), Pidfile.LockMonitor})
precompile(Tuple{getfield(AssetRegistry, Symbol("##register#1")), String, typeof(AssetRegistry.register), String})
precompile(Tuple{typeof(AssetRegistry.register), String})
precompile(Tuple{typeof(Base.print_to_string), Int32, Vararg{Any, N} where N})
precompile(Tuple{getfield(JSON.Parser, Symbol("##parse#2")), Type{T} where T, Type{Int64}, Bool, Nothing, typeof(JSON.Parser.parse), Base.IOStream})
precompile(Tuple{typeof(JSON.Parser.current), JSON.Parser.StreamingParserState{Base.IOStream}})
precompile(Tuple{typeof(JSON.Parser._error), String, JSON.Parser.StreamingParserState{Base.IOStream}})
precompile(Tuple{typeof(JSON.Parser.byteat), JSON.Parser.StreamingParserState{Base.IOStream}})
precompile(Tuple{typeof(JSON.Parser.read_four_hex_digits!), JSON.Parser.StreamingParserState{Base.IOStream}})
precompile(Tuple{typeof(JSON.Parser._error_expected_char), UInt8, JSON.Parser.StreamingParserState{Base.IOStream}})
precompile(Tuple{typeof(JSON.Parser.read_unicode_escape!), JSON.Parser.StreamingParserState{Base.IOStream}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{UInt8, UInt8}, UInt8})
precompile(Tuple{typeof(JSON.Parser.parse_string), JSON.Parser.StreamingParserState{Base.IOStream}})
precompile(Tuple{typeof(JSON.Parser.skip!), JSON.Parser.StreamingParserState{Base.IOStream}, UInt8, UInt8})
precompile(Tuple{typeof(JSON.Parser.parse_jsconstant), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.StreamingParserState{Base.IOStream}})
precompile(Tuple{typeof(Base.throw_boundserror), JSON.Parser.PushVector{UInt8, Array{UInt8, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(Parsers.pow10), Type{Float64}, Int64})
precompile(Tuple{typeof(Parsers.pow10spl), Int64})
precompile(Tuple{typeof(Parsers.mant128), Int64})
precompile(Tuple{typeof(Base.GMP.MPZ.set_ui), UInt64})
precompile(Tuple{typeof(Base.GMP.MPZ.realloc2), Int64})
precompile(Tuple{typeof(Core.throw_inexacterror), Symbol, Type{Int32}, UInt128})
precompile(Tuple{Type{Base.GMP.BigInt}, UInt128})
precompile(Tuple{typeof(Base.:(-)), Base.MPFR.BigFloat})
precompile(Tuple{typeof(Base.exp10), Float64})
precompile(Tuple{Type{Float64}, Base.GMP.BigInt, Base.Rounding.RoundingMode{:Nearest}})
precompile(Tuple{typeof(Base.GMP.MPZ.add_ui), Base.GMP.BigInt, UInt8})
precompile(Tuple{typeof(Base.exp10), Base.MPFR.BigFloat})
precompile(Tuple{typeof(Base.:(/)), Base.MPFR.BigFloat, Base.MPFR.BigFloat})
precompile(Tuple{typeof(Base.:(*)), Base.MPFR.BigFloat, Base.GMP.BigInt})
precompile(Tuple{typeof(Parsers._typeparser), Type{Float64}, Array{UInt8, 1}, Int64, Int64, UInt8, Int16, Parsers.Options{false, false, false, false, Nothing, Nothing, Nothing}, Type{Base.GMP.BigInt}})
precompile(Tuple{typeof(Parsers._typeparser), Type{Float64}, Array{UInt8, 1}, Int64, Int64, UInt8, Int16, Parsers.Options{false, false, false, false, Nothing, Nothing, Nothing}, Type{UInt128}})
precompile(Tuple{typeof(JSON.Parser._float_from_bytes), Array{UInt8, 1}, Int64, Int64})
precompile(Tuple{typeof(JSON.Parser.number_from_bytes), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.StreamingParserState{Base.IOStream}, Bool, JSON.Parser.PushVector{UInt8, Array{UInt8, 1}}, Int64, Int64})
precompile(Tuple{typeof(JSON.Parser.parse_number), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.StreamingParserState{Base.IOStream}})
precompile(Tuple{typeof(JSON.Parser.parse_object), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.StreamingParserState{Base.IOStream}})
precompile(Tuple{typeof(JSON.Parser.parse_array), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.StreamingParserState{Base.IOStream}})
precompile(Tuple{typeof(JSON.Parser.parse_value), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.StreamingParserState{Base.IOStream}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Tuple{String, Int64}, String})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.IOStream}, JSON.Serializations.StandardSerialization, Base.Pair{String, Any}})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.IOStream}, JSON.Serializations.StandardSerialization, Base.Dict{String, Any}})
precompile(Tuple{typeof(JSON.Writer.print), Base.IOStream, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.write), JSON.Writer.StringContext{JSON.Writer.CompactContext{Base.IOStream}}, UInt8})
precompile(Tuple{typeof(Base.write), JSON.Writer.StringContext{JSON.Writer.CompactContext{Base.IOStream}}, String})
precompile(Tuple{typeof(JSON.Writer.show_key), JSON.Writer.CompactContext{Base.IOStream}, String})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.IOStream}, JSON.Serializations.StandardSerialization, Array{Any, 1}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.IOStream}, JSON.Serializations.StandardSerialization, String, Array{Any, 1}})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.IOStream}, JSON.Serializations.StandardSerialization, String})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.IOStream}, JSON.Serializations.StandardSerialization, String})
precompile(Tuple{typeof(Base.write), JSON.Writer.CompactContext{Base.IOStream}, String})
precompile(Tuple{typeof(Base.print), JSON.Writer.CompactContext{Base.IOStream}, Int64})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.IOStream}, JSON.Serializations.StandardSerialization, Int64})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.IOStream}, JSON.Serializations.StandardSerialization, Tuple{String, Int64}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.IOStream}, JSON.Serializations.StandardSerialization, String, Tuple{String, Int64}})
precompile(Tuple{typeof(WebIO.include), String})
precompile(Tuple{typeof(Base.vect), Base.Pair{String, String}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.Pair{String, String}, Base.Pair{String, String}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.Pair{String, String}, Tuple{String, String}})
precompile(Tuple{typeof(Base.promote_type), Type{Base.Pair{String, String}}, Type{Any}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Tuple{String, String}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Array{Any, 1}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{String}, Type{String}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, String}, Array{Any, 1}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, String}, Int64, Int64})
precompile(Tuple{Type{Ref{WebIO.WebIOServer{S} where S}}})
precompile(Tuple{Type{Ref{Any}}, Function})
precompile(Tuple{Type{NamedTuple{(:url, :bundle_url, :http_port, :ws_url), T} where T<:Tuple}, Tuple{String, String, Int64, String}})
precompile(Tuple{Type{Ref{NamedTuple{(:url, :bundle_url, :http_port, :ws_url), Tuple{String, String, Int64, String}}}}})
precompile(Tuple{getfield(WebIO, Symbol("#69#81"))})
precompile(Tuple{getfield(WebIO, Symbol("#70#82"))})
precompile(Tuple{getfield(WebIO, Symbol("#71#83"))})
precompile(Tuple{getfield(Base.CoreLogging, Symbol("#@error")), LineNumberNode, Module, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.print_to_string), Expr})
precompile(Tuple{typeof(Base.CoreLogging.logmsg_code), Module, String, Int64, Symbol, Expr, Expr})
precompile(Tuple{typeof(Base.show_delim_array), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{Expr}, Char, Char, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{Expr}})
precompile(Tuple{typeof(Base.show_unquoted_quote_expr), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Any, Int64, Int64, Int64})
precompile(Tuple{Type{Base.Val{x} where x}, Symbol})
precompile(Tuple{typeof(WebIO.setup_provider), Symbol})
precompile(Tuple{typeof(WebIO.re_register_renderables)})
precompile(Tuple{typeof(WebIO.setup), Symbol})
precompile(Tuple{Type{Base.Val{:mux}}})
precompile(Tuple{typeof(BinDeps.__init__)})
precompile(Tuple{getfield(Revise, Symbol("##instantiate_sigs!#79")), Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Revise.instantiate_sigs!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}})
precompile(Tuple{typeof(Revise.queue_includes!), Revise.PkgData, Base.PkgId})
precompile(Tuple{typeof(Revise.parse_pkg_files), Base.PkgId})
precompile(Tuple{typeof(Revise._watch_package), Base.PkgId})
precompile(Tuple{getfield(Revise, Symbol("#35#36")){Base.PkgId}})
precompile(Tuple{typeof(Revise.maybe_add_includes_to_pkgdata!), Revise.PkgData, String, Array{Base.Pair{Module, String}, 1}})
precompile(Tuple{typeof(Revise._add_require), String, Module, String, String, Expr})
precompile(Tuple{getfield(Revise, Symbol("#72#73")){OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Module, Array{Base.Pair{Module, String}, 1}}})
precompile(Tuple{typeof(Base.CoreLogging.with_logstate), getfield(Revise, Symbol("#72#73")){OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Module, Array{Base.Pair{Module, String}, 1}}, Base.CoreLogging.LogState})
precompile(Tuple{typeof(JuliaInterpreter.framecode_matches_breakpoint), JuliaInterpreter.FrameCode, JuliaInterpreter.BreakpointFileLocation})
precompile(Tuple{typeof(Base.Sort.searchsortedfirst), Array{Any, 1}, Int64, Int64, Int64, Base.Order.By{getfield(JuliaInterpreter, Symbol("#sortby#5"))}})
precompile(Tuple{typeof(JuliaInterpreter.statementnumber), JuliaInterpreter.FrameCode, Int64})
precompile(Tuple{typeof(JuliaInterpreter.add_breakpoint_if_match!), JuliaInterpreter.FrameCode, JuliaInterpreter.BreakpointFileLocation})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("##FrameCode#1")), Bool, Bool, Type{JuliaInterpreter.FrameCode}, Module, Core.CodeInfo})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("#prepare_thunk##kw")), NamedTuple{(:eval,), Tuple{Bool}}, typeof(JuliaInterpreter.prepare_thunk), Module, Expr, Bool})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("##prepare_thunk#41")), Bool, typeof(JuliaInterpreter.prepare_thunk), Module, Expr, Bool})
precompile(Tuple{typeof(JuliaInterpreter.finish!), Any, JuliaInterpreter.Frame, Bool})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("##prepare_call#38")), Bool, typeof(JuliaInterpreter.prepare_call), Any, Array{Any, 1}})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("##get_call_framecode#59")), Bool, typeof(JuliaInterpreter.get_call_framecode), Array{Any, 1}, JuliaInterpreter.FrameCode, Int64})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("##evaluate_call_recurse!#64")), Bool, typeof(JuliaInterpreter.evaluate_call_recurse!), Any, JuliaInterpreter.Frame, Expr})
precompile(Tuple{typeof(JuliaInterpreter.eval_rhs), Any, JuliaInterpreter.Frame, Expr})
precompile(Tuple{getfield(Base, Symbol("##dump#385")), Int64, typeof(Base.dump), Expr})
precompile(Tuple{typeof(JuliaInterpreter.lookup_or_eval), Any, JuliaInterpreter.Frame, Any})
precompile(Tuple{typeof(JuliaInterpreter.evaluate_structtype), Any, JuliaInterpreter.Frame, Expr})
precompile(Tuple{typeof(JuliaInterpreter.evaluate_abstracttype), Any, JuliaInterpreter.Frame, Expr})
precompile(Tuple{typeof(JuliaInterpreter.evaluate_primitivetype), Any, JuliaInterpreter.Frame, Expr})
precompile(Tuple{typeof(JuliaInterpreter.step_expr!), Any, JuliaInterpreter.Frame, Any, Bool})
precompile(Tuple{typeof(LoweredCodeUtils.identify_framemethod_calls), JuliaInterpreter.Frame})
precompile(Tuple{getfield(Revise, Symbol("##methods_by_execution!#22")), Bool, Bool, typeof(Revise.methods_by_execution!), Any, Revise.CodeTrackingMethodInfo, Base.Dict{Module, Array{Expr, 1}}, JuliaInterpreter.Frame, Base.BitArray{1}})
precompile(Tuple{getfield(Revise, Symbol("##methods_by_execution!#17")), Bool, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Revise.methods_by_execution!), Any, Revise.CodeTrackingMethodInfo, Base.Dict{Module, Array{Expr, 1}}, Module, Expr})
precompile(Tuple{typeof(JuliaInterpreter.replace_ssa!), Module, Array{Int64, 1}})
precompile(Tuple{typeof(Revise.add_to_backedges!), Revise.BackEdges, Array{Revise.SlotDep, 1}, Int64, Module})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), Symbol}, Module})
precompile(Tuple{typeof(Base.CoreLogging.shouldlog), Revise.ReviseLogger, Base.CoreLogging.LogLevel, Module, Symbol, Symbol})
precompile(Tuple{typeof(WebIO.setup_provider), Symbol})
precompile(Tuple{typeof(WebIO.setup), Symbol})
precompile(Tuple{typeof(Blink.__init__)})
precompile(Tuple{getfield(Blink, Symbol("#12#13"))})
precompile(Tuple{getfield(Blink, Symbol("#26#27"))})
precompile(Tuple{getfield(WebIO, Symbol("#72#84"))})
precompile(Tuple{getfield(WebIO, Symbol("#73#85"))})
precompile(Tuple{getfield(WebIO, Symbol("#74#86"))})
precompile(Tuple{typeof(Base.:(^)), String, PyCall.PyObject})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("##bracketed_paste#107")), Any, typeof(REPL.LineEdit.bracketed_paste), Any})
precompile(Tuple{typeof(REPL.LineEdit.bracketed_paste), Any})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.LineEdit.MIState})
precompile(Tuple{typeof(REPL.LineEdit.refresh_line), Any})
precompile(Tuple{typeof(REPL.LineEdit.add_history), REPL.LineEdit.PromptState})
precompile(Tuple{typeof(REPL.LineEdit.add_history), REPL.LineEdit.MIState})
precompile(Tuple{typeof(REPL.LineEdit.commit_line), Any})
precompile(Tuple{typeof(PyCall.pyjlwrap_new), PyCall.PyTypeObject, Char})
precompile(Tuple{getfield(REPL, Symbol("#53#62")), Any, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.replace), String, Base.Pair{Char, String}})
precompile(Tuple{getfield(Base.Meta, Symbol("##parse#1")), Bool, Bool, Bool, typeof(Base.Meta.parse), String, Int64})
precompile(Tuple{getfield(Base.Meta, Symbol("#parse##kw")), NamedTuple{(:raise, :depwarn), Tuple{Bool, Bool}}, typeof(Base.Meta.parse), String, Int64})
precompile(Tuple{typeof(Base.prevind), String, Int64})
precompile(Tuple{typeof(Base.strip), String})
precompile(Tuple{typeof(REPL.LineEdit.replace_line), REPL.LineEdit.MIState, Any})
precompile(Tuple{typeof(REPL.LineEdit.replace_line), REPL.LineEdit.PromptState, Any})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.LineEdit.ModeState})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("##refresh_multi_line#12")), Any, typeof(REPL.LineEdit.refresh_multi_line), REPL.LineEdit.ModeState})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.UnixTerminal, Any})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("##refresh_multi_line#16")), Any, typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.UnixTerminal, Any})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.Terminals.UnixTerminal, Union{REPL.LineEdit.PrefixSearchState, REPL.LineEdit.PromptState}})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("##refresh_multi_line#38")), Any, typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.Terminals.UnixTerminal, Union{REPL.LineEdit.PrefixSearchState, REPL.LineEdit.PromptState}})
precompile(Tuple{typeof(REPL.LineEdit.add_history), REPL.REPLHistoryProvider, Any})
precompile(Tuple{Type{NamedTuple{(:label,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:value, :min, :max, :step), Tuple{Int64, Int64, Int64, Int64}}}, Type{NamedTuple{(:label,), Tuple{String}}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Int64, Int64, Int64, String}}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:isnumeric, :placeholder, :typ), Tuple{Bool, String, String}}}, Type{NamedTuple{(:min, :max, :step, :label), Tuple{Int64, Int64, Int64, String}}}})
precompile(Tuple{typeof(Base.sym_in), Symbol, Tuple{Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, String, String, Int64, Int64, Int64, String}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:className, :attributes, :style), Tuple{String, Base.Dict{Any, Any}, Base.Dict{Any, Any}}}}, Type{NamedTuple{(:placeholder, :min, :max, :step), Tuple{String, Int64, Int64, Int64}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Base.Dict{Any, Any}, Base.Dict{Any, Any}, String, Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{FunctionalCollections.DenseBitmappedTrie{Array{Any, 1}}}})
precompile(Tuple{Type{Core.Compiler.Signature}, Base.BottomRF{typeof(FunctionalCollections.push)}, Core.Compiler.Const, Array{Any, 1}, Type{T} where T})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Base.SubString{String}, 1}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:className, :style), Tuple{String, Base.Dict{Any, Any}}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Base.Dict{Any, Any}}}})
precompile(Tuple{getfield(Widgets, Symbol("##spinbox#36")), Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:label,), Tuple{String}}}, typeof(Widgets.spinbox), Base.UnitRange{Int64}})
precompile(Tuple{getfield(Widgets, Symbol("#spinbox##kw")), NamedTuple{(:label,), Tuple{String}}, typeof(Widgets.spinbox), Base.UnitRange{Int64}})
precompile(Tuple{getfield(InteractBase, Symbol("##spinbox#44")), Int64, String, Nothing, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:min, :max, :step, :label), Tuple{Int64, Int64, Int64, String}}}, typeof(Widgets.spinbox), Interact.Bulma, String})
precompile(Tuple{getfield(Widgets, Symbol("#spinbox##kw")), NamedTuple{(:label,), Tuple{String}}, typeof(Widgets.spinbox), Interact.Bulma, Base.UnitRange{Int64}})
precompile(Tuple{getfield(Widgets, Symbol("#input##kw")), NamedTuple{(:isnumeric, :placeholder, :typ, :min, :max, :step, :label), Tuple{Bool, String, String, Int64, Int64, Int64, String}}, typeof(Widgets.input), Observables.Observable{Union{Nothing, Int64}}})
precompile(Tuple{getfield(Widgets, Symbol("##input#40")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:isnumeric, :placeholder, :typ, :min, :max, :step, :label), Tuple{Bool, String, String, Int64, Int64, Int64, String}}}, typeof(Widgets.input), Observables.Observable{Union{Nothing, Int64}}})
precompile(Tuple{typeof(Base._append!), Array{Base.Pair{String, Any}, 1}, Base.HasShape{1}, Base.Generator{Array{Any, 1}, getfield(InteractBase, Symbol("#48#51"))}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, Any}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, String, Symbol})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Any, Any}, Base.Dict{Symbol, String}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base._foldl_impl), Base.BottomRF{typeof(FunctionalCollections.push)}, FunctionalCollections.PersistentVector{Any}, Array{Any, 1}})
precompile(Tuple{Type{WebIO.Node{T} where T}, Symbol, Array{Any, 1}, Base.Dict{Any, Any}})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.rstrip), Base.Fix2{typeof(Base.in), Array{Char, 1}}, Base.SubString{String}})
precompile(Tuple{typeof(Base.lstrip), Base.Fix2{typeof(Base.in), Array{Char, 1}}, Base.SubString{String}})
precompile(Tuple{typeof(Base._findnext_re), Base.Regex, Base.SubString{String}, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(Base._split), Base.SubString{String}, Base.Regex, Int64, Bool, Array{Base.SubString{String}, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.Generator{Array{Base.SubString{String}, 1}, getfield(WebIO, Symbol("#7#9"))}, Int64, Int64})
precompile(Tuple{typeof(Base._collect), Array{Base.SubString{String}, 1}, Base.Generator{Array{Base.SubString{String}, 1}, getfield(WebIO, Symbol("#7#9"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{Type{Base.Dict{Base.SubString{String}, Base.SubString{String}}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Base.SubString{String}, Base.SubString{String}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Base.SubString{String}, Base.SubString{String}}, Base.SubString{String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Base.SubString{String}, Base.SubString{String}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{Type{Base.Dict{Base.SubString{String}, Base.SubString{String}}}, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Base.Dict{Base.SubString{String}, Base.SubString{String}}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Array{Base.SubString{String}, 1}, Base.Generator{Base.RegexMatchIterator, getfield(WebIO, Symbol("#8#11"))}, Tuple{Int64, Bool}})
precompile(Tuple{typeof(Base.grow_to!), Array{Base.SubString{String}, 1}, Base.Generator{Base.RegexMatchIterator, getfield(WebIO, Symbol("#8#11"))}})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.SubString{String}, 1}, Base.Generator{Array{Base.SubString{String}, 1}, getfield(WebIO, Symbol("#trimfirst#10"))}, Int64, Int64})
precompile(Tuple{typeof(Base._collect), Array{Base.SubString{String}, 1}, Base.Generator{Array{Base.SubString{String}, 1}, getfield(WebIO, Symbol("#trimfirst#10"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Base.SubString{String}, Symbol})
precompile(Tuple{typeof(WebIO.cssparse), String})
precompile(Tuple{typeof(WebIO.makedom), Symbol, Base.Dict{Any, Any}})
precompile(Tuple{Type{WebIO.Node{T} where T}, WebIO.DOM, Array{Any, 1}, Base.Dict{Any, Any}})
precompile(Tuple{Type{Base.Dict{Union{}, Union{}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.getindex), Array{Union{}, 1}, Int64})
precompile(Tuple{typeof(WebIO.mergeprops), WebIO.Node{WebIO.DOM}, Base.Dict{Union{}, Union{}}})
precompile(Tuple{getfield(WebIO, Symbol("#dom#12#14")){Base.Dict{Any, Any}, WebIO.DOM}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, getfield(WebIO, Symbol("#dom#13")){getfield(WebIO, Symbol("#dom#12#14")){Base.Dict{Any, Any}, WebIO.DOM}}})
precompile(Tuple{Type{Base.Dict{String, Tuple{Observables.AbstractObservable{T} where T, Union{Nothing, Bool}}}}})
precompile(Tuple{typeof(WebIO.getextension), String})
precompile(Tuple{Type{Base.Dict{WebIO.AbstractConnection, Nothing}}})
precompile(Tuple{Type{WebIO.ConnectionPool}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, WebIO.Scope}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, WebIO.Scope}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, WebIO.Scope}, WebIO.Scope, String})
precompile(Tuple{getfield(WebIO, Symbol("##Scope#31")), WebIO.Node{WebIO.DOM}, Nothing, Base.Dict{String, Tuple{Observables.AbstractObservable{T} where T, Union{Nothing, Bool}}}, Base.Set{String}, Nothing, Array{Base.Pair{String, String}, 1}, Base.Dict{Any, Any}, Array{WebIO.JSString, 1}, Nothing, Type{WebIO.Scope}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:imports,), Tuple{Array{Base.Pair{String, String}, 1}}}, Type{WebIO.Scope}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, WebIO.JSString, String})
precompile(Tuple{getfield(Knockout, Symbol("##knockout#1")), Array{Any, 1}, Array{Any, 1}, typeof(Knockout.knockout), WebIO.Node{WebIO.DOM}, Array{Base.Pair{String, Any}, 1}, WebIO.JSString})
precompile(Tuple{typeof(Widgets.slap_design!), WebIO.Scope, Nothing})
precompile(Tuple{typeof(Widgets.slap_design!), WebIO.Scope})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Tuple{Observables.AbstractObservable{T} where T, Union{Nothing, Bool}}}, String})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Dict{Symbol, String}})
precompile(Tuple{Type{WebIO.Node{T} where T}, Symbol, Array{Any, 1}, Base.Dict{Symbol, String}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, Tuple{Observables.AbstractObservable{T} where T, Union{Nothing, Bool}}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, Tuple{Observables.AbstractObservable{T} where T, Union{Nothing, Bool}}}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Tuple{Observables.AbstractObservable{T} where T, Union{Nothing, Bool}}}, Tuple{Observables.Observable{Any}, Nothing}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{WeakRef, Any}, Tuple{WeakRef, String}, WeakRef})
precompile(Tuple{typeof(Base.lock), getfield(Base, Symbol("#473#474")){Base.WeakKeyDict{Any, Any}, Tuple{WeakRef, String}, Observables.Observable{Any}}, Base.ReentrantLock})
precompile(Tuple{getfield(WebIO, Symbol("##setobservable!#37")), Nothing, typeof(WebIO.setobservable!), WebIO.Scope, String, Observables.Observable{Any}})
precompile(Tuple{Type{WebIO.Node{T} where T}, Symbol, Array{Any, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{getfield(InteractBase, Symbol("##input#47")), WebIO.JSString, Array{Any, 1}, String, String, String, String, Base.Dict{Any, Any}, Bool, Array{Any, 1}, Base.Dict{Any, Any}, String, String, String, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:placeholder, :min, :max, :step), Tuple{String, Int64, Int64, Int64}}}, typeof(Widgets.input), Interact.Bulma, Observables.Observable{Union{Nothing, Int64}}})
precompile(Tuple{getfield(Widgets, Symbol("#input##kw")), NamedTuple{(:isnumeric, :placeholder, :typ, :min, :max, :step, :label), Tuple{Bool, String, String, Int64, Int64, Int64, String}}, typeof(Widgets.input), Interact.Bulma, Observables.Observable{Union{Nothing, Int64}}})
precompile(Tuple{typeof(InteractBase.getclass), Symbol, String})
precompile(Tuple{typeof(InteractBase.getclass), Interact.Bulma, Symbol, String})
precompile(Tuple{getfield(Base, Symbol("##sprint#338")), Nothing, Int64, typeof(Base.sprint), Function, Tuple{String, String}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:className, :attributes, :style, :placeholder, :min, :max, :step), Tuple{String, Base.Dict{Any, Any}, Base.Dict{Any, Any}, String, Int64, Int64, Int64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:className, :attributes, :style, :placeholder, :min, :max, :step), Tuple{String, Base.Dict{Any, Any}, Base.Dict{Any, Any}, String, Int64, Int64, Int64}}}, Int64})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{Symbol, Any}, Vararg{Base.Pair{Symbol, Any}, N} where N})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Tuple{Base.Pair{Symbol, Any}, Base.Pair{Symbol, Any}, Base.Pair{Symbol, Any}, Base.Pair{Symbol, Any}, Base.Pair{Symbol, Any}, Base.Pair{Symbol, Any}, Base.Pair{Symbol, Any}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Int64, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Base.Dict{Any, Any}, Symbol})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Tuple{Observables.AbstractObservable{T} where T, Union{Nothing, Bool}}}, Tuple{Observables.Observable{Int64}, Nothing}, String})
precompile(Tuple{typeof(Base.lock), getfield(Base, Symbol("#473#474")){Base.WeakKeyDict{Any, Any}, Tuple{WeakRef, String}, Observables.Observable{Int64}}, Base.ReentrantLock})
precompile(Tuple{getfield(WebIO, Symbol("##setobservable!#37")), Nothing, typeof(WebIO.setobservable!), WebIO.Scope, String, Observables.Observable{Int64}})
precompile(Tuple{typeof(WebIO.setobservable!), WebIO.Scope, String, Observables.Observable{Int64}})
precompile(Tuple{typeof(Base.unsafe_write), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(Base.write), JSON.Writer.StringContext{JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}}, UInt8})
precompile(Tuple{typeof(Base.write), JSON.Writer.StringContext{JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}}, String})
precompile(Tuple{typeof(JSON.Writer.show_string), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, WebIO.JSEvalSerialization, String})
precompile(Tuple{getfield(JSExpr, Symbol("#1#2")), Base.GenericIOBuffer{Array{UInt8, 1}}, String})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{WeakRef, Any}, Observables.Observable{Int64}})
precompile(Tuple{typeof(Base.lock), getfield(Base, Symbol("#493#494")){Base.WeakKeyDict{Any, Any}, Observables.Observable{Int64}}, Base.ReentrantLock})
precompile(Tuple{typeof(Base.lock), getfield(Base, Symbol("#495#496")){Base.WeakKeyDict{Any, Any}, Observables.Observable{Int64}}, Base.ReentrantLock})
precompile(Tuple{typeof(WebIO.onjs), Observables.Observable{Int64}, WebIO.JSString})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{Int64}, WeakRef})
precompile(Tuple{typeof(Base.isequal), PyCall.PyObject, Observables.Observable{Int64}})
precompile(Tuple{typeof(Base.:(==)), Observables.Observable{Int64}, WeakRef})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{Int64}, Observables.Observable{Int64}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{WeakRef, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{WeakRef, String}, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), WeakRef, Symbol})
precompile(Tuple{typeof(Base._any), getfield(WebIO, Symbol("#48#50")){WebIO.Scope}, Array{Any, 1}, Base.Colon})
precompile(Tuple{typeof(WebIO.ensure_sync), WebIO.Scope, String})
precompile(Tuple{typeof(Observables.listeners), Observables.Observable{Int64}})
precompile(Tuple{typeof(Observables.on), WebIO.SyncCallback, Observables.Observable{Int64}})
precompile(Tuple{typeof(WebIO.setup_comm), WebIO.SyncCallback, Observables.Observable{Int64}})
precompile(Tuple{typeof(WebIO.onjs), WebIO.Scope, String, WebIO.JSString})
precompile(Tuple{typeof(Base.get!), getfield(WebIO, Symbol("#46#47")), Base.Dict{Any, Any}, String})
precompile(Tuple{typeof(JSExpr.jsexpr), Observables.Observable{Int64}})
precompile(Tuple{typeof(JSExpr.jsexpr), Base.Dict{String, String}})
precompile(Tuple{getfield(Base, Symbol("##sprint#338")), Nothing, Int64, typeof(Base.sprint), Function, Base.Dict{String, String}})
precompile(Tuple{typeof(JSON.Writer.show_key), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, WebIO.JSEvalSerialization, Base.Dict{String, String}})
precompile(Tuple{getfield(JSExpr, Symbol("#1#2")), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Tuple{Observables.AbstractObservable{T} where T, Union{Nothing, Bool}}}, Tuple{Observables.Observable{Union{Nothing, Int64}}, Nothing}, String})
precompile(Tuple{typeof(Base.lock), getfield(Base, Symbol("#473#474")){Base.WeakKeyDict{Any, Any}, Tuple{WeakRef, String}, Observables.Observable{Union{Nothing, Int64}}}, Base.ReentrantLock})
precompile(Tuple{getfield(WebIO, Symbol("##setobservable!#37")), Nothing, typeof(WebIO.setobservable!), WebIO.Scope, String, Observables.Observable{Union{Nothing, Int64}}})
precompile(Tuple{typeof(WebIO.setobservable!), WebIO.Scope, String, Observables.Observable{Union{Nothing, Int64}}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{WeakRef, Any}, Observables.Observable{Union{Nothing, Int64}}})
precompile(Tuple{typeof(Base.lock), getfield(Base, Symbol("#493#494")){Base.WeakKeyDict{Any, Any}, Observables.Observable{Union{Nothing, Int64}}}, Base.ReentrantLock})
precompile(Tuple{typeof(Base.lock), getfield(Base, Symbol("#495#496")){Base.WeakKeyDict{Any, Any}, Observables.Observable{Union{Nothing, Int64}}}, Base.ReentrantLock})
precompile(Tuple{typeof(WebIO.onjs), Observables.Observable{Union{Nothing, Int64}}, WebIO.JSString})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{Union{Nothing, Int64}}, WeakRef})
precompile(Tuple{typeof(Base.isequal), PyCall.PyObject, Observables.Observable{Union{Nothing, Int64}}})
precompile(Tuple{typeof(Base.:(==)), Observables.Observable{Union{Nothing, Int64}}, WeakRef})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{Union{Nothing, Int64}}, Observables.Observable{Union{Nothing, Int64}}})
precompile(Tuple{typeof(Observables.listeners), Observables.Observable{Union{Nothing, Int64}}})
precompile(Tuple{typeof(Observables.on), WebIO.SyncCallback, Observables.Observable{Union{Nothing, Int64}}})
precompile(Tuple{typeof(WebIO.setup_comm), WebIO.SyncCallback, Observables.Observable{Union{Nothing, Int64}}})
precompile(Tuple{typeof(JSExpr.jsexpr), Observables.Observable{Union{Nothing, Int64}}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, WebIO.JSEvalSerialization, Base.Pair{Any, Any}})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, WebIO.JSEvalSerialization, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Knockout.dict2js), Base.Dict{Any, Any}})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, WebIO.JSEvalSerialization, WebIO.JSString})
precompile(Tuple{getfield(Knockout, Symbol("#2#7")){WebIO.JSString, Base.Dict{Any, Any}, Base.Dict{Any, Any}, Base.Dict{Any, Any}, Base.Dict{Any, Any}}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, WebIO.JSEvalSerialization, String, WebIO.JSString})
precompile(Tuple{getfield(Knockout, Symbol("#13#15")){Base.Dict{Any, Any}}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.ValueIterator{Base.Dict{Any, Any}}})
precompile(Tuple{typeof(Base.iterate), Base.ValueIterator{Base.Dict{Any, Any}}, Int64})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, WebIO.JSEvalSerialization, WebIO.JSString})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, WebIO.JSEvalSerialization, Tuple{WebIO.JSString, WebIO.JSString}})
precompile(Tuple{typeof(WebIO.showjs), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{WebIO.JSString, WebIO.JSString}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Array{WebIO.Asset, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{WebIO.Asset, 1}, WebIO.Asset, Base.Generator{Array{WebIO.Asset, 1}, typeof(WebIO.ensure_asset)}, Int64})
precompile(Tuple{Type{WebIO.Async}, Array{WebIO.Asset, 1}})
precompile(Tuple{getfield(WebIO, Symbol("#42#43")){WebIO.Scope, WebIO.JSString}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(WebIO.lowerassets), WebIO.Async})
precompile(Tuple{getfield(WebIO, Symbol("#23#24")){WebIO.Async}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(WebIO.lowerassets), Array{Any, 1}})
precompile(Tuple{typeof(Base._collect), Array{Any, 1}, Base.Generator{Array{Any, 1}, typeof(WebIO.lowerassets)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Any, 1}, Base.Generator{Array{Any, 1}, typeof(WebIO.lowerassets)}})
precompile(Tuple{getfield(Base.Cartesian, Symbol("#@nexprs")), LineNumberNode, Module, Int64, Expr})
precompile(Tuple{typeof(Base.Cartesian.exprresolve_arith), Expr})
precompile(Tuple{typeof(Base.Cartesian.exprresolve_conditional), Expr})
precompile(Tuple{typeof(Base.Cartesian.exprresolve), Expr})
precompile(Tuple{typeof(Base.Cartesian.inlineanonymous), Expr, Int64})
precompile(Tuple{typeof(Base.Cartesian.lreplace!), Expr, Base.Cartesian.LReplace{String}})
precompile(Tuple{typeof(Base.Cartesian.lreplace), Expr, Symbol, Int64})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Nothing}}}})
precompile(Tuple{typeof(WebIO.islocal), String})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, String}, Base.SubString{String}})
precompile(Tuple{typeof(WebIO.path2url), Base.SubString{String}})
precompile(Tuple{typeof(WebIO.dep2url), String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Nothing}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Nothing}}})
precompile(Tuple{typeof(JSON.Writer.lower), WebIO.Asset})
precompile(Tuple{typeof(WebIO.lowerassets), WebIO.Asset})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{Base.Dict{String, String}}, Base.Generator{Array{Any, 1}, typeof(WebIO.lowerassets)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Dict{String, String}, 1}, Base.Generator{Array{Any, 1}, typeof(WebIO.lowerassets)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Dict{String, String}, 1}, Base.Dict{String, String}, Base.Generator{Array{Any, 1}, typeof(WebIO.lowerassets)}, Int64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Array{Base.Dict{String, String}, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{String, String}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{String, String}, 1}}}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.Dict{String, String}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{String, String}, 1}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{String, String}, 1}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, String}, String, Array{Base.Dict{String, String}, 1}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, String}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{String, String}, 1}}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{String, String}, Type{String}, Type{Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, Any}, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Array{Base.Dict{String, String}, 1}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Array{Base.Dict{String, String}, 1}, Array{Base.Dict{String, String}, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, String, Array{Base.Dict{String, String}, 1}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Any, Any}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, Any}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{String, String}, 1}}}, Int64})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, WebIO.JSEvalSerialization, Base.Pair{String, Any}})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, WebIO.JSEvalSerialization, Base.Dict{String, Any}})
precompile(Tuple{typeof(WebIO.showjs), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, Any}})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, WebIO.JSEvalSerialization, Base.Dict{String, String}})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, WebIO.JSEvalSerialization, Array{Base.Dict{String, String}, 1}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, WebIO.JSEvalSerialization, String, Array{Base.Dict{String, String}, 1}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, WebIO.JSEvalSerialization, String, String})
precompile(Tuple{getfield(Widgets, Symbol("##wdglabel#78")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Widgets.wdglabel), String})
precompile(Tuple{typeof(InteractBase.getclass), Symbol})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Dict{Symbol, String}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Any, Any}, Base.Dict{Any, Any}})
precompile(Tuple{getfield(WebIO, Symbol("##Node#25")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:className, :style), Tuple{String, Base.Dict{Any, Any}}}}, Type{WebIO.Node{T} where T}, Symbol, String})
precompile(Tuple{getfield(InteractBase, Symbol("##wdglabel#66")), Int64, Int64, Int64, Int64, String, Base.Dict{Any, Any}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Widgets.wdglabel), Interact.Bulma, String})
precompile(Tuple{typeof(Widgets.wdglabel), Interact.Bulma, String})
precompile(Tuple{typeof(InteractBase.getclass), Interact.Bulma, Symbol})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:className, :style), Tuple{String, Base.Dict{Any, Any}}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:className, :style), Tuple{String, Base.Dict{Any, Any}}}}, Int64})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Tuple{Base.Pair{Symbol, Any}, Base.Pair{Symbol, Any}}})
precompile(Tuple{getfield(WebIO, Symbol("##Node#25")), Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:className,), Tuple{String}}}, Type{WebIO.Node{T} where T}, Symbol, WebIO.Node{WebIO.DOM}})
precompile(Tuple{typeof(InteractBase.flex_row), WebIO.Node{WebIO.DOM}, WebIO.Node{WebIO.DOM}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:className,), Tuple{String}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:className,), Tuple{String}}}, Int64})
precompile(Tuple{getfield(WebIO, Symbol("##Node#25")), Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:className,), Tuple{String}}}, Type{WebIO.Node{T} where T}, Symbol, WebIO.Node{WebIO.DOM}, Vararg{WebIO.Node{WebIO.DOM}, N} where N})
precompile(Tuple{typeof(InteractBase.isijulia)})
precompile(Tuple{typeof(InteractBase.libraries), Interact.Bulma})
precompile(Tuple{typeof(Widgets.slap_design!), WebIO.Scope, Array{String, 1}})
precompile(Tuple{typeof(Widgets.slap_design!), WebIO.Scope, Interact.Bulma})
precompile(Tuple{Type{NamedTuple{(:scope, :output, :layout), T} where T<:Tuple}, Tuple{WebIO.Scope, Observables.Observable{Union{Nothing, Int64}}, getfield(Base, Symbol("#64#65")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{WebIO.Scope, Observables.Observable{Union{Nothing, Int64}}, getfield(Base, Symbol("#64#65")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}}}})
precompile(Tuple{getfield(Widgets, Symbol("#4#5")), Base.Pair{String, Any}})
precompile(Tuple{Type{OrderedCollections.OrderedDict{Symbol, Any}}, Base.Generator{Array{Base.Pair{String, Any}, 1}, getfield(Widgets, Symbol("#4#5"))}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:scope, :output, :layout), Tuple{WebIO.Scope, Observables.Observable{Union{Nothing, Int64}}, getfield(Base, Symbol("#64#65")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}}}, Type{Widgets.Widget{:input, S} where S}, OrderedCollections.OrderedDict{Symbol, Any}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:scope, :output, :layout), Tuple{WebIO.Scope, Observables.Observable{Union{Nothing, Int64}}, getfield(Base, Symbol("#64#65")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}}}, Type{Widgets.Widget{:input, S} where S}, Array{Base.Pair{String, Any}, 1}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Observables.Observable{Int64}})
precompile(Tuple{typeof(OrderedCollections.rehash!), OrderedCollections.OrderedDict{Symbol, Any}, Int64})
precompile(Tuple{typeof(OrderedCollections.ht_keyindex2), OrderedCollections.OrderedDict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(OrderedCollections._setindex!), OrderedCollections.OrderedDict{Symbol, Any}, Observables.Observable{Int64}, Symbol, Int64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Symbol, Any}, Observables.Observable{Int64}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Observables.Observable{Union{Nothing, Int64}}})
precompile(Tuple{typeof(OrderedCollections._setindex!), OrderedCollections.OrderedDict{Symbol, Any}, Observables.Observable{Union{Nothing, Int64}}, Symbol, Int64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Symbol, Any}, Observables.Observable{Union{Nothing, Int64}}, Symbol})
precompile(Tuple{getfield(Widgets, Symbol("#_#1#2")), Observables.Observable{Union{Nothing, Int64}}, WebIO.Scope, Function, Type{Widgets.Widget{:input, S} where S}, OrderedCollections.OrderedDict{Symbol, Any}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:output,), Tuple{Observables.Observable{Union{Nothing, Int64}}}}, Type{Widgets.Widget{:spinbox, S} where S}, Widgets.Widget{:input, Union{Nothing, Int64}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Observables.Observable{Union{Nothing, Int64}}, Symbol})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Dict{Symbol, Any}})
precompile(Tuple{Type{Widgets.Widget{:spinbox, S} where S}, OrderedCollections.OrderedDict{Symbol, Any}})
precompile(Tuple{getfield(Widgets, Symbol("##_#7")), Base.Iterators.Pairs{Symbol, Observables.Observable{Union{Nothing, Int64}}, Tuple{Symbol}, NamedTuple{(:output,), Tuple{Observables.Observable{Union{Nothing, Int64}}}}}, Type{Widgets.Widget{:spinbox, S} where S}, Widgets.Widget{:input, Union{Nothing, Int64}}})
precompile(Tuple{typeof(Base.get!), getfield(Base, Symbol("#242#243")){OrderedCollections.OrderedDict{Symbol, Any}}, Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Base.get!), Base.Dict{Symbol, Any}, Symbol, OrderedCollections.OrderedDict{Symbol, Any}})
precompile(Tuple{typeof(Base.get!), getfield(Base, Symbol("#242#243")){Observables.Observable{Union{Nothing, Int64}}}, Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Base.get!), Base.Dict{Symbol, Any}, Symbol, Observables.Observable{Union{Nothing, Int64}}})
precompile(Tuple{typeof(Base.get!), getfield(Base, Symbol("#242#243")){WebIO.Scope}, Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Base.get!), Base.Dict{Symbol, Any}, Symbol, WebIO.Scope})
precompile(Tuple{typeof(Base.get!), Base.Dict{Symbol, Any}, Symbol, Function})
precompile(Tuple{typeof(Base.get!), getfield(Base, Symbol("#242#243")){getfield(Base, Symbol("#64#65")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}}, Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{Type{NamedTuple{(:output, :components, :layout, :scope), T} where T<:Tuple}, Tuple{Observables.Observable{Union{Nothing, Int64}}, OrderedCollections.OrderedDict{Symbol, Any}, getfield(Base, Symbol("#64#65")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}, WebIO.Scope}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:output, :components, :layout, :scope), Tuple{Observables.Observable{Union{Nothing, Int64}}, OrderedCollections.OrderedDict{Symbol, Any}, getfield(Base, Symbol("#64#65")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}, WebIO.Scope}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Observables.Observable{Union{Nothing, Int64}}, getfield(Base, Symbol("#64#65")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}, WebIO.Scope}}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:output, :layout, :scope), Tuple{Observables.Observable{Union{Nothing, Int64}}, getfield(Base, Symbol("#64#65")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}, WebIO.Scope}}, Type{Widgets.Widget{:spinbox, S} where S}, OrderedCollections.OrderedDict{Symbol, Any}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:output, :components, :layout, :scope), Tuple{Observables.Observable{Union{Nothing, Int64}}, OrderedCollections.OrderedDict{Symbol, Any}, getfield(Base, Symbol("#64#65")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}, WebIO.Scope}}, Type{Widgets.Widget{:spinbox, S} where S}})
precompile(Tuple{getfield(Widgets, Symbol("#_#1#2")), Observables.Observable{Union{Nothing, Int64}}, WebIO.Scope, Function, Type{Widgets.Widget{:spinbox, S} where S}, OrderedCollections.OrderedDict{Symbol, Any}})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{Any}, Tuple{Widgets.Widget{:spinbox, Union{Nothing, Int64}}, Bool}})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{Any}, Tuple{Widgets.Widget{:spinbox, Union{Nothing, Int64}}, Bool}})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{Widgets.Widget{:spinbox, Union{Nothing, Int64}}, Bool}})
precompile(Tuple{typeof(WebIO.process_messages), WebIO.ConnectionPool})
precompile(Tuple{getfield(WebIO, Symbol("#3#4")){WebIO.ConnectionPool}})
precompile(Tuple{typeof(REPL.print_response), REPL.AbstractREPL, Any, Bool, Bool})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Widgets.Widget{:spinbox, Union{Nothing, Int64}}, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Widgets.Widget{:spinbox, Union{Nothing, Int64}}, Bool}, Int64, Int64})
precompile(Tuple{typeof(Widgets.render), Widgets.Widget{:spinbox, Union{Nothing, Int64}}})
precompile(Tuple{typeof(Base.Multimedia.display), Widgets.Widget{:spinbox, Union{Nothing, Int64}}})
precompile(Tuple{getfield(Base, Symbol("#64#65")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}, Widgets.Widget{:spinbox, Union{Nothing, Int64}}})
precompile(Tuple{typeof(Base.getindex), Array{FunctionalCollections.DenseBitmappedTrie{Array{Any, 1}}, 1}, Base.Colon})
precompile(Tuple{typeof(FunctionalCollections.append), FunctionalCollections.DenseNode{Array{Any, 1}}, Array{Any, 1}})
precompile(Tuple{typeof(FunctionalCollections.append), FunctionalCollections.DenseLeaf{Array{Any, 1}}, Array{Any, 1}})
precompile(Tuple{typeof(FunctionalCollections.push), FunctionalCollections.PersistentVector{Any}, WebIO.Scope})
precompile(Tuple{typeof(Base.copymutable), FunctionalCollections.PersistentVector{Any}})
precompile(Tuple{typeof(Base.copy), FunctionalCollections.PersistentVector{Any}})
precompile(Tuple{typeof(Base._unaliascopy), FunctionalCollections.PersistentVector{Any}, Array{Any, 1}})
precompile(Tuple{typeof(Base.unaliascopy), FunctionalCollections.PersistentVector{Any}})
precompile(Tuple{typeof(Base.unalias), Array{Any, 1}, FunctionalCollections.PersistentVector{Any}})
precompile(Tuple{typeof(Base.getindex), FunctionalCollections.DenseNode{Array{Any, 1}}, Int64})
precompile(Tuple{typeof(Base.error), BoundsError, String})
precompile(Tuple{typeof(Base.getindex), FunctionalCollections.PersistentVector{Any}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, FunctionalCollections.PersistentVector{Any}})
precompile(Tuple{typeof(WebIO.setchildren), WebIO.Node{WebIO.DOM}, FunctionalCollections.PersistentVector{Any}})
precompile(Tuple{WebIO.Node{WebIO.DOM}, WebIO.Scope})
precompile(Tuple{typeof(Base.Multimedia.display), Any})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{R} where R<:REPL.AbstractREPL, Base.Multimedia.MIME{Symbol("text/plain")}, Any})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{R} where R<:REPL.AbstractREPL, Any})
precompile(Tuple{typeof(WebIO.showprops), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(WebIO.showchildren), Base.IOContext{REPL.Terminals.TTYTerminal}, FunctionalCollections.PersistentVector{Any}, Int64})
precompile(Tuple{typeof(WebIO._show), Base.IOContext{REPL.Terminals.TTYTerminal}, WebIO.Node{WebIO.DOM}, Int64})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Multimedia.MIME{Symbol("text/plain")}, WebIO.Node{WebIO.DOM}})
precompile(Tuple{typeof(Base.print), Base.IOContext{REPL.Terminals.TTYTerminal}, Symbol, String, Vararg{String, N} where N})
precompile(Tuple{typeof(WebIO._show), Base.IOContext{REPL.Terminals.TTYTerminal}, WebIO.Scope, Int64})
precompile(Tuple{typeof(Base.repr), Base.Dict{Any, Any}})
precompile(Tuple{getfield(Base, Symbol("##sprint#338")), Nothing, Int64, typeof(Base.sprint), Function, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.isdelimited), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Pair{Any, Any}})
precompile(Tuple{typeof(Base._show_default), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Any})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Pair{Any, Any}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{Any, Any}})
precompile(Tuple{Type{Base.Pair{DataType, DataType}}, Any, Any})
precompile(Tuple{Type{Base.Pair{Symbol, DataType}}, Any, Any})
precompile(Tuple{typeof(Base.isdelimited), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Symbol})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Symbol})
precompile(Tuple{typeof(WebIO._show), Base.IOContext{REPL.Terminals.TTYTerminal}, String, Int64})
precompile(Tuple{typeof(Base.repr), Int64})
precompile(Tuple{getfield(Base, Symbol("##sprint#338")), Nothing, Int64, typeof(Base.sprint), Function, Int64})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, String, Vararg{String, N} where N})
precompile(Tuple{typeof(REPL.LineEdit.activate), REPL.LineEdit.TextInterface, REPL.LineEdit.ModeState, Any, REPL.Terminals.TextTerminal})
precompile(Tuple{typeof(REPL.LineEdit.refresh_line), Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.LineEdit.ModeState})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("##refresh_multi_line#13")), Any, typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.LineEdit.ModeState})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#3#4")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect_to!), Array{String, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Main, Symbol("#3#4"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Main, Symbol("#3#4"))}})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{Any}, Tuple{typeof(Main.mush), Bool}})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{Any}, Tuple{typeof(Main.mush), Bool}})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{typeof(Main.mush), Bool}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{typeof(Main.mush), Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{typeof(Main.mush), Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{Any}, Tuple{typeof(Main.quad), Bool}})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{Any}, Tuple{typeof(Main.quad), Bool}})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{typeof(Main.quad), Bool}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{typeof(Main.quad), Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{typeof(Main.quad), Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Multimedia.MIME{Symbol("text/plain")}, Function})
precompile(Tuple{typeof(Base.methods), Any})
precompile(Tuple{typeof(Base.methods), Any, Any, Union{Nothing, Module, AbstractArray{Module, N} where N}})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{Any}, Tuple{typeof(Main.sinai), Bool}})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{Any}, Tuple{typeof(Main.sinai), Bool}})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{typeof(Main.sinai), Bool}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{typeof(Main.sinai), Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{typeof(Main.sinai), Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{Any}, Tuple{typeof(Main.pol), Bool}})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{Any}, Tuple{typeof(Main.pol), Bool}})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{typeof(Main.pol), Bool}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{typeof(Main.pol), Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{typeof(Main.pol), Bool}, Int64, Int64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Type{T} where T})
precompile(Tuple{Type{Base.Pair{String, UnionAll}}, Any, Any})
precompile(Tuple{typeof(Base.convert), Type{UnionAll}, Type{BilharesMarkov.HyperBKParticle{T} where T<:AbstractFloat}})
precompile(Tuple{typeof(Base.convert), Type{UnionAll}, Type{BilharesMarkov.EllipticParticle{T} where T<:AbstractFloat}})
precompile(Tuple{typeof(Base.convert), Type{UnionAll}, Type{DynamicalBilliards.Particle{T} where T<:AbstractFloat}})
precompile(Tuple{Type{Base.Dict{String, UnionAll}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{String, UnionAll}, Vararg{Base.Pair{String, UnionAll}, N} where N})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, UnionAll}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, UnionAll}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, UnionAll}, Type{T} where T, String})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:attributes,), Tuple{Base.Dict{Union{String, Symbol}, Any}}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Widgets.dropdown), Base.Dict{String, UnionAll}})
precompile(Tuple{getfield(Widgets, Symbol("##dropdown#42")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Widgets.dropdown), Base.Dict{String, UnionAll}})
precompile(Tuple{Type{Base.Dict{Union{String, Symbol}, Any}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Union{String, Symbol}, Any}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Union{String, Symbol}, Any}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{String, Symbol}, Any}, Bool, Symbol})
precompile(Tuple{getfield(InteractBase, Symbol("#initvalueindex##kw")), NamedTuple{(:multiple,), Tuple{Bool}}, typeof(InteractBase.initvalueindex), InteractBase.Automatic, Nothing, Observables.Observable{Any}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{String, Symbol}, Any}, String, Symbol})
precompile(Tuple{Type{Base.Dict{Union{String, Symbol}, Any}}, Base.Dict{Symbol, String}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Union{String, Symbol}, Any}, Base.Dict{Union{String, Symbol}, Any}})
precompile(Tuple{typeof(FunctionalCollections.push), FunctionalCollections.PersistentVector{Any}, WebIO.Node{WebIO.DOM}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.Dict{Union{String, Symbol}, Any}, Symbol})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Dict{Symbol, Base.Dict{Union{String, Symbol}, Any}}})
precompile(Tuple{Type{WebIO.Node{T} where T}, Symbol, Array{Any, 1}, Base.Dict{Symbol, Base.Dict{Union{String, Symbol}, Any}}})
precompile(Tuple{getfield(InteractBase, Symbol("##dropdown#133")), Base.Dict{Union{String, Symbol}, Any}, Nothing, Nothing, Bool, InteractBase.Automatic, Nothing, String, Base.Dict{Union{String, Symbol}, Any}, Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Widgets.dropdown), Interact.Bulma, Observables.Observable{Any}})
precompile(Tuple{typeof(Widgets.dropdown), Interact.Bulma, Base.Dict{String, UnionAll}})
precompile(Tuple{typeof(Base.map), Type{T} where T, Observables.Observable{Any}})
precompile(Tuple{typeof(Base.copyto!), Array{UnionAll, 1}, Base.ValueIterator{Base.Dict{String, UnionAll}}})
precompile(Tuple{Type{Base.Dict{UnionAll, Int64}}})
precompile(Tuple{Type{Base.Dict{UnionAll, Int64}}, Base.Iterators.Zip{Tuple{Array{UnionAll, 1}, Base.UnitRange{Int64}}}})
precompile(Tuple{Type{InteractBase.Vals2Idxs{T} where T}, Base.Dict{String, UnionAll}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{UnionAll, Int64}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{UnionAll, Int64}, Int64, Type{DynamicalBilliards.Particle{T} where T<:AbstractFloat}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{UnionAll, Int64}, Type{T} where T})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{UnionAll, Int64}, Int64, Type{BilharesMarkov.HyperBKParticle{T} where T<:AbstractFloat}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{UnionAll, Int64}, Int64, Type{BilharesMarkov.EllipticParticle{T} where T<:AbstractFloat}})
precompile(Tuple{typeof(Base.map!), Type{T} where T, Observables.Observable{Any}, Observables.Observable{Any}})
precompile(Tuple{getfield(Observables, Symbol("##map#31")), InteractBase.Vals2Idxs{UnionAll}, typeof(Base.map), Type{T} where T, Observables.Observable{Any}})
precompile(Tuple{Type{Observables.MapUpdater{F, T} where T where F}, Type{InteractBase.Vals2Idxs{T} where T}, Observables.Observable{Any}})
precompile(Tuple{typeof(Observables.onany), Function, Observables.Observable{Any}})
precompile(Tuple{Type{Observables.OnUpdate{F, Args} where Args where F}, Observables.MapUpdater{UnionAll, Any}, Tuple{Observables.Observable{Any}}})
precompile(Tuple{typeof(Observables.on), Function, Observables.Observable{Any}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{WeakRef, Any}, Observables.Observable{Any}})
precompile(Tuple{typeof(Base.lock), getfield(Base, Symbol("#493#494")){Base.WeakKeyDict{Any, Any}, Observables.Observable{Any}}, Base.ReentrantLock})
precompile(Tuple{typeof(Base.lock), getfield(Base, Symbol("#495#496")){Base.WeakKeyDict{Any, Any}, Observables.Observable{Any}}, Base.ReentrantLock})
precompile(Tuple{typeof(WebIO.setup_comm), Function, Observables.Observable{Any}})
precompile(Tuple{typeof(Base.first), InteractBase.Vals2Idxs{UnionAll}})
precompile(Tuple{getfield(InteractBase, Symbol("##valueindexpair#124")), Bool, Bool, typeof(InteractBase.valueindexpair), Observables.Observable{Any}, Observables.Observable{Any}})
precompile(Tuple{getfield(InteractBase, Symbol("##initvalueindex#131")), Bool, Type{T} where T, Bool, typeof(InteractBase.initvalueindex), InteractBase.Automatic, Nothing, Observables.Observable{Any}})
precompile(Tuple{Type{NamedTuple{(:f, :g), T} where T<:Tuple}, Tuple{getfield(InteractBase, Symbol("#125#128")){Observables.Observable{Any}, typeof(Base.get)}, getfield(InteractBase, Symbol("#126#129")){Observables.Observable{Any}}}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:f, :g), Tuple{getfield(InteractBase, Symbol("#125#128")){Observables.Observable{Any}, typeof(Base.get)}, getfield(InteractBase, Symbol("#126#129")){Observables.Observable{Any}}}}, Type{Observables.ObservablePair{S, T} where T where S}, Observables.Observable{Any}})
precompile(Tuple{getfield(Observables, Symbol("##ObservablePair#42")), getfield(InteractBase, Symbol("#125#128")){Observables.Observable{Any}, typeof(Base.get)}, Function, Type{Observables.ObservablePair{S, T} where T where S}, Observables.Observable{Any}})
precompile(Tuple{getfield(InteractBase, Symbol("#125#128")){Observables.Observable{Any}, typeof(Base.get)}, Type{T} where T})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{UnionAll, Int64}, Type{T} where T})
precompile(Tuple{typeof(Base.get), InteractBase.Vals2Idxs{UnionAll}, Type{T} where T})
precompile(Tuple{Type{Observables.Observable{Any}}, Int64})
precompile(Tuple{getfield(Observables, Symbol("#ObservablePair#36#39")), getfield(InteractBase, Symbol("#125#128")){Observables.Observable{Any}, typeof(Base.get)}, getfield(InteractBase, Symbol("#126#129")){Observables.Observable{Any}}, Type{Observables.ObservablePair{S, T} where T where S}, Observables.Observable{Any}, Observables.Observable{Any}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:f, :g), Tuple{getfield(InteractBase, Symbol("#125#128")){Observables.Observable{Any}, typeof(Base.get)}, getfield(InteractBase, Symbol("#126#129")){Observables.Observable{Any}}}}, Type{Observables.ObservablePair{S, T} where T where S}, Observables.Observable{Any}, Observables.Observable{Any}})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{Any}, WeakRef})
precompile(Tuple{typeof(Base.isequal), PyCall.PyObject, Observables.Observable{Any}})
precompile(Tuple{typeof(Base.:(==)), Observables.Observable{Any}, WeakRef})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{Any}, Observables.Observable{Int64}})
precompile(Tuple{typeof(Base.map), Function, Observables.Observable{Any}})
precompile(Tuple{getfield(InteractBase, Symbol("#118#119")){typeof(Base.string), Nothing}, Base.Dict{String, UnionAll}})
precompile(Tuple{typeof(Random.randstring), Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{String, Any}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{String, Any}, String, Int64})
precompile(Tuple{typeof(OrderedCollections.rehash!), OrderedCollections.OrderedDict{String, Any}, Int64})
precompile(Tuple{typeof(OrderedCollections.ht_keyindex2), OrderedCollections.OrderedDict{String, Any}, String})
precompile(Tuple{typeof(OrderedCollections._setindex!), OrderedCollections.OrderedDict{String, Any}, Int64, String, Int64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{String, Any}, Int64, String})
precompile(Tuple{typeof(OrderedCollections._setindex!), OrderedCollections.OrderedDict{String, Any}, String, String, Int64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{String, Any}, String, String})
precompile(Tuple{Type{OrderedCollections.OrderedDict{String, Any}}, Tuple{Base.Pair{String, String}, Base.Pair{String, Int64}, Base.Pair{String, String}}})
precompile(Tuple{getfield(InteractBase, Symbol("##_js_array#115")), Function, Nothing, typeof(InteractBase._js_array), Base.Dict{String, UnionAll}})
precompile(Tuple{typeof(Base.map!), Function, Observables.Observable{Any}, Observables.Observable{Any}})
precompile(Tuple{getfield(Observables, Symbol("##map#31")), Array{OrderedCollections.OrderedDict{K, V} where V where K, 1}, typeof(Base.map), Function, Observables.Observable{Any}})
precompile(Tuple{Type{Observables.MapUpdater{F, T} where T where F}, getfield(InteractBase, Symbol("#118#119")){typeof(Base.string), Nothing}, Observables.Observable{Any}})
precompile(Tuple{Type{Observables.OnUpdate{F, Args} where Args where F}, Observables.MapUpdater{getfield(InteractBase, Symbol("#118#119")){typeof(Base.string), Nothing}, Any}, Tuple{Observables.Observable{Any}}})
precompile(Tuple{getfield(InteractBase, Symbol("#134#135")), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(InteractBase.getclass), Symbol, Bool})
precompile(Tuple{typeof(InteractBase.getclass), Interact.Bulma, Symbol, Bool})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Pairs{Symbol, Base.Dict{Union{String, Symbol}, Any}, Tuple{Symbol}, NamedTuple{(:attributes,), Tuple{Base.Dict{Union{String, Symbol}, Any}}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Pairs{Symbol, Base.Dict{Union{String, Symbol}, Any}, Tuple{Symbol}, NamedTuple{(:attributes,), Tuple{Base.Dict{Union{String, Symbol}, Any}}}}, Int64})
precompile(Tuple{Type{Base.Dict{Symbol, Base.Dict{Union{String, Symbol}, Any}}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, Base.Dict{Union{String, Symbol}, Any}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, Base.Dict{Union{String, Symbol}, Any}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Base.Dict{Union{String, Symbol}, Any}}, Base.Dict{Union{String, Symbol}, Any}, Symbol})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{Symbol, Base.Dict{Union{String, Symbol}, Any}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Base.Dict{Union{String, Symbol}, Any}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Observables.Observable{Any}})
precompile(Tuple{typeof(WebIO.onjs), Observables.Observable{Any}, WebIO.JSString})
precompile(Tuple{typeof(JSExpr.jsexpr), Observables.Observable{Any}})
precompile(Tuple{getfield(Knockout, Symbol("##knockout#1")), Array{Any, 1}, Array{Base.Pair{String, WebIO.JSString}, 1}, typeof(Knockout.knockout), WebIO.Node{WebIO.DOM}, Array{Base.Pair{String, Observables.Observable{Any}}, 1}, WebIO.JSString})
precompile(Tuple{getfield(Knockout, Symbol("#knockout##kw")), NamedTuple{(:methods,), Tuple{Array{Base.Pair{String, WebIO.JSString}, 1}}}, typeof(Knockout.knockout), WebIO.Node{WebIO.DOM}, Array{Base.Pair{String, Observables.Observable{Any}}, 1}})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{Any}, Observables.Observable{Any}})
precompile(Tuple{typeof(Observables.listeners), Observables.Observable{Any}})
precompile(Tuple{getfield(WebIO, Symbol("#48#50")){WebIO.Scope}, Function})
precompile(Tuple{typeof(Observables.on), WebIO.SyncCallback, Observables.Observable{Any}})
precompile(Tuple{typeof(WebIO.setup_comm), WebIO.SyncCallback, Observables.Observable{Any}})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, WebIO.JSEvalSerialization, Tuple{WebIO.JSString}})
precompile(Tuple{typeof(WebIO.showjs), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{WebIO.JSString}})
precompile(Tuple{Type{NamedTuple{(:scope, :output, :layout), T} where T<:Tuple}, Tuple{WebIO.Scope, Observables.Observable{Any}, getfield(Base, Symbol("#64#65")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{WebIO.Scope, Observables.Observable{Any}, getfield(Base, Symbol("#64#65")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}}}})
precompile(Tuple{typeof(OrderedCollections._setindex!), OrderedCollections.OrderedDict{Symbol, Any}, Observables.Observable{Any}, Symbol, Int64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Symbol, Any}, Observables.Observable{Any}, Symbol})
precompile(Tuple{Type{OrderedCollections.OrderedDict{Symbol, Any}}, Base.Generator{Array{Base.Pair{String, Observables.Observable{Any}}, 1}, getfield(Widgets, Symbol("#4#5"))}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:scope, :output, :layout), Tuple{WebIO.Scope, Observables.Observable{Any}, getfield(Base, Symbol("#64#65")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}}}, Type{Widgets.Widget{:dropdown, S} where S}, OrderedCollections.OrderedDict{Symbol, Any}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:scope, :output, :layout), Tuple{WebIO.Scope, Observables.Observable{Any}, getfield(Base, Symbol("#64#65")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}}}, Type{Widgets.Widget{:dropdown, S} where S}, Array{Base.Pair{String, Observables.Observable{Any}}, 1}})
precompile(Tuple{getfield(Widgets, Symbol("#_#1#2")), Observables.Observable{Any}, WebIO.Scope, Function, Type{Widgets.Widget{:dropdown, S} where S}, OrderedCollections.OrderedDict{Symbol, Any}})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{Any}, Tuple{Widgets.Widget{:dropdown, Any}, Bool}})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{Any}, Tuple{Widgets.Widget{:dropdown, Any}, Bool}})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{Widgets.Widget{:dropdown, Any}, Bool}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Widgets.Widget{:dropdown, Any}, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Widgets.Widget{:dropdown, Any}, Bool}, Int64, Int64})
precompile(Tuple{typeof(Widgets.render), Widgets.Widget{:dropdown, Any}})
precompile(Tuple{typeof(Base.Multimedia.display), Widgets.Widget{:dropdown, Any}})
precompile(Tuple{getfield(Base, Symbol("#64#65")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}, Widgets.Widget{:dropdown, Any}})
precompile(Tuple{typeof(Base.repr), Base.Dict{Union{String, Symbol}, Any}})
precompile(Tuple{getfield(Base, Symbol("##sprint#338")), Nothing, Int64, typeof(Base.sprint), Function, Base.Dict{Union{String, Symbol}, Any}})
precompile(Tuple{typeof(Base.has_tight_type), Base.Pair{Union{String, Symbol}, Any}})
precompile(Tuple{typeof(Base.isdelimited), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Pair{Union{String, Symbol}, Any}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Pair{Union{String, Symbol}, Any}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{Union{String, Symbol}, Any}})
precompile(Tuple{Type{Base.Pair{Union{String, Symbol}, Any}}, Any, Any})
precompile(Tuple{typeof(Base.convert), Type{Union{String, Symbol}}, Symbol})
precompile(Tuple{Type{Base.Pair{Union, DataType}}, Any, Any})
precompile(Tuple{typeof(Base.convert), Type{Union}, Type{Union{String, Symbol}}})
precompile(Tuple{Type{Base.Pair{Symbol, Union}}, Any, Any})
precompile(Tuple{Type{Base.Pair{String, typeof(Main.mush)}}, Any, Any})
precompile(Tuple{Type{Base.Pair{String, typeof(Main.pol)}}, Any, Any})
precompile(Tuple{Type{Base.Pair{String, typeof(Main.sinai)}}, Any, Any})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{String, typeof(Main.mush)}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, typeof(Main.mush)}, Base.Pair{String, typeof(Main.pol)}, Base.Pair{String, typeof(Main.sinai)}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{String, typeof(Main.mush)}, Base.Pair{String, typeof(Main.pol)}, Base.Pair{String, typeof(Main.sinai)}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, typeof(Main.mush)}, Base.Pair{String, typeof(Main.pol)}, Base.Pair{String, typeof(Main.sinai)}}})
precompile(Tuple{Type{Base.Dict{String, typeof(Main.mush)}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{String}, Type{typeof(Main.mush)}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, typeof(Main.mush)}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, typeof(Main.mush)}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, typeof(Main.mush)}, Function, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, typeof(Main.mush)}, Tuple{Base.Pair{String, typeof(Main.mush)}, Base.Pair{String, typeof(Main.pol)}, Base.Pair{String, typeof(Main.sinai)}}, Int64})
precompile(Tuple{Type{Base.Dict{String, Function}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{String, typeof(Main.mush)}, Type{String}, Type{Function}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, Function}, Base.Dict{String, typeof(Main.mush)}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, Function}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, Function}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Function}, Function, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Function}, Tuple{Base.Pair{String, typeof(Main.mush)}, Base.Pair{String, typeof(Main.pol)}, Base.Pair{String, typeof(Main.sinai)}}, Int64})
precompile(Tuple{typeof(Widgets.dropdown), Base.Dict{String, Function}})
precompile(Tuple{getfield(Widgets, Symbol("##dropdown#42")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Widgets.dropdown), Base.Dict{String, Function}})
precompile(Tuple{typeof(Widgets.dropdown), Interact.Bulma, Base.Dict{String, Function}})
precompile(Tuple{typeof(Base.copyto!), Array{Function, 1}, Base.ValueIterator{Base.Dict{String, Function}}})
precompile(Tuple{Type{Base.Dict{Function, Int64}}})
precompile(Tuple{Type{Base.Dict{Function, Int64}}, Base.Iterators.Zip{Tuple{Array{Function, 1}, Base.UnitRange{Int64}}}})
precompile(Tuple{Type{InteractBase.Vals2Idxs{T} where T}, Base.Dict{String, Function}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Function, Int64}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Function, Int64}, Function})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Function, Int64}, Int64, typeof(Main.sinai)})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Function, Int64}, Int64, typeof(Main.mush)})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Function, Int64}, Int64, typeof(Main.pol)})
precompile(Tuple{getfield(Observables, Symbol("##map#31")), InteractBase.Vals2Idxs{Function}, typeof(Base.map), Type{T} where T, Observables.Observable{Any}})
precompile(Tuple{typeof(Base.first), InteractBase.Vals2Idxs{Function}})
precompile(Tuple{getfield(InteractBase, Symbol("##initvalueindex#131")), Bool, Function, Bool, typeof(InteractBase.initvalueindex), InteractBase.Automatic, Nothing, Observables.Observable{Any}})
precompile(Tuple{getfield(InteractBase, Symbol("#125#128")){Observables.Observable{Any}, typeof(Base.get)}, Function})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Function, Int64}, Function})
precompile(Tuple{typeof(Base.get), InteractBase.Vals2Idxs{Function}, Function})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{Any}, Observables.Observable{Union{Nothing, Int64}}})
precompile(Tuple{getfield(InteractBase, Symbol("#118#119")){typeof(Base.string), Nothing}, Base.Dict{String, Function}})
precompile(Tuple{getfield(InteractBase, Symbol("##_js_array#115")), Function, Nothing, typeof(InteractBase._js_array), Base.Dict{String, Function}})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{Any}, Tuple{typeof(Main.bil_ui), Bool}})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{Any}, Tuple{typeof(Main.bil_ui), Bool}})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{typeof(Main.bil_ui), Bool}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{typeof(Main.bil_ui), Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{typeof(Main.bil_ui), Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol, Symbol}, Tuple{}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:className, :attributes, :style), Tuple{String, Base.Dict{Any, Any}, Base.Dict{String, Any}}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Base.Dict{Any, Any}, Base.Dict{String, Any}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{WebIO.Scope, Observables.Observable{Int64}, getfield(Base, Symbol("#64#65")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}}}})
precompile(Tuple{getfield(Widgets, Symbol("#button##kw")), NamedTuple{(:label,), Tuple{String}}, typeof(Widgets.button)})
precompile(Tuple{getfield(Widgets, Symbol("##button#54")), Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:label,), Tuple{String}}}, typeof(Widgets.button)})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Dict{String, String}})
precompile(Tuple{getfield(WebIO, Symbol("##Node#25")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:className, :attributes, :style), Tuple{String, Base.Dict{Any, Any}, Base.Dict{String, Any}}}}, Type{WebIO.Node{T} where T}, Symbol, String})
precompile(Tuple{getfield(Knockout, Symbol("##knockout#1")), Array{Any, 1}, Array{Any, 1}, typeof(Knockout.knockout), WebIO.Node{WebIO.DOM}, Array{Base.Pair{String, Observables.Observable{T} where T}, 1}, WebIO.JSString})
precompile(Tuple{typeof(Knockout.knockout), WebIO.Node{WebIO.DOM}, Array{Base.Pair{String, Observables.Observable{T} where T}, 1}})
precompile(Tuple{typeof(OrderedCollections._setindex!), OrderedCollections.OrderedDict{Symbol, Any}, Observables.Observable{Bool}, Symbol, Int64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Symbol, Any}, Observables.Observable{Bool}, Symbol})
precompile(Tuple{Type{OrderedCollections.OrderedDict{Symbol, Any}}, Base.Generator{Array{Base.Pair{String, Observables.Observable{Bool}}, 1}, getfield(Widgets, Symbol("#4#5"))}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:scope, :output, :layout), Tuple{WebIO.Scope, Observables.Observable{Int64}, getfield(Base, Symbol("#64#65")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}}}, Type{Widgets.Widget{:button, S} where S}, OrderedCollections.OrderedDict{Symbol, Any}})
precompile(Tuple{getfield(InteractBase, Symbol("##button#55")), String, Int64, Base.Dict{String, Any}, String, Base.Dict{Any, Any}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Widgets.button), Interact.Bulma})
precompile(Tuple{getfield(Widgets, Symbol("#button##kw")), NamedTuple{(:label,), Tuple{String}}, typeof(Widgets.button), Interact.Bulma})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:className, :attributes, :style), Tuple{String, Base.Dict{Any, Any}, Base.Dict{String, Any}}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:className, :attributes, :style), Tuple{String, Base.Dict{Any, Any}, Base.Dict{String, Any}}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, Any}}, Any, Any})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Tuple{Base.Pair{Symbol, Any}, Base.Pair{Symbol, Any}, Base.Pair{Symbol, Any}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.Dict{String, Any}, Symbol})
precompile(Tuple{typeof(Base.vect), Base.Pair{String, Observables.Observable{Int64}}, Vararg{Any, N} where N})
precompile(Tuple{Type{Array{Base.Pair{String, Observables.Observable{T} where T}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Pair{String, Observables.Observable{T} where T}, 1}, Tuple{Base.Pair{String, Observables.Observable{Int64}}, Base.Pair{String, Observables.Observable{Bool}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Tuple{Observables.AbstractObservable{T} where T, Union{Nothing, Bool}}}, Tuple{Observables.Observable{Bool}, Nothing}, String})
precompile(Tuple{typeof(Base.lock), getfield(Base, Symbol("#473#474")){Base.WeakKeyDict{Any, Any}, Tuple{WeakRef, String}, Observables.Observable{Bool}}, Base.ReentrantLock})
precompile(Tuple{getfield(WebIO, Symbol("##setobservable!#37")), Nothing, typeof(WebIO.setobservable!), WebIO.Scope, String, Observables.Observable{Bool}})
precompile(Tuple{typeof(WebIO.setobservable!), WebIO.Scope, String, Observables.Observable{Bool}})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{Bool}, Observables.Observable{Union{Nothing, Int64}}})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{Bool}, Observables.Observable{Any}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{WeakRef, Any}, Observables.Observable{Bool}})
precompile(Tuple{typeof(Base.lock), getfield(Base, Symbol("#493#494")){Base.WeakKeyDict{Any, Any}, Observables.Observable{Bool}}, Base.ReentrantLock})
precompile(Tuple{typeof(Base.lock), getfield(Base, Symbol("#495#496")){Base.WeakKeyDict{Any, Any}, Observables.Observable{Bool}}, Base.ReentrantLock})
precompile(Tuple{typeof(WebIO.onjs), Observables.Observable{Bool}, WebIO.JSString})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{Bool}, WeakRef})
precompile(Tuple{typeof(Base.isequal), PyCall.PyObject, Observables.Observable{Bool}})
precompile(Tuple{typeof(Base.:(==)), Observables.Observable{Bool}, WeakRef})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{Bool}, Observables.Observable{Bool}})
precompile(Tuple{typeof(Observables.listeners), Observables.Observable{Bool}})
precompile(Tuple{typeof(Observables.on), WebIO.SyncCallback, Observables.Observable{Bool}})
precompile(Tuple{typeof(WebIO.setup_comm), WebIO.SyncCallback, Observables.Observable{Bool}})
precompile(Tuple{typeof(JSExpr.jsexpr), Observables.Observable{Bool}})
precompile(Tuple{getfield(Widgets, Symbol("#_#1#2")), Observables.Observable{Int64}, WebIO.Scope, Function, Type{Widgets.Widget{:button, S} where S}, OrderedCollections.OrderedDict{Symbol, Any}})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{Any}, Tuple{Widgets.Widget{:button, Int64}, Bool}})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{Any}, Tuple{Widgets.Widget{:button, Int64}, Bool}})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{Widgets.Widget{:button, Int64}, Bool}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Widgets.Widget{:button, Int64}, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Widgets.Widget{:button, Int64}, Bool}, Int64, Int64})
precompile(Tuple{typeof(Widgets.render), Widgets.Widget{:button, Int64}})
precompile(Tuple{typeof(Base.Multimedia.display), Widgets.Widget{:button, Int64}})
precompile(Tuple{getfield(Base, Symbol("#64#65")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}, Widgets.Widget{:button, Int64}})
precompile(Tuple{typeof(Base.repr), Base.Dict{String, Any}})
precompile(Tuple{getfield(Base, Symbol("##sprint#338")), Nothing, Int64, typeof(Base.sprint), Function, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.isdelimited), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Pair{String, Any}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Pair{String, Any}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, Any}})
precompile(Tuple{typeof(PyCall.pygui), Bool})
precompile(Tuple{typeof(Base.:(!=)), Bool, Bool})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{Any}, Tuple{Bool, Bool}})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{Any}, Tuple{Bool, Bool}})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{Bool, Bool}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Multimedia.MIME{Symbol("text/plain")}, Bool})
precompile(Tuple{typeof(Base.getproperty), PyCall.PyObject, Symbol})
precompile(Tuple{Type{NamedTuple{(:width_ratios,), T} where T<:Tuple}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Int64, Int64}, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Int64, Int64}, Int64, PyCall.PyObject})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{AbstractString, Any}, Array{Int64, 1}, String})
precompile(Tuple{Type{Base.Dict{AbstractString, Any}}, Array{Base.Pair{String, Array{Int64, 1}}, 1}})
precompile(Tuple{Type{PyCall.PyObject}, Base.Dict{AbstractString, Any}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{String, Array{Int64, 1}}, 1}, Base.Pair{String, Array{Int64, 1}}, Base.Generator{Base.Iterators.Pairs{Symbol, Array{Int64, 1}, Tuple{Symbol}, NamedTuple{(:width_ratios,), Tuple{Array{Int64, 1}}}}, getfield(PyCall, Symbol("#108#109"))}, Int64})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Int64, Int64}, Base.Iterators.Pairs{Symbol, Array{Int64, 1}, Tuple{Symbol}, NamedTuple{(:width_ratios,), Tuple{Array{Int64, 1}}}}})
precompile(Tuple{getfield(Core, Symbol("#Any##kw")), NamedTuple{(:width_ratios,), Tuple{Array{Int64, 1}}}, PyCall.PyObject, Int64, Int64})
precompile(Tuple{typeof(Base.allocatedinline), Type{PyCall.PyMethodDef}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, Ptr{Nothing}}, Symbol})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(*)), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Ptr{PyCall.PyObject_struct}, Any}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Ptr{PyCall.PyObject_struct}, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base._delete!), Base.Dict{Ptr{PyCall.PyObject_struct}, Any}, Int64})
precompile(Tuple{typeof(PyCall.weakref_callback), Ptr{PyCall.PyObject_struct}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{Type{PyCall.PyMethodDef}, String, Ptr{Nothing}, UInt16, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Ptr{PyCall.PyObject_struct}, Any}, Array{Int64, 1}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyembed), PyCall.PyObject, Array{Int64, 1}})
precompile(Tuple{typeof(PyCall.npyinitialize)})
precompile(Tuple{typeof(PyCall.NpyArray), Array{Int64, 1}, Bool})
precompile(Tuple{typeof(PyCall.array2py), Array{Int64, 1}, Int64, Base.IteratorsMD.CartesianIndex{1}})
precompile(Tuple{Type{PyCall.PyObject}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{PyCall.PyObject_struct}}, PyCall.PyObject})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{Any}, Tuple{PyCall.PyObject, Bool}})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{Any}, Tuple{PyCall.PyObject, Bool}})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{PyCall.PyObject, Bool}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{PyCall.PyObject, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{PyCall.PyObject, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(Base.print_to_string), Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pystring), PyCall.PyObject})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Multimedia.MIME{Symbol("text/plain")}, PyCall.PyObject})
precompile(Tuple{typeof(Base.getindex), Widgets.Widget{:dropdown, Any}})
precompile(Tuple{typeof(Base.map), Function, Widgets.Widget{:dropdown, Any}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:value, :min, :max, :step), Tuple{Float64, Float64, Float64, Float64}}}, Type{NamedTuple{(:label,), Tuple{String}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Float64, Float64, Float64, String}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:isnumeric, :placeholder, :typ), Tuple{Bool, String, String}}}, Type{NamedTuple{(:min, :max, :step, :label), Tuple{Float64, Float64, Float64, String}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, String, String, Float64, Float64, Float64, String}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:className, :attributes, :style), Tuple{String, Base.Dict{Any, Any}, Base.Dict{Any, Any}}}}, Type{NamedTuple{(:placeholder, :min, :max, :step), Tuple{String, Float64, Float64, Float64}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Base.Dict{Any, Any}, Base.Dict{Any, Any}, String, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Float64, String}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{WebIO.Node{WebIO.DOM}, 1}}})
precompile(Tuple{typeof(Base.close), String})
precompile(Tuple{Type{Base.Dict{Char, Bool}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Char, Bool}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Char, Bool}, Char})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Char, Bool}, Bool, Char})
precompile(Tuple{typeof(Base.rat), Float64})
precompile(Tuple{typeof(Base.lcm_unchecked), Int64, Int64})
precompile(Tuple{Type{Base.TwicePrecision{Float64}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.floatrange), Type{Float64}, Int64, Int64, Int64, Int64})
precompile(Tuple{Base.Colon, Float64, Float64, Float64})
precompile(Tuple{getfield(Main, Symbol("#5#10")), Type{T} where T})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{AbstractString, Any}, Tuple{Int64, Int64}, String})
precompile(Tuple{Type{Base.Dict{AbstractString, Any}}, Array{Base.Pair{String, Tuple{Int64, Int64}}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{String, Tuple{Int64, Int64}}, 1}, Base.Pair{String, Tuple{Int64, Int64}}, Base.Generator{Base.Iterators.Pairs{Symbol, Tuple{Int64, Int64}, Tuple{Symbol}, NamedTuple{(:figsize,), Tuple{Tuple{Int64, Int64}}}}, getfield(PyCall, Symbol("#108#109"))}, Int64})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{}, Base.Iterators.Pairs{Symbol, Tuple{Int64, Int64}, Tuple{Symbol}, NamedTuple{(:figsize,), Tuple{Tuple{Int64, Int64}}}}})
precompile(Tuple{getfield(PyPlot, Symbol("#figure##kw")), NamedTuple{(:figsize,), Tuple{Tuple{Int64, Int64}}}, typeof(PyPlot.figure)})
precompile(Tuple{Type{PyCall.PyObject}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.convert), Type{PyPlot.Figure}, PyCall.PyObject})
precompile(Tuple{getfield(Widgets, Symbol("#togglebuttons##kw")), NamedTuple{(:label,), Tuple{String}}, typeof(Widgets.togglebuttons), Base.Dict{Char, Bool}})
precompile(Tuple{getfield(Widgets, Symbol("##togglebuttons#70")), Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:label,), Tuple{String}}}, typeof(Widgets.togglebuttons), Base.Dict{Char, Bool}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.Dict{String, String}, Symbol})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Dict{Symbol, Base.Dict{String, String}}})
precompile(Tuple{Type{WebIO.Node{T} where T}, Symbol, Array{Any, 1}, Base.Dict{Symbol, Base.Dict{String, String}}})
precompile(Tuple{getfield(WebIO, Symbol("##Node#25")), Base.Iterators.Pairs{Symbol, Base.Dict{String, String}, Tuple{Symbol}, NamedTuple{(:attributes,), Tuple{Base.Dict{String, String}}}}, Type{WebIO.Node{T} where T}, Symbol, WebIO.Node{WebIO.DOM}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Base.Pair{String, String}, Symbol})
precompile(Tuple{typeof(WebIO.mergeprops), WebIO.Node{WebIO.DOM}, Base.Iterators.Pairs{Symbol, Base.Pair{String, String}, Tuple{Symbol}, NamedTuple{(:attributes,), Tuple{Base.Pair{String, String}}}}})
precompile(Tuple{Type{Base.Dict{String, WebIO.JSString}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, WebIO.JSString}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, WebIO.JSString}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, WebIO.JSString}, WebIO.JSString, String})
precompile(Tuple{getfield(InteractBase, Symbol("##togglebuttons#144")), String, String, Bool, Nothing, InteractBase.Automatic, WebIO.Node{WebIO.DOM}, typeof(Base.identity), String, Bool, Measures.Length{:em, Float64}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Widgets.togglebuttons), Interact.Bulma, Observables.Observable{Base.Dict{Char, Bool}}})
precompile(Tuple{getfield(Widgets, Symbol("#togglebuttons##kw")), NamedTuple{(:label,), Tuple{String}}, typeof(Widgets.togglebuttons), Interact.Bulma, Observables.Observable{Base.Dict{Char, Bool}}})
precompile(Tuple{getfield(Widgets, Symbol("#togglebuttons##kw")), NamedTuple{(:label,), Tuple{String}}, typeof(Widgets.togglebuttons), Interact.Bulma, Base.Dict{Char, Bool}})
precompile(Tuple{typeof(Base.map), Type{T} where T, Observables.Observable{Base.Dict{Char, Bool}}})
precompile(Tuple{typeof(Base.copyto!), Array{Bool, 1}, Base.ValueIterator{Base.Dict{Char, Bool}}})
precompile(Tuple{Type{Base.Dict{Bool, Int64}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Bool, Int64}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Bool, Int64}, Bool})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Bool, Int64}, Int64, Bool})
precompile(Tuple{Type{Base.Dict{Bool, Int64}}, Base.Iterators.Zip{Tuple{Array{Bool, 1}, Base.UnitRange{Int64}}}})
precompile(Tuple{Type{InteractBase.Vals2Idxs{T} where T}, Base.Dict{Char, Bool}})
precompile(Tuple{typeof(Base.map!), Type{T} where T, Observables.Observable{Any}, Observables.Observable{Base.Dict{Char, Bool}}})
precompile(Tuple{getfield(Observables, Symbol("##map#31")), InteractBase.Vals2Idxs{Bool}, typeof(Base.map), Type{T} where T, Observables.Observable{Base.Dict{Char, Bool}}})
precompile(Tuple{typeof(Observables.onany), Function, Observables.Observable{Base.Dict{Char, Bool}}})
precompile(Tuple{Type{Observables.OnUpdate{F, Args} where Args where F}, Observables.MapUpdater{UnionAll, Any}, Tuple{Observables.Observable{Base.Dict{Char, Bool}}}})
precompile(Tuple{typeof(Observables.on), Function, Observables.Observable{Base.Dict{Char, Bool}}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{WeakRef, Any}, Observables.Observable{Base.Dict{Char, Bool}}})
precompile(Tuple{typeof(Base.lock), getfield(Base, Symbol("#493#494")){Base.WeakKeyDict{Any, Any}, Observables.Observable{Base.Dict{Char, Bool}}}, Base.ReentrantLock})
precompile(Tuple{typeof(Base.lock), getfield(Base, Symbol("#495#496")){Base.WeakKeyDict{Any, Any}, Observables.Observable{Base.Dict{Char, Bool}}}, Base.ReentrantLock})
precompile(Tuple{typeof(WebIO.setup_comm), Function, Observables.Observable{Base.Dict{Char, Bool}}})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{Base.Dict{Char, Bool}}, WeakRef})
precompile(Tuple{typeof(Base.isequal), PyCall.PyObject, Observables.Observable{Base.Dict{Char, Bool}}})
precompile(Tuple{typeof(Base.:(==)), Observables.Observable{Base.Dict{Char, Bool}}, WeakRef})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{Base.Dict{Char, Bool}}, Observables.Observable{Int64}})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{Base.Dict{Char, Bool}}, Observables.Observable{Any}})
precompile(Tuple{typeof(Base.first), InteractBase.Vals2Idxs{Bool}})
precompile(Tuple{getfield(InteractBase, Symbol("##initvalueindex#131")), Bool, Bool, Bool, typeof(InteractBase.initvalueindex), InteractBase.Automatic, Nothing, Observables.Observable{Any}})
precompile(Tuple{typeof(Base.get), PyCall.PyObject, Type{PyCall.PyAny}, Bool})
precompile(Tuple{getfield(InteractBase, Symbol("#125#128")){Observables.Observable{Any}, typeof(Base.get)}, Bool})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Bool, Int64}, Bool})
precompile(Tuple{typeof(Base.get), InteractBase.Vals2Idxs{Bool}, Bool})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{Any}, Observables.Observable{Bool}})
precompile(Tuple{getfield(Base, Symbol("##sprint#338")), Nothing, Int64, typeof(Base.sprint), Function, Tuple{String, String, String}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{String, String, String}, Char})
precompile(Tuple{getfield(InteractBase, Symbol("#146#150")), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Pairs{Symbol, Base.Dict{String, String}, Tuple{Symbol}, NamedTuple{(:attributes,), Tuple{Base.Dict{String, String}}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Pairs{Symbol, Base.Dict{String, String}, Tuple{Symbol}, NamedTuple{(:attributes,), Tuple{Base.Dict{String, String}}}}, Int64})
precompile(Tuple{Type{Base.Dict{Symbol, Base.Dict{String, String}}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, Base.Dict{String, String}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, Base.Dict{String, String}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Base.Dict{String, String}}, Base.Dict{String, String}, Symbol})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{Symbol, Base.Dict{String, String}}})
precompile(Tuple{typeof(Base.map), Function, Observables.Observable{Base.Dict{Char, Bool}}})
precompile(Tuple{getfield(InteractBase, Symbol("#118#119")){typeof(Base.string), Nothing}, Base.Dict{Char, Bool}})
precompile(Tuple{Type{OrderedCollections.OrderedDict{String, Any}}, Tuple{Base.Pair{String, Char}, Base.Pair{String, Int64}, Base.Pair{String, String}}})
precompile(Tuple{getfield(InteractBase, Symbol("##_js_array#115")), Function, Nothing, typeof(InteractBase._js_array), Base.Dict{Char, Bool}})
precompile(Tuple{typeof(OrderedCollections._setindex!), OrderedCollections.OrderedDict{String, Any}, Char, String, Int64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{String, Any}, Char, String})
precompile(Tuple{typeof(Base.map!), Function, Observables.Observable{Any}, Observables.Observable{Base.Dict{Char, Bool}}})
precompile(Tuple{getfield(Observables, Symbol("##map#31")), Array{OrderedCollections.OrderedDict{K, V} where V where K, 1}, typeof(Base.map), Function, Observables.Observable{Base.Dict{Char, Bool}}})
precompile(Tuple{Type{Observables.OnUpdate{F, Args} where Args where F}, Observables.MapUpdater{getfield(InteractBase, Symbol("#118#119")){typeof(Base.string), Nothing}, Any}, Tuple{Observables.Observable{Base.Dict{Char, Bool}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.Pair{String, String}, Symbol})
precompile(Tuple{getfield(Knockout, Symbol("##knockout#1")), Array{Any, 1}, Base.Dict{String, WebIO.JSString}, typeof(Knockout.knockout), WebIO.Node{WebIO.DOM}, Array{Base.Pair{String, Observables.Observable{Any}}, 1}, WebIO.JSString})
precompile(Tuple{getfield(Knockout, Symbol("#knockout##kw")), NamedTuple{(:methods,), Tuple{Base.Dict{String, WebIO.JSString}}}, typeof(Knockout.knockout), WebIO.Node{WebIO.DOM}, Array{Base.Pair{String, Observables.Observable{Any}}, 1}})
precompile(Tuple{typeof(Base.vect), Base.Pair{String, Observables.Observable{Base.Dict{Char, Bool}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.Pair{String, Observables.Observable{Base.Dict{Char, Bool}}}, Base.Pair{String, Observables.Observable{Any}}, Vararg{Base.Pair{String, Observables.Observable{Any}}, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.Pair{String, Observables.Observable{Any}}, Base.Pair{String, Observables.Observable{Any}}})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Pair{String, Observables.Observable{T} where T}, 1}, Tuple{Base.Pair{String, Observables.Observable{Base.Dict{Char, Bool}}}, Base.Pair{String, Observables.Observable{Any}}, Base.Pair{String, Observables.Observable{Any}}}})
precompile(Tuple{Type{NamedTuple{(:scope, :output, :layout), T} where T<:Tuple}, Tuple{WebIO.Scope, Observables.Observable{Any}, getfield(InteractBase, Symbol("#147#151"))}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{WebIO.Scope, Observables.Observable{Any}, getfield(InteractBase, Symbol("#147#151"))}}})
precompile(Tuple{getfield(Widgets, Symbol("#4#5")), Base.Pair{String, Observables.Observable{T} where T}})
precompile(Tuple{Type{OrderedCollections.OrderedDict{Symbol, Any}}, Base.Generator{Array{Base.Pair{String, Observables.Observable{T} where T}, 1}, getfield(Widgets, Symbol("#4#5"))}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:scope, :output, :layout), Tuple{WebIO.Scope, Observables.Observable{Any}, getfield(InteractBase, Symbol("#147#151"))}}, Type{Widgets.Widget{:togglebuttons, S} where S}, OrderedCollections.OrderedDict{Symbol, Any}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:scope, :output, :layout), Tuple{WebIO.Scope, Observables.Observable{Any}, getfield(InteractBase, Symbol("#147#151"))}}, Type{Widgets.Widget{:togglebuttons, S} where S}, Array{Base.Pair{String, Observables.Observable{T} where T}, 1}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Observables.Observable{Base.Dict{Char, Bool}}})
precompile(Tuple{typeof(OrderedCollections._setindex!), OrderedCollections.OrderedDict{Symbol, Any}, Observables.Observable{Base.Dict{Char, Bool}}, Symbol, Int64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Symbol, Any}, Observables.Observable{Base.Dict{Char, Bool}}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Observables.Observable{Any}})
precompile(Tuple{getfield(Widgets, Symbol("#_#1#2")), Observables.Observable{Any}, WebIO.Scope, Function, Type{Widgets.Widget{:togglebuttons, S} where S}, OrderedCollections.OrderedDict{Symbol, Any}})
precompile(Tuple{getfield(Widgets, Symbol("#slider##kw")), NamedTuple{(:label,), Tuple{String}}, typeof(Widgets.slider), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{getfield(Widgets, Symbol("##slider#56")), Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:label,), Tuple{String}}}, typeof(Widgets.slider), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Ptr{PyCall.PyObject_struct}, Any}, Type{T} where T, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyjlwrap_new), PyCall.PyTypeObject, Type{T} where T})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Float64, Bool, Bool})
precompile(Tuple{typeof(Base.throw_boundserror), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(InteractBase.format), Tuple{Base.Broadcast.Extruded{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{getfield(Widgets, Symbol("#slider##kw")), NamedTuple{(:label,), Tuple{String}}, typeof(Widgets.slider), Interact.Bulma, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{getfield(Widgets, Symbol("#slider##kw")), NamedTuple{(:label,), Tuple{String}}, typeof(Widgets.slider), Interact.Bulma, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{String, 1}})
precompile(Tuple{getfield(InteractBase, Symbol("##slider#74")), Float64, Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:label,), Tuple{String}}}, typeof(Widgets.slider), Interact.Bulma, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{String, 1}})
precompile(Tuple{Type{Observables.Observable{Float64}}, Float64})
precompile(Tuple{typeof(Base.vec), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.axes), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:f, :g), Tuple{getfield(InteractBase, Symbol("#75#78")), getfield(InteractBase, Symbol("#77#80"))}}, Type{Observables.ObservablePair{S, T} where T where S}, Observables.Observable{Float64}})
precompile(Tuple{getfield(InteractBase, Symbol("#76#79")), Float64})
precompile(Tuple{getfield(Observables, Symbol("##ObservablePair#42")), getfield(InteractBase, Symbol("#75#78")), Function, Type{Observables.ObservablePair{S, T} where T where S}, Observables.Observable{Float64}})
precompile(Tuple{typeof(Base.Sort.searchsortedfirst), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Float64, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.Sort.searchsortedfirst), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Float64, Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}})
precompile(Tuple{typeof(InteractBase._searchsortedfirst), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Float64})
precompile(Tuple{Type{NamedTuple{(:f, :g), T} where T<:Tuple}, Tuple{getfield(InteractBase, Symbol("#75#78")), getfield(InteractBase, Symbol("#77#80"))}})
precompile(Tuple{getfield(Observables, Symbol("#ObservablePair#36#39")), getfield(InteractBase, Symbol("#75#78")), getfield(InteractBase, Symbol("#77#80")), Type{Observables.ObservablePair{S, T} where T where S}, Observables.Observable{Float64}, Observables.Observable{Any}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:f, :g), Tuple{getfield(InteractBase, Symbol("#75#78")), getfield(InteractBase, Symbol("#77#80"))}}, Type{Observables.ObservablePair{S, T} where T where S}, Observables.Observable{Float64}, Observables.Observable{Any}})
precompile(Tuple{typeof(Observables.on), Function, Observables.Observable{Float64}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{WeakRef, Any}, Observables.Observable{Float64}})
precompile(Tuple{typeof(Base.lock), getfield(Base, Symbol("#493#494")){Base.WeakKeyDict{Any, Any}, Observables.Observable{Float64}}, Base.ReentrantLock})
precompile(Tuple{typeof(Base.lock), getfield(Base, Symbol("#495#496")){Base.WeakKeyDict{Any, Any}, Observables.Observable{Float64}}, Base.ReentrantLock})
precompile(Tuple{typeof(WebIO.setup_comm), Function, Observables.Observable{Float64}})
precompile(Tuple{Type{NamedTuple{(:value,), T} where T<:Tuple}, Tuple{Observables.Observable{Any}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:value,), Tuple{Observables.Observable{Any}}}}, Type{NamedTuple{(:label,), Tuple{String}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:value,), Tuple{Observables.Observable{Any}}}, Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:label,), Tuple{String}}}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:bindto, :attributes, :extra_obs, :computed, :typ, :min, :max, :step, :className), Tuple{String, Base.Dict{Any, Any}, Array{Base.Pair{String, Array{String, 1}}, 1}, Array{Base.Pair{String, WebIO.JSString}, 1}, String, Int64, Int64, Int64, String}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Base.Dict{Any, Any}, Array{Base.Pair{String, Array{String, 1}}, 1}, Array{Base.Pair{String, WebIO.JSString}, 1}, String, Int64, Int64, Int64, String}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:className, :attributes, :style), Tuple{String, Base.Dict{Any, Any}, Base.Dict{Any, Any}}}}, Type{NamedTuple{(:min, :max, :step), Tuple{Int64, Int64, Int64}}}})
precompile(Tuple{typeof(Base.sym_in), Symbol, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Base.Dict{Any, Any}, Base.Dict{Any, Any}, Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Any, Any}, Base.Dict{String, String}})
precompile(Tuple{typeof(CSSUtil.container), Array{Any, 1}})
precompile(Tuple{typeof(CSSUtil.style), Base.Pair{String, String}, Base.Pair{String, String}})
precompile(Tuple{typeof(CSSUtil.vbox), Array{Any, 1}})
precompile(Tuple{typeof(CSSUtil.container), Array{WebIO.Node{WebIO.DOM}, 1}})
precompile(Tuple{typeof(CSSUtil.hbox), Array{WebIO.Node{WebIO.DOM}, 1}})
precompile(Tuple{typeof(CSSUtil.hbox), WebIO.Node{WebIO.DOM}, WebIO.Node{WebIO.DOM}})
precompile(Tuple{getfield(InteractBase, Symbol("##slider#81")), String, Bool, String, Observables.Observable{Any}, String, Base.Dict{Any, Any}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Widgets.slider), Interact.Bulma, Base.OneTo{Int64}, Array{String, 1}})
precompile(Tuple{getfield(Widgets, Symbol("#slider##kw")), NamedTuple{(:value, :label), Tuple{Observables.Observable{Any}, String}}, typeof(Widgets.slider), Interact.Bulma, Base.OneTo{Int64}, Array{String, 1}})
precompile(Tuple{typeof(InteractBase.getclass), Symbol, String, String})
precompile(Tuple{typeof(InteractBase.getclass), Interact.Bulma, Symbol, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.:(==)), Tuple{String, String}, Tuple{String, String}})
precompile(Tuple{typeof(Base.print), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Int64})
precompile(Tuple{getfield(InteractBase, Symbol("#82#83")){Int64}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{getfield(Widgets, Symbol("#input##kw")), NamedTuple{(:bindto, :attributes, :extra_obs, :computed, :typ, :min, :max, :step, :className), Tuple{String, Base.Dict{Any, Any}, Array{Base.Pair{String, Array{String, 1}}, 1}, Array{Base.Pair{String, WebIO.JSString}, 1}, String, Int64, Int64, Int64, String}}, typeof(Widgets.input), Observables.Observable{Any}})
precompile(Tuple{getfield(Widgets, Symbol("##input#40")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:bindto, :attributes, :extra_obs, :computed, :typ, :min, :max, :step, :className), Tuple{String, Base.Dict{Any, Any}, Array{Base.Pair{String, Array{String, 1}}, 1}, Array{Base.Pair{String, WebIO.JSString}, 1}, String, Int64, Int64, Int64, String}}}, typeof(Widgets.input), Observables.Observable{Any}})
precompile(Tuple{typeof(Knockout.isnumeric), Observables.Observable{Any}})
precompile(Tuple{typeof(Base._append!), Array{Base.Pair{String, Any}, 1}, Base.HasShape{1}, Base.Generator{Array{Base.Pair{String, Array{String, 1}}, 1}, getfield(InteractBase, Symbol("#48#51"))}})
precompile(Tuple{getfield(Knockout, Symbol("##knockout#1")), Array{Base.Pair{String, WebIO.JSString}, 1}, Array{Any, 1}, typeof(Knockout.knockout), WebIO.Node{WebIO.DOM}, Array{Base.Pair{String, Any}, 1}, WebIO.JSString})
precompile(Tuple{getfield(InteractBase, Symbol("##input#47")), WebIO.JSString, Array{Base.Pair{String, Array{String, 1}}, 1}, Nothing, String, String, String, Base.Dict{Any, Any}, Bool, Array{Base.Pair{String, WebIO.JSString}, 1}, Base.Dict{Any, Any}, String, String, String, Int64, Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:min, :max, :step), Tuple{Int64, Int64, Int64}}}, typeof(Widgets.input), Interact.Bulma, Observables.Observable{Any}})
precompile(Tuple{getfield(Widgets, Symbol("#input##kw")), NamedTuple{(:bindto, :attributes, :extra_obs, :computed, :typ, :min, :max, :step, :className), Tuple{String, Base.Dict{Any, Any}, Array{Base.Pair{String, Array{String, 1}}, 1}, Array{Base.Pair{String, WebIO.JSString}, 1}, String, Int64, Int64, Int64, String}}, typeof(Widgets.input), Interact.Bulma, Observables.Observable{Any}})
precompile(Tuple{typeof(Knockout.isnumeric), Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:className, :attributes, :style, :min, :max, :step), Tuple{String, Base.Dict{Any, Any}, Base.Dict{Any, Any}, Int64, Int64, Int64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:className, :attributes, :style, :min, :max, :step), Tuple{String, Base.Dict{Any, Any}, Base.Dict{Any, Any}, Int64, Int64, Int64}}}, Int64})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Tuple{Base.Pair{Symbol, Any}, Base.Pair{Symbol, Any}, Base.Pair{Symbol, Any}, Base.Pair{Symbol, Any}, Base.Pair{Symbol, Any}, Base.Pair{Symbol, Any}}})
precompile(Tuple{typeof(WebIO.setobservable!), WebIO.Scope, String, Observables.Observable{Any}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Array{String, 1}, String})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, WebIO.JSEvalSerialization, String})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, WebIO.JSEvalSerialization, Array{String, 1}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, WebIO.JSEvalSerialization, String, Array{String, 1}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:scope, :output, :layout), Tuple{WebIO.Scope, Observables.Observable{Any}, getfield(Base, Symbol("#64#65")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}}}, Type{Widgets.Widget{:input, S} where S}, OrderedCollections.OrderedDict{Symbol, Any}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:scope, :output, :layout), Tuple{WebIO.Scope, Observables.Observable{Any}, getfield(Base, Symbol("#64#65")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}}}, Type{Widgets.Widget{:input, S} where S}, Array{Base.Pair{String, Any}, 1}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{String, 1}})
precompile(Tuple{typeof(OrderedCollections._setindex!), OrderedCollections.OrderedDict{Symbol, Any}, Array{String, 1}, Symbol, Int64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Symbol, Any}, Array{String, 1}, Symbol})
precompile(Tuple{getfield(Widgets, Symbol("#_#1#2")), Observables.Observable{Any}, WebIO.Scope, Function, Type{Widgets.Widget{:input, S} where S}, OrderedCollections.OrderedDict{Symbol, Any}})
precompile(Tuple{typeof(Base.getproperty), WebIO.Scope, Symbol})
precompile(Tuple{getfield(WebIO, Symbol("##node#26")), Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:className,), Tuple{String}}}, typeof(Widgets.node), Symbol, Vararg{Any, N} where N})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:className,), Tuple{String}}, Type{WebIO.Node{T} where T}, Symbol, WebIO.Node{WebIO.DOM}})
precompile(Tuple{typeof(Base.setproperty!), WebIO.Scope, Symbol, WebIO.Node{WebIO.DOM}})
precompile(Tuple{typeof(Base.convert), Type{Any}, WebIO.Node{WebIO.DOM}})
precompile(Tuple{Type{Widgets.Widget{:slider, S} where S}, OrderedCollections.OrderedDict{Symbol, Any}})
precompile(Tuple{getfield(Widgets, Symbol("##_#7")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{Widgets.Widget{:slider, S} where S}, Widgets.Widget{:input, Any}})
precompile(Tuple{Type{Widgets.Widget{:slider, S} where S}, Widgets.Widget{:input, Any}})
precompile(Tuple{typeof(Base.get!), getfield(Base, Symbol("#242#243")){Observables.Observable{Any}}, Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Base.get!), Base.Dict{Symbol, Any}, Symbol, Observables.Observable{Any}})
precompile(Tuple{Type{NamedTuple{(:output, :components, :layout, :scope), T} where T<:Tuple}, Tuple{Observables.Observable{Any}, OrderedCollections.OrderedDict{Symbol, Any}, getfield(Base, Symbol("#64#65")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}, WebIO.Scope}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:output, :components, :layout, :scope), Tuple{Observables.Observable{Any}, OrderedCollections.OrderedDict{Symbol, Any}, getfield(Base, Symbol("#64#65")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}, WebIO.Scope}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Observables.Observable{Any}, getfield(Base, Symbol("#64#65")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}, WebIO.Scope}}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:output, :layout, :scope), Tuple{Observables.Observable{Any}, getfield(Base, Symbol("#64#65")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}, WebIO.Scope}}, Type{Widgets.Widget{:slider, S} where S}, OrderedCollections.OrderedDict{Symbol, Any}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:output, :components, :layout, :scope), Tuple{Observables.Observable{Any}, OrderedCollections.OrderedDict{Symbol, Any}, getfield(Base, Symbol("#64#65")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}, WebIO.Scope}}, Type{Widgets.Widget{:slider, S} where S}})
precompile(Tuple{getfield(Widgets, Symbol("#_#1#2")), Observables.Observable{Any}, WebIO.Scope, Function, Type{Widgets.Widget{:slider, S} where S}, OrderedCollections.OrderedDict{Symbol, Any}})
precompile(Tuple{Type{NamedTuple{(:output,), T} where T<:Tuple}, Tuple{Observables.Observable{Float64}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Observables.Observable{Float64}, Symbol})
precompile(Tuple{getfield(Widgets, Symbol("##_#7")), Base.Iterators.Pairs{Symbol, Observables.Observable{Float64}, Tuple{Symbol}, NamedTuple{(:output,), Tuple{Observables.Observable{Float64}}}}, Type{Widgets.Widget{:slider, S} where S}, Widgets.Widget{:slider, Any}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:output,), Tuple{Observables.Observable{Float64}}}, Type{Widgets.Widget{T, S} where S where T}, Widgets.Widget{:slider, Any}})
precompile(Tuple{Type{NamedTuple{(:output, :components, :layout, :scope), T} where T<:Tuple}, Tuple{Observables.Observable{Float64}, OrderedCollections.OrderedDict{Symbol, Any}, getfield(Base, Symbol("#64#65")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}, WebIO.Scope}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:output, :components, :layout, :scope), Tuple{Observables.Observable{Float64}, OrderedCollections.OrderedDict{Symbol, Any}, getfield(Base, Symbol("#64#65")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}, WebIO.Scope}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Observables.Observable{Float64}, getfield(Base, Symbol("#64#65")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}, WebIO.Scope}}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:output, :layout, :scope), Tuple{Observables.Observable{Float64}, getfield(Base, Symbol("#64#65")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}, WebIO.Scope}}, Type{Widgets.Widget{:slider, S} where S}, OrderedCollections.OrderedDict{Symbol, Any}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:output, :components, :layout, :scope), Tuple{Observables.Observable{Float64}, OrderedCollections.OrderedDict{Symbol, Any}, getfield(Base, Symbol("#64#65")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}, WebIO.Scope}}, Type{Widgets.Widget{:slider, S} where S}})
precompile(Tuple{getfield(Widgets, Symbol("#_#1#2")), Observables.Observable{Float64}, WebIO.Scope, Function, Type{Widgets.Widget{:slider, S} where S}, OrderedCollections.OrderedDict{Symbol, Any}})
precompile(Tuple{typeof(OrderedCollections._setindex!), OrderedCollections.OrderedDict{Symbol, Any}, Observables.Observable{Float64}, Symbol, Int64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Symbol, Any}, Observables.Observable{Float64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Widgets.Widget{:slider, Float64}, Observables.Observable{Float64}, String})
precompile(Tuple{typeof(OrderedCollections.ht_keyindex), OrderedCollections.OrderedDict{Symbol, Any}, Symbol, Bool})
precompile(Tuple{typeof(Base.iterate), OrderedCollections.OrderedDict{Symbol, Any}})
precompile(Tuple{typeof(Base.iterate), OrderedCollections.OrderedDict{Symbol, Any}, Int64})
precompile(Tuple{typeof(Base.getindex), Widgets.Widget{:spinbox, Union{Nothing, Int64}}, Symbol})
precompile(Tuple{typeof(Widgets.onchange), Widgets.Widget{:spinbox, Union{Nothing, Int64}}})
precompile(Tuple{typeof(Base.getindex), Widgets.Widget{:spinbox, Union{Nothing, Int64}}})
precompile(Tuple{getfield(Widgets, Symbol("##_#7")), Base.Iterators.Pairs{Symbol, Observables.Observable{Union{Nothing, Int64}}, Tuple{Symbol}, NamedTuple{(:output,), Tuple{Observables.Observable{Union{Nothing, Int64}}}}}, Type{Widgets.Widget{:spinbox, S} where S}, Widgets.Widget{:spinbox, Union{Nothing, Int64}}})
precompile(Tuple{typeof(Widgets.onchange), Widgets.Widget{:spinbox, Union{Nothing, Int64}}, Observables.Observable{Int64}})
precompile(Tuple{typeof(Observables.on), Function, Observables.Observable{Union{Nothing, Int64}}})
precompile(Tuple{typeof(WebIO.setup_comm), Function, Observables.Observable{Union{Nothing, Int64}}})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{Union{Nothing, Int64}}, Observables.Observable{Any}})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{Union{Nothing, Int64}}, Observables.Observable{Bool}})
precompile(Tuple{typeof(Observables.on), Function, Observables.Observable{Int64}})
precompile(Tuple{typeof(WebIO.setup_comm), Function, Observables.Observable{Int64}})
precompile(Tuple{typeof(Base.getindex), Widgets.Widget{:togglebuttons, Any}})
precompile(Tuple{typeof(Base.map), Function, Widgets.Widget{:togglebuttons, Any}, Widgets.Widget{:spinbox, Union{Nothing, Int64}}, Widgets.Widget{:spinbox, Union{Nothing, Int64}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.getindex), Widgets.Widget{:button, Int64}})
precompile(Tuple{typeof(Base.map), typeof(Observables.to_value), Tuple{Widgets.Widget{:spinbox, Union{Nothing, Int64}}, Widgets.Widget{:spinbox, Union{Nothing, Int64}}, Widgets.Widget{:dropdown, Any}, Widgets.Widget{:button, Int64}}})
precompile(Tuple{getfield(Main, Symbol("#6#11")){UnionAll, PyPlot.Figure, Widgets.Widget{:togglebuttons, Any}}, Bool, Int64, Int64, Function, Int64})
precompile(Tuple{typeof(Base.getindex), Array{String, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), Widgets.Widget{:slider, Float64}, Symbol})
precompile(Tuple{typeof(Widgets.onchange), Widgets.Widget{:slider, Float64}})
precompile(Tuple{typeof(Base.getindex), Widgets.Widget{:slider, Float64}})
precompile(Tuple{getfield(Widgets, Symbol("##_#7")), Base.Iterators.Pairs{Symbol, Observables.Observable{Float64}, Tuple{Symbol}, NamedTuple{(:output,), Tuple{Observables.Observable{Float64}}}}, Type{Widgets.Widget{:slider, S} where S}, Widgets.Widget{:slider, Float64}})
precompile(Tuple{typeof(Widgets.onchange), Widgets.Widget{:slider, Float64}, Observables.Observable{Int64}})
precompile(Tuple{typeof(Base.get!), getfield(Base, Symbol("#242#243")){Observables.Observable{Float64}}, Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Base.get!), Base.Dict{Symbol, Any}, Symbol, Observables.Observable{Float64}})
precompile(Tuple{typeof(Base.map), Function, Widgets.Widget{:slider, Float64}})
precompile(Tuple{typeof(Main.bil_ui), Function, Widgets.Widget{:slider, Float64}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{Tuple{2}}})
precompile(Tuple{Type{StaticArrays.Size{(2,)}}})
precompile(Tuple{typeof(Base.prod), StaticArrays.Size{(2,)}})
precompile(Tuple{typeof(StaticArrays._Length), Int64})
precompile(Tuple{Type{StaticArrays.Length{2}}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s162#184")), Any, Any, Any, Any})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("#185#186")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect_to!), Array{Expr, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("#185#186"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("#185#186"))}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s35#6")), Any, Any, Any, Any, Any, Type{T} where T, Type{T} where T, Type{T} where T, Any})
precompile(Tuple{typeof(Base.all), Function, Core.SimpleVector})
precompile(Tuple{typeof(Base._all), getfield(StaticArrays, Symbol("#7#8")), Core.SimpleVector, Base.Colon})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{2}}})
precompile(Tuple{typeof(Base.:(*)), Int64})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{2}}})
precompile(Tuple{typeof(Base.minimum), Tuple{Int64}})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{2}}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s35#2")), Any, Any, Any, Any, Any})
precompile(Tuple{getfield(StaticArrays, Symbol("#3#4")), Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(StaticArrays, Symbol("#3#4")), Base.Val{2}})
precompile(Tuple{typeof(LinearAlgebra.generic_norm2), Array{Int64, 1}})
precompile(Tuple{typeof(Base.Math.throw_exp_domainerror), Float64})
precompile(Tuple{typeof(LinearAlgebra.generic_normp), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(LinearAlgebra.norm), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(LinearAlgebra.normalize), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(-)), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(LinearAlgebra.BLAS.dot), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{Type{DynamicalBilliards.InfiniteWall{T} where T<:AbstractFloat}, Array{Float64, 1}, Array{Float64, 1}, Array{Int64, 1}, String})
precompile(Tuple{typeof(LinearAlgebra.dot), Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(BilharesMarkov, Symbol("##billiard_crectangle#9")), Float64, Float64, String, typeof(BilharesMarkov.billiard_crectangle), Float64, Float64})
precompile(Tuple{getfield(BilharesMarkov, Symbol("##billiard_csinai#10")), Float64, Float64, Float64, String, typeof(BilharesMarkov.billiard_csinai), Float64, Float64, Float64})
precompile(Tuple{typeof(Main.sinai), Float64})
precompile(Tuple{Type{DynamicalBilliards.Billiard{T, D, O, Y} where Y where O<:Tuple where D where T}, DynamicalBilliards.InfiniteWall{Float64}, Vararg{DynamicalBilliards.InfiniteWall{Float64}, N} where N})
precompile(Tuple{Type{Array{Int64, 1}}, Array{Union{}, 1}})
precompile(Tuple{Type{DynamicalBilliards.Billiard{T, D, O, Y} where Y where O<:Tuple where D where T}, Tuple{DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}})
precompile(Tuple{typeof(Base.iterate), DynamicalBilliards.Billiard{Float64, 4, Tuple{DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}})
precompile(Tuple{typeof(Base.iterate), DynamicalBilliards.Billiard{Float64, 4, Tuple{DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, Int64})
precompile(Tuple{Type{DynamicalBilliards.Billiard{T, D, O, Y} where Y where O<:Tuple where D where T}, DynamicalBilliards.Disk{Float64}, Vararg{DynamicalBilliards.Obstacle{T} where T<:AbstractFloat, N} where N})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{DynamicalBilliards.Disk{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Int64, 1}, Base.Generator{Base.Iterators.Filter{getfield(Base, Symbol("#85#86")){getfield(DynamicalBilliards, Symbol("#7#8"))}, Base.Iterators.Pairs{Int64, DynamicalBilliards.Obstacle{Float64}, Base.OneTo{Int64}, Tuple{DynamicalBilliards.Disk{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}}}, typeof(Base.first)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Int64, 1}, Base.Generator{Base.Iterators.Filter{getfield(Base, Symbol("#85#86")){getfield(DynamicalBilliards, Symbol("#7#8"))}, Base.Iterators.Pairs{Int64, DynamicalBilliards.Obstacle{Float64}, Base.OneTo{Int64}, Tuple{DynamicalBilliards.Disk{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}}}, typeof(Base.first)}})
precompile(Tuple{Type{DynamicalBilliards.Billiard{T, D, O, Y} where Y where O<:Tuple where D where T}, Tuple{DynamicalBilliards.Disk{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}})
precompile(Tuple{typeof(Base.map!), Function, Observables.Observable{Any}, Widgets.Widget{:slider, Float64}})
precompile(Tuple{getfield(Observables, Symbol("##map#31")), DynamicalBilliards.Billiard{Float64, 5, Tuple{DynamicalBilliards.Disk{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, typeof(Base.map), Function, Widgets.Widget{:slider, Float64}})
precompile(Tuple{Type{Observables.MapUpdater{F, T} where T where F}, typeof(Main.sinai), Observables.Observable{Any}})
precompile(Tuple{typeof(Observables.onany), Function, Widgets.Widget{:slider, Float64}})
precompile(Tuple{Type{Observables.OnUpdate{F, Args} where Args where F}, Observables.MapUpdater{typeof(Main.sinai), Any}, Tuple{Widgets.Widget{:slider, Float64}}})
precompile(Tuple{typeof(Observables.listeners), Widgets.Widget{:slider, Float64}})
precompile(Tuple{typeof(Observables.on), Function, Widgets.Widget{:slider, Float64}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{WeakRef, Any}, Widgets.Widget{:slider, Float64}})
precompile(Tuple{typeof(Base.lock), getfield(Base, Symbol("#493#494")){Base.WeakKeyDict{Any, Any}, Widgets.Widget{:slider, Float64}}, Base.ReentrantLock})
precompile(Tuple{typeof(Base.lock), getfield(Base, Symbol("#495#496")){Base.WeakKeyDict{Any, Any}, Widgets.Widget{:slider, Float64}}, Base.ReentrantLock})
precompile(Tuple{typeof(WebIO.setup_comm), Function, Widgets.Widget{:slider, Float64}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s162#259")), Any, Any, Any})
precompile(Tuple{typeof(Base.findfirst), getfield(StaticArrays, Symbol("#260#263")), Tuple{DataType, DataType}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("#262#265")){Int64}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(StaticArrays, Symbol("#262#265")){Int64}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("#262#265")){Int64}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("#262#265")){Int64}}})
precompile(Tuple{typeof(StaticArrays.length_val), StaticArrays.Size{(2,)}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s162#385")), Any, Any, Any, Any})
precompile(Tuple{typeof(Base.prod), Tuple{Int64}})
precompile(Tuple{Type{Core.Compiler.Signature}, Base.MappingRF{typeof(DynamicalBilliards.totallength), Base.BottomRF{typeof(Base.add_sum)}}, Core.Compiler.Const, Array{Any, 1}, Type{T} where T})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{6}}})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{6}}})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{6}}})
precompile(Tuple{typeof(Base.ntuple), getfield(StaticArrays, Symbol("#3#4")), Base.Val{6}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{Tuple{6}}})
precompile(Tuple{Type{StaticArrays.Size{(6,)}}})
precompile(Tuple{typeof(Base.prod), StaticArrays.Size{(6,)}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Int64})
precompile(Tuple{Type{StaticArrays.Size{(0,)}}})
precompile(Tuple{typeof(StaticArrays.length_val), StaticArrays.Size{(0,)}})
precompile(Tuple{typeof(Base.prod), StaticArrays.Size{(0,)}})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{0}}})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{0}}})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{0}}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s162#270")), Any, Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("#271#273")), Base.UnitRange{Int64}})
precompile(Tuple{getfield(StaticArrays, Symbol("#271#273")), Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("#271#273"))}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("#271#273"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("#272#274")){Int64}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(StaticArrays, Symbol("#272#274")){Int64}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("#272#274")){Int64}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("#272#274")){Int64}}})
precompile(Tuple{Type{StaticArrays.Size{(1,)}}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s35#13")), Any, Any, Any, Any})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{1}}})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{1}}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s35#5")), Any, Any, Any})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{1}}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{Tuple{0}}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{Tuple{1}}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s162#195")), Any, Any, Any, Type{T} where T, Any, Any, Any})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Tuple{Int64}})
precompile(Tuple{typeof(Base.getindex), StaticArrays.Size{(0,)}, Int64})
precompile(Tuple{typeof(Base.getindex), StaticArrays.Size{(1,)}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("#196#199")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect_to!), Array{Expr, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("#196#199"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("#196#199"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("#197#200")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect_to!), Array{Expr, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("#197#200"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("#197#200"))}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Expr}})
precompile(Tuple{typeof(Base.vcat), Array{Expr, 1}, Array{Expr, 1}})
precompile(Tuple{typeof(StaticArrays.length_val), StaticArrays.Size{(1,)}})
precompile(Tuple{typeof(Base.prod), StaticArrays.Size{(1,)}})
precompile(Tuple{typeof(Base.getindex), StaticArrays.Size{(2,)}, Int64})
precompile(Tuple{Type{StaticArrays.Size{(3,)}}})
precompile(Tuple{typeof(StaticArrays.length_val), StaticArrays.Size{(3,)}})
precompile(Tuple{typeof(Base.prod), StaticArrays.Size{(3,)}})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{3}}})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{3}}})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{3}}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{Tuple{3}}})
precompile(Tuple{typeof(Base.getindex), StaticArrays.Size{(3,)}, Int64})
precompile(Tuple{Type{StaticArrays.Size{(4,)}}})
precompile(Tuple{typeof(StaticArrays.length_val), StaticArrays.Size{(4,)}})
precompile(Tuple{typeof(Base.prod), StaticArrays.Size{(4,)}})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{4}}})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{4}}})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{4}}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{Tuple{4}}})
precompile(Tuple{typeof(Base.getindex), StaticArrays.Size{(4,)}, Int64})
precompile(Tuple{Type{StaticArrays.Size{(5,)}}})
precompile(Tuple{typeof(StaticArrays.length_val), StaticArrays.Size{(5,)}})
precompile(Tuple{typeof(Base.prod), StaticArrays.Size{(5,)}})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{5}}})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{5}}})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{5}}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{Tuple{5}}})
precompile(Tuple{typeof(Base.getindex), StaticArrays.Size{(5,)}, Int64})
precompile(Tuple{typeof(StaticArrays.length_val), StaticArrays.Size{(6,)}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{getfield(Distributed, Symbol("#206#209")){Distributed.WorkerPool}, Int64}}})
precompile(Tuple{typeof(Core.Compiler._typename), DataType})
precompile(Tuple{Type{Base.Broadcast.BroadcastStyle}, Base.Broadcast.DefaultArrayStyle{0}, StaticArrays.StaticArrayStyle{1}})
precompile(Tuple{typeof(Base.typename), DataType})
precompile(Tuple{typeof(StaticArrays._axes), StaticArrays.Size{(6,)}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}})
precompile(Tuple{Type{StaticArrays.Size{()}}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s162#242")), Any, Any})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("#243#244")), Core.SimpleVector})
precompile(Tuple{typeof(Base.collect), Base.Generator{Core.SimpleVector, getfield(StaticArrays, Symbol("#243#244"))}})
precompile(Tuple{getfield(StaticArrays, Symbol("#243#244")), Type{T} where T})
precompile(Tuple{typeof(Base._array_for), Type{Tuple{}}, Core.SimpleVector, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{}, 1}, Base.Generator{Core.SimpleVector, getfield(StaticArrays, Symbol("#243#244"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{}, 1}, Tuple{}, Base.Generator{Core.SimpleVector, getfield(StaticArrays, Symbol("#243#244"))}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Vararg{Int64, N} where N}, 1}, Int64, Array{Tuple{}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Tuple{}, 1}, Tuple{Int64}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Vararg{Int64, N} where N}, 1}, Base.Generator{Core.SimpleVector, getfield(StaticArrays, Symbol("#243#244"))}, Int64, Int64})
precompile(Tuple{typeof(Base.length), Array{Tuple{Vararg{Int64, N} where N}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Tuple{Vararg{Int64, N} where N}, 1}, Int64})
precompile(Tuple{typeof(Base.max), Int64, Int64})
precompile(Tuple{typeof(Base._array_for), Type{Union{StaticArrays.Dynamic, Int64}}, Base.UnitRange{Int64}, Base.HasShape{1}})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Union{StaticArrays.Dynamic, Int64}, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{Union{StaticArrays.Dynamic, Int64}, 1}, StaticArrays.Dynamic, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Union{StaticArrays.Dynamic, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Union{StaticArrays.Dynamic, Int64}, 1}, Int64, Int64})
precompile(Tuple{getfield(StaticArrays, Symbol("##s162#245")), Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.findfirst), getfield(StaticArrays, Symbol("#246#250")), Tuple{DataType, DataType}})
precompile(Tuple{getfield(StaticArrays, Symbol("#246#250")), Type{T} where T})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("#248#252")), Core.SimpleVector})
precompile(Tuple{typeof(Base.collect), Base.Generator{Core.SimpleVector, getfield(StaticArrays, Symbol("#248#252"))}})
precompile(Tuple{getfield(StaticArrays, Symbol("#248#252")), Type{T} where T})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{}, 1}, Base.Generator{Core.SimpleVector, getfield(StaticArrays, Symbol("#248#252"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{}, 1}, Tuple{}, Base.Generator{Core.SimpleVector, getfield(StaticArrays, Symbol("#248#252"))}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Vararg{Int64, N} where N}, 1}, Base.Generator{Core.SimpleVector, getfield(StaticArrays, Symbol("#248#252"))}, Int64, Int64})
precompile(Tuple{Type{Base.IteratorsMD.CartesianIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Tuple{Int64}})
precompile(Tuple{typeof(Base.similar), Base.IteratorsMD.CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, Type{Expr}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Base.IteratorsMD.CartesianIndices{1, Tuple{Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Base.IteratorsMD.CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}, Tuple{Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("#249#253")){Tuple{DataType, DataType}, Array{Tuple{Vararg{Int64, N} where N}, 1}, Base.IteratorsMD.CartesianIndex{1}}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(StaticArrays, Symbol("#249#253")){Tuple{DataType, DataType}, Array{Tuple{Vararg{Int64, N} where N}, 1}, Base.IteratorsMD.CartesianIndex{1}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("#249#253")){Tuple{DataType, DataType}, Array{Tuple{Vararg{Int64, N} where N}, 1}, Base.IteratorsMD.CartesianIndex{1}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("#249#253")){Tuple{DataType, DataType}, Array{Tuple{Vararg{Int64, N} where N}, 1}, Base.IteratorsMD.CartesianIndex{1}}}})
precompile(Tuple{typeof(StaticArrays.broadcasted_index), Tuple{Int64}, Base.IteratorsMD.CartesianIndex{1}})
precompile(Tuple{typeof(Base.getindex), Base.LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Base.IteratorsMD.CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}, Tuple{Int64, Base.IteratorsMD.CartesianIndex{1}}})
precompile(Tuple{typeof(Base.iterate), StaticArrays.SOneTo{6}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol, Symbol, Symbol}, Tuple{}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:edgecolor, :facecolor, :linestyle, :lw), Tuple{Tuple{Int64, Float64, Int64}, Tuple{Int64, Float64, Int64, Float64}, String, Float64}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(StaticArrays._axes), StaticArrays.Size{(2,)}})
precompile(Tuple{typeof(Base.iterate), StaticArrays.SOneTo{2}})
precompile(Tuple{getfield(DynamicalBilliards, Symbol("##s29#41")), Any, Any, Any, Any, Any, Any})
precompile(Tuple{getfield(StaticArrays, Symbol("##s162#62")), Any, Any, Any, Any, Any})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{2, 2}}})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{2, 2}}})
precompile(Tuple{typeof(Base.minimum), Tuple{Int64, Int64}})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{2, 2}}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{Tuple{2, 2}}})
precompile(Tuple{Type{StaticArrays.Size{(2, 2)}}})
precompile(Tuple{typeof(StaticArrays.length_val), StaticArrays.Size{(2, 2)}})
precompile(Tuple{typeof(Base.prod), StaticArrays.Size{(2, 2)}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s162#481")), Any, Any, Any, Any, Any, Type{T} where T, Any, Any, Any})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("#482#486")){Tuple{Int64, Int64}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.LinearIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.LinearIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(StaticArrays, Symbol("#484#488")){Int64, Tuple{Int64, Int64}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("#484#488")){Int64, Tuple{Int64, Int64}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("#484#488")){Int64, Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), getfield(StaticArrays, Symbol("#483#487")), Array{Expr, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), getfield(StaticArrays, Symbol("#483#487")), Base.IndexLinear, Array{Expr, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Expr, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("#482#486")){Tuple{Int64, Int64}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("#482#486")){Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Base._array_for), Type{Tuple{Int64}}, Core.SimpleVector, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64}, 1}, Base.Generator{Core.SimpleVector, getfield(StaticArrays, Symbol("#243#244"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64}, 1}, Tuple{Int64}, Base.Generator{Core.SimpleVector, getfield(StaticArrays, Symbol("#243#244"))}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Vararg{Int64, N} where N}, 1}, Int64, Array{Tuple{Int64}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Tuple{Int64}, 1}, Tuple{}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64}, 1}, Base.Generator{Core.SimpleVector, getfield(StaticArrays, Symbol("#248#252"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64}, 1}, Tuple{Int64}, Base.Generator{Core.SimpleVector, getfield(StaticArrays, Symbol("#248#252"))}, Int64})
precompile(Tuple{Type{Base.Broadcast.BroadcastStyle}, Base.Broadcast.DefaultArrayStyle{0}, StaticArrays.StaticArrayStyle{2}})
precompile(Tuple{typeof(StaticArrays._axes), StaticArrays.Size{(2, 2)}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Tuple{}, 1}, Tuple{Int64, Int64}, Int64})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.prod), Tuple{Int64, Int64}})
precompile(Tuple{Type{Base.IteratorsMD.CartesianIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.similar), Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, Type{Expr}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}}, Tuple{Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("#249#253")){Tuple{DataType, DataType}, Array{Tuple{Vararg{Int64, N} where N}, 1}, Base.IteratorsMD.CartesianIndex{2}}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(StaticArrays, Symbol("#249#253")){Tuple{DataType, DataType}, Array{Tuple{Vararg{Int64, N} where N}, 1}, Base.IteratorsMD.CartesianIndex{2}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("#249#253")){Tuple{DataType, DataType}, Array{Tuple{Vararg{Int64, N} where N}, 1}, Base.IteratorsMD.CartesianIndex{2}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("#249#253")){Tuple{DataType, DataType}, Array{Tuple{Vararg{Int64, N} where N}, 1}, Base.IteratorsMD.CartesianIndex{2}}}})
precompile(Tuple{typeof(StaticArrays.broadcasted_index), Tuple{Int64, Int64}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(Base.getindex), Base.LinearIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Expr, 2}, Expr, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}}, Tuple{Int64, Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base._array_for), Type{Tuple{Int64, Int64}}, Core.SimpleVector, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64}, 1}, Base.Generator{Core.SimpleVector, getfield(StaticArrays, Symbol("#243#244"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64}, 1}, Tuple{Int64, Int64}, Base.Generator{Core.SimpleVector, getfield(StaticArrays, Symbol("#243#244"))}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Vararg{Int64, N} where N}, 1}, Int64, Array{Tuple{Int64, Int64}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Tuple{Int64, Int64}, 1}, Tuple{}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64}, 1}, Base.Generator{Core.SimpleVector, getfield(StaticArrays, Symbol("#248#252"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64}, 1}, Tuple{Int64, Int64}, Base.Generator{Core.SimpleVector, getfield(StaticArrays, Symbol("#248#252"))}, Int64})
precompile(Tuple{Type{Tuple}, StaticArrays.Size{(2,)}})
precompile(Tuple{typeof(Base.get), PyCall.PyObject, Type{PyCall.PyAny}, Int64})
precompile(Tuple{getfield(Main, Symbol("#7#12")){Bool, Int64, Int64, UnionAll, Array{String, 1}, UnionAll, PyPlot.Figure}, DynamicalBilliards.Billiard{Float64, 5, Tuple{DynamicalBilliards.Disk{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(DynamicalBilliards.totallength), Base.BottomRF{typeof(Base.add_sum)}}, Float64, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}})
precompile(Tuple{typeof(Random._rand_max383!), Random.MersenneTwister, Random.UnsafeView{Float64}, Random.CloseOpen01{Float64}})
precompile(Tuple{typeof(Random.DSFMT.dsfmt_fill_array_close_open!), Random.DSFMT.DSFMT_state, Ptr{Float64}, Int64})
precompile(Tuple{typeof(Random.rand!), Random.MersenneTwister, Random.UnsafeView{Float64}, Random.SamplerTrivial{Random.CloseOpen01{Float64}, Float64}})
precompile(Tuple{typeof(Base.rand), Type{Float64}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Float64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(*)), Array{Float64, 1}, Float64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(*)), Int64, Array{Float64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Float64}}, Tuple{Int64}})
precompile(Tuple{typeof(BilharesMarkov.random_on_border), Type{DynamicalBilliards.Particle{T} where T<:AbstractFloat}, DynamicalBilliards.Billiard{Float64, 5, Tuple{DynamicalBilliards.Disk{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(BilharesMarkov, Symbol("#13#14")){Float64, UnionAll, DynamicalBilliards.Billiard{Float64, 5, Tuple{DynamicalBilliards.Disk{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, Array{Float64, 1}, Array{Float64, 1}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.length), Array{Tuple{Int64}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Tuple{Int64}, 1}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("#249#253")){Tuple{DataType, DataType}, Array{Tuple{Int64}, 1}, Base.IteratorsMD.CartesianIndex{1}}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(StaticArrays, Symbol("#249#253")){Tuple{DataType, DataType}, Array{Tuple{Int64}, 1}, Base.IteratorsMD.CartesianIndex{1}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("#249#253")){Tuple{DataType, DataType}, Array{Tuple{Int64}, 1}, Base.IteratorsMD.CartesianIndex{1}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("#249#253")){Tuple{DataType, DataType}, Array{Tuple{Int64}, 1}, Base.IteratorsMD.CartesianIndex{1}}}})
precompile(Tuple{typeof(DynamicalBilliards.arcintervals), DynamicalBilliards.Billiard{Float64, 5, Tuple{DynamicalBilliards.Disk{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}})
precompile(Tuple{typeof(Base.Math.sincos_domain_error), Float64})
precompile(Tuple{typeof(Base.Math.paynehanek), Float64})
precompile(Tuple{typeof(Base.Math.sincos), Float64})
precompile(Tuple{typeof(DynamicalBilliards.from_bcoords), Float64, Float64, DynamicalBilliards.Disk{Float64}})
precompile(Tuple{typeof(DynamicalBilliards.from_bcoords), Float64, Float64, DynamicalBilliards.InfiniteWall{Float64}})
precompile(Tuple{typeof(DynamicalBilliards.from_bcoords), Float64, Float64, DynamicalBilliards.Billiard{Float64, 5, Tuple{DynamicalBilliards.Disk{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, StaticArrays.SArray{Tuple{6}, Float64, 1, 6}})
precompile(Tuple{getfield(BilharesMarkov, Symbol("#13#14")){Float64, UnionAll, DynamicalBilliards.Billiard{Float64, 5, Tuple{DynamicalBilliards.Disk{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, Array{Float64, 1}, Array{Float64, 1}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(BilharesMarkov, Symbol("#13#14")){Float64, UnionAll, DynamicalBilliards.Billiard{Float64, 5, Tuple{DynamicalBilliards.Disk{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{Type{DynamicalBilliards.Particle{T} where T<:AbstractFloat}, StaticArrays.SArray{Tuple{2}, Float64, 1, 2}, StaticArrays.SArray{Tuple{2}, Float64, 1, 2}})
precompile(Tuple{typeof(Base._array_for), Type{DynamicalBilliards.Particle{Float64}}, Base.UnitRange{Int64}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{DynamicalBilliards.Particle{Float64}, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(BilharesMarkov, Symbol("#13#14")){Float64, UnionAll, DynamicalBilliards.Billiard{Float64, 5, Tuple{DynamicalBilliards.Disk{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, Array{Float64, 1}, Array{Float64, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DynamicalBilliards.Particle{Float64}, 1}, DynamicalBilliards.Particle{Float64}, Base.Generator{Base.UnitRange{Int64}, getfield(BilharesMarkov, Symbol("#13#14")){Float64, UnionAll, DynamicalBilliards.Billiard{Float64, 5, Tuple{DynamicalBilliards.Disk{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, Array{Float64, 1}, Array{Float64, 1}}}, Int64})
precompile(Tuple{getfield(DynamicalBilliards, Symbol("##parallelize#69")), Symbol, typeof(DynamicalBilliards.parallelize), Function, DynamicalBilliards.Billiard{Float64, 5, Tuple{DynamicalBilliards.Disk{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, Int64, Array{DynamicalBilliards.Particle{Float64}, 1}})
precompile(Tuple{typeof(DynamicalBilliards.parallelize), Function, DynamicalBilliards.Billiard{Float64, 5, Tuple{DynamicalBilliards.Disk{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, Int64, Array{DynamicalBilliards.Particle{Float64}, 1}})
precompile(Tuple{typeof(DynamicalBilliards.collision), DynamicalBilliards.Particle{Float64}, DynamicalBilliards.Disk{Float64}})
precompile(Tuple{typeof(DynamicalBilliards.collision), DynamicalBilliards.Particle{Float64}, DynamicalBilliards.InfiniteWall{Float64}})
precompile(Tuple{typeof(DynamicalBilliards.next_collision), DynamicalBilliards.Particle{Float64}, DynamicalBilliards.Billiard{Float64, 5, Tuple{DynamicalBilliards.Disk{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}})
precompile(Tuple{typeof(DynamicalBilliards._correct_pos!), DynamicalBilliards.Particle{Float64}, DynamicalBilliards.Disk{Float64}})
precompile(Tuple{typeof(Base.Math.acos_domain_error), Float64})
precompile(Tuple{typeof(Base.acos), Float64})
precompile(Tuple{typeof(DynamicalBilliards._ξ), StaticArrays.SArray{Tuple{2}, Float64, 1, 2}, DynamicalBilliards.Disk{Float64}})
precompile(Tuple{typeof(DynamicalBilliards.boundarymap), DynamicalBilliards.Particle{Float64}, DynamicalBilliards.Billiard{Float64, 5, Tuple{DynamicalBilliards.Disk{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, Int64, StaticArrays.SArray{Tuple{6}, Float64, 1, 6}})
precompile(Tuple{getfield(DynamicalBilliards, Symbol("#98#threadsfor_fun#72")){typeof(DynamicalBilliards.boundarymap), DynamicalBilliards.Billiard{Float64, 5, Tuple{DynamicalBilliards.Disk{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, Int64, Array{DynamicalBilliards.Particle{Float64}, 1}, StaticArrays.SArray{Tuple{6}, Float64, 1, 6}, Array{Array{StaticArrays.SArray{Tuple{2}, Float64, 1, 2}, 1}, 1}, Base.UnitRange{Int64}}, Bool})
precompile(Tuple{getfield(DynamicalBilliards, Symbol("#98#threadsfor_fun#72")){typeof(DynamicalBilliards.boundarymap), DynamicalBilliards.Billiard{Float64, 5, Tuple{DynamicalBilliards.Disk{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, Int64, Array{DynamicalBilliards.Particle{Float64}, 1}, StaticArrays.SArray{Tuple{6}, Float64, 1, 6}, Array{Array{StaticArrays.SArray{Tuple{2}, Float64, 1, 2}, 1}, 1}, Base.UnitRange{Int64}}})
precompile(Tuple{Type{Task}, Any})
precompile(Tuple{typeof(Base.schedule), Task})
precompile(Tuple{typeof(Base.wait), Task})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Array{StaticArrays.SArray{Tuple{2}, Float64, 1, 2}, 1}, 1}, StaticArrays.SArray{Tuple{6}, Float64, 1, 6}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Array{StaticArrays.SArray{Tuple{2}, Float64, 1, 2}, 1}, 1}, StaticArrays.SArray{Tuple{6}, Float64, 1, 6}}, Int64, Int64})
precompile(Tuple{PyCall.PyObject})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{PyCall.PyObject}, Int64, Ptr{Nothing}})
precompile(Tuple{PyCall.PyObject, PyCall.PyObject})
precompile(Tuple{typeof(PyCall.pyjlwrap_call), Ptr{PyCall.PyObject_struct}, Ptr{PyCall.PyObject_struct}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{Type{PyCall.PyDict{Symbol, PyCall.PyObject, isdict} where isdict}, PyCall.PyObject})
precompile(Tuple{typeof(PyCall._pyjlwrap_call), Function, Ptr{PyCall.PyObject_struct}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pytype_query), PyCall.PyObject, Type{PyCall.PyAny}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, getfield(PyCall, Symbol("#36#37")){PyCall.PyObject}}})
precompile(Tuple{getfield(PyCall, Symbol("#28#29")){Tuple{}, PyCall.PyObject, Bool}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(PyCall, Symbol("#28#29")){Tuple{}, PyCall.PyObject, Bool}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Tuple{}}, PyCall.PyObject})
precompile(Tuple{typeof(PyCall.isvatuple), DataType})
precompile(Tuple{getfield(PyPlot, Symbol("##figure#7")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(PyPlot.figure)})
precompile(Tuple{typeof(PyPlot.gcf)})
precompile(Tuple{typeof(PyCall.pyreturn), PyPlot.Figure})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Array{StaticArrays.SArray{Tuple{2}, Float64, 1, 2}, 1}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(Main, Symbol("#8#13")), Tuple{Array{Array{StaticArrays.SArray{Tuple{2}, Float64, 1, 2}, 1}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, getfield(Main, Symbol("#8#13")), Tuple{Array{Array{StaticArrays.SArray{Tuple{2}, Float64, 1, 2}, 1}, 1}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, getfield(Main, Symbol("#9#14")), Tuple{Base.Broadcast.Extruded{Array{StaticArrays.SArray{Tuple{2}, Float64, 1, 2}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{getfield(Main, Symbol("#8#13")), Array{StaticArrays.SArray{Tuple{2}, Float64, 1, 2}, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, getfield(Main, Symbol("#8#13")), Tuple{Base.Broadcast.Extruded{Array{Array{StaticArrays.SArray{Tuple{2}, Float64, 1, 2}, 1}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(Main, Symbol("#8#13")), Tuple{Array{Array{StaticArrays.SArray{Tuple{2}, Float64, 1, 2}, 1}, 1}}}})
precompile(Tuple{Type{NamedTuple{(:color, :ax), T} where T<:Tuple}, Tuple{Array{String, 1}, PyCall.PyObject}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:marker, :color, :linestyle, :ms), Tuple{String, String, String, Float64}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Base.UnitRange{Int64}, getfield(DynamicalBilliards, Symbol("#138#144")){StaticArrays.SArray{Tuple{6}, Float64, 1, 6}}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Base.UnitRange{Int64}, getfield(DynamicalBilliards, Symbol("#139#145"))}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{StaticArrays.SArray{Tuple{2}, Float64, 1, 2}, 1}, getfield(DynamicalBilliards, Symbol("#137#143"))}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{StaticArrays.SArray{Tuple{2}, Float64, 1, 2}, 1}, getfield(DynamicalBilliards, Symbol("#136#142"))}, Int64})
precompile(Tuple{getfield(DynamicalBilliards, Symbol("##plot_boundarymap#133")), PyCall.PyObject, Array{String, 1}, String, Float64, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(DynamicalBilliards.plot_boundarymap), Array{Array{StaticArrays.SArray{Tuple{2}, Float64, 1, 2}, 1}, 1}, StaticArrays.SArray{Tuple{6}, Float64, 1, 6}})
precompile(Tuple{getfield(DynamicalBilliards, Symbol("#plot_boundarymap##kw")), NamedTuple{(:color, :ax), Tuple{Array{String, 1}, PyCall.PyObject}}, typeof(DynamicalBilliards.plot_boundarymap), Array{Array{StaticArrays.SArray{Tuple{2}, Float64, 1, 2}, 1}, 1}, StaticArrays.SArray{Tuple{6}, Float64, 1, 6}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, String, String, Float64}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Ptr{PyCall.PyObject_struct}, Any}, Array{Float64, 1}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyembed), PyCall.PyObject, Array{Float64, 1}})
precompile(Tuple{typeof(PyCall.NpyArray), Array{Float64, 1}, Bool})
precompile(Tuple{typeof(PyCall.array2py), Array{Float64, 1}, Int64, Base.IteratorsMD.CartesianIndex{1}})
precompile(Tuple{Type{PyCall.PyObject}, Array{Float64, 1}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Array{Float64, 1}, Array{Float64, 1}}, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Array{Float64, 1}, Array{Float64, 1}}, Int64, PyCall.PyObject})
precompile(Tuple{getfield(PyCall, Symbol("#108#109")), Base.Pair{Symbol, Any}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:marker, :color, :linestyle, :ms), Tuple{String, String, String, Float64}}}, getfield(PyCall, Symbol("#108#109"))}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Array{Float64, 1}, Array{Float64, 1}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:marker, :color, :linestyle, :ms), Tuple{String, String, String, Float64}}}})
precompile(Tuple{getfield(Core, Symbol("#Any##kw")), NamedTuple{(:marker, :color, :linestyle, :ms), Tuple{String, String, String, Float64}}, PyCall.PyObject, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base._array_for), Type{Base.Pair{String, String}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:marker, :color, :linestyle, :ms), Tuple{String, String, String, Float64}}}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{String, String}, 1}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:marker, :color, :linestyle, :ms), Tuple{String, String, String, Float64}}}, getfield(PyCall, Symbol("#108#109"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{String, String}, 1}, Base.Pair{String, String}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:marker, :color, :linestyle, :ms), Tuple{String, String, String, Float64}}}, getfield(PyCall, Symbol("#108#109"))}, Int64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Float64})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Pair{String, B} where B, 1}, Int64, Array{Base.Pair{String, String}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Base.Pair{String, String}, 1}, Base.Pair{String, Float64}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{String, B} where B, 1}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:marker, :color, :linestyle, :ms), Tuple{String, String, String, Float64}}}, getfield(PyCall, Symbol("#108#109"))}, Int64, Int64})
precompile(Tuple{Type{Base.Dict{AbstractString, Any}}, Array{Base.Pair{String, B} where B, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{AbstractString, Any}, String, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{AbstractString, Any}, Float64, String})
precompile(Tuple{Type{PyCall.PyObject}, Float64})
precompile(Tuple{typeof(Base.convert), Type{Array{T, N} where N where T}, PyCall.PyObject})
precompile(Tuple{typeof(PyCall.pyarray_dims), PyCall.PyObject, Bool})
precompile(Tuple{typeof(PyCall.py2array), Type{T} where T, PyCall.PyObject})
precompile(Tuple{Type{Array{Any, N} where N}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(PyCall.py2array), Type{T} where T, Array{Any, 1}, PyCall.PyObject, Int64, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.identity), Array{Any, 1}})
precompile(Tuple{typeof(Base._collect), Array{Any, 1}, Base.Generator{Array{Any, 1}, typeof(Base.identity)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Any, 1}, Base.Generator{Array{Any, 1}, typeof(Base.identity)}})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{PyCall.PyObject}, Base.Generator{Array{Any, 1}, typeof(Base.identity)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{PyCall.PyObject, 1}, Base.Generator{Array{Any, 1}, typeof(Base.identity)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{PyCall.PyObject, 1}, PyCall.PyObject, Base.Generator{Array{Any, 1}, typeof(Base.identity)}, Int64})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Float64, String, Float64}}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Array{Float64, 1}, Array{Int64, 1}}, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Array{Float64, 1}, Array{Int64, 1}}, Int64, PyCall.PyObject})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:linewidth, :color, :alpha), Tuple{Float64, String, Float64}}}, getfield(PyCall, Symbol("#108#109"))}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Array{Float64, 1}, Array{Int64, 1}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:linewidth, :color, :alpha), Tuple{Float64, String, Float64}}}})
precompile(Tuple{getfield(Core, Symbol("#Any##kw")), NamedTuple{(:linewidth, :color, :alpha), Tuple{Float64, String, Float64}}, PyCall.PyObject, Array{Float64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base._array_for), Type{Base.Pair{String, Float64}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:linewidth, :color, :alpha), Tuple{Float64, String, Float64}}}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{String, Float64}, 1}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:linewidth, :color, :alpha), Tuple{Float64, String, Float64}}}, getfield(PyCall, Symbol("#108#109"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{String, Float64}, 1}, Base.Pair{String, Float64}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:linewidth, :color, :alpha), Tuple{Float64, String, Float64}}}, getfield(PyCall, Symbol("#108#109"))}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Pair{String, B} where B, 1}, Int64, Array{Base.Pair{String, Float64}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Base.Pair{String, Float64}, 1}, Base.Pair{String, String}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{String, B} where B, 1}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:linewidth, :color, :alpha), Tuple{Float64, String, Float64}}}, getfield(PyCall, Symbol("#108#109"))}, Int64, Int64})
precompile(Tuple{PyCall.PyObject, Int64, Vararg{Any, N} where N})
precompile(Tuple{getfield(PyCall, Symbol("##_#117")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, PyCall.PyObject, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Int64, Float64}, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Int64, Float64}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, getfield(PyCall, Symbol("#36#37")){PyCall.PyObject}}, Int64})
precompile(Tuple{getfield(PyCall, Symbol("#28#29")){Tuple{Integer, Float64}, PyCall.PyObject, Bool}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(PyCall, Symbol("#28#29")){Tuple{Integer, Float64}, PyCall.PyObject, Bool}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Tuple{Integer, Float64}}, PyCall.PyObject})
precompile(Tuple{typeof(PyCall.istuplen), Type{T} where T, Bool, Int64})
precompile(Tuple{typeof(PyCall.tuptype), DataType, Bool, Int64})
precompile(Tuple{typeof(Base.convert), Type{Float64}, PyCall.PyObject})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Int64, Int64}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{getfield(PyCall, Symbol("#28#29")){Tuple{Integer, Integer}, PyCall.PyObject, Bool}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(PyCall, Symbol("#28#29")){Tuple{Integer, Integer}, PyCall.PyObject, Bool}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Tuple{Integer, Integer}}, PyCall.PyObject})
precompile(Tuple{PyCall.PyObject, String})
precompile(Tuple{Type{Tuple}, StaticArrays.Size{(6,)}})
precompile(Tuple{typeof(PyCall.array2py), StaticArrays.SArray{Tuple{6}, Float64, 1, 6}, Int64, Base.IteratorsMD.CartesianIndex{1}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{StaticArrays.SArray{Tuple{6}, Float64, 1, 6}}, Int64, Ptr{Nothing}})
precompile(Tuple{PyCall.PyObject, StaticArrays.SArray{Tuple{6}, Float64, 1, 6}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Array{Float64, 1}}, Int64, Ptr{Nothing}})
precompile(Tuple{PyCall.PyObject, Array{Float64, 1}})
precompile(Tuple{typeof(PyCall.array2py), Array{String, 1}, Int64, Base.IteratorsMD.CartesianIndex{1}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Array{String, 1}}, Int64, Ptr{Nothing}})
precompile(Tuple{PyCall.PyObject, Array{String, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, String, Int64}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:axis, :which, :length), Tuple{String, String, Int64}}}, getfield(PyCall, Symbol("#108#109"))}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:axis, :which, :length), Tuple{String, String, Int64}}}})
precompile(Tuple{getfield(Core, Symbol("#Any##kw")), NamedTuple{(:axis, :which, :length), Tuple{String, String, Int64}}, PyCall.PyObject})
precompile(Tuple{typeof(Base._array_for), Type{Base.Pair{String, String}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:axis, :which, :length), Tuple{String, String, Int64}}}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{String, String}, 1}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:axis, :which, :length), Tuple{String, String, Int64}}}, getfield(PyCall, Symbol("#108#109"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{String, String}, 1}, Base.Pair{String, String}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:axis, :which, :length), Tuple{String, String, Int64}}}, getfield(PyCall, Symbol("#108#109"))}, Int64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Base.Pair{String, String}, 1}, Base.Pair{String, Int64}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{String, B} where B, 1}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:axis, :which, :length), Tuple{String, String, Int64}}}, getfield(PyCall, Symbol("#108#109"))}, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:ax,), T} where T<:Tuple}, Tuple{PyCall.PyObject}})
precompile(Tuple{getfield(PyPlot, Symbol("##sca#98")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(PyPlot.sca), PyCall.PyObject})
precompile(Tuple{getfield(PyPlot, Symbol("##gca#51")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(PyPlot.gca)})
precompile(Tuple{getfield(DynamicalBilliards, Symbol("##plot#151")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(PyPlot.plot), DynamicalBilliards.Disk{Float64}})
precompile(Tuple{getfield(BilharesMarkov, Symbol("##plot#1")), PyCall.PyObject, typeof(PyPlot.plot), DynamicalBilliards.Billiard{Float64, 5, Tuple{DynamicalBilliards.Disk{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, Type{DynamicalBilliards.Particle{T} where T<:AbstractFloat}})
precompile(Tuple{getfield(PyPlot, Symbol("#plot##kw")), NamedTuple{(:ax,), Tuple{PyCall.PyObject}}, typeof(PyPlot.plot), DynamicalBilliards.Billiard{Float64, 5, Tuple{DynamicalBilliards.Disk{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, Type{DynamicalBilliards.Particle{T} where T<:AbstractFloat}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Tuple{Int64, Float64, Int64}, Tuple{Int64, Float64, Int64, Float64}, String, Float64}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:edgecolor, :facecolor, :linestyle, :lw), Tuple{Tuple{Int64, Float64, Int64}, Tuple{Int64, Float64, Int64, Float64}, String, Float64}}}})
precompile(Tuple{typeof(PyCall.array2py), StaticArrays.SArray{Tuple{2}, Float64, 1, 2}, Int64, Base.IteratorsMD.CartesianIndex{1}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{StaticArrays.SArray{Tuple{2}, Float64, 1, 2}, Float64}, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{StaticArrays.SArray{Tuple{2}, Float64, 1, 2}, Float64}, Int64, PyCall.PyObject})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:edgecolor, :facecolor, :linestyle, :lw), Tuple{Tuple{Int64, Float64, Int64}, Tuple{Int64, Float64, Int64, Float64}, String, Float64}}}, getfield(PyCall, Symbol("#108#109"))}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{StaticArrays.SArray{Tuple{2}, Float64, 1, 2}, Float64}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:edgecolor, :facecolor, :linestyle, :lw), Tuple{Tuple{Int64, Float64, Int64}, Tuple{Int64, Float64, Int64, Float64}, String, Float64}}}})
precompile(Tuple{getfield(Core, Symbol("#Any##kw")), NamedTuple{(:edgecolor, :facecolor, :linestyle, :lw), Tuple{Tuple{Int64, Float64, Int64}, Tuple{Int64, Float64, Int64, Float64}, String, Float64}}, PyCall.PyObject, StaticArrays.SArray{Tuple{2}, Float64, 1, 2}, Float64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Tuple{Int64, Float64, Int64}})
precompile(Tuple{typeof(Base._array_for), Type{Base.Pair{String, Tuple{Int64, Float64, Int64}}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:edgecolor, :facecolor, :linestyle, :lw), Tuple{Tuple{Int64, Float64, Int64}, Tuple{Int64, Float64, Int64, Float64}, String, Float64}}}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{String, Tuple{Int64, Float64, Int64}}, 1}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:edgecolor, :facecolor, :linestyle, :lw), Tuple{Tuple{Int64, Float64, Int64}, Tuple{Int64, Float64, Int64, Float64}, String, Float64}}}, getfield(PyCall, Symbol("#108#109"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{String, Tuple{Int64, Float64, Int64}}, 1}, Base.Pair{String, Tuple{Int64, Float64, Int64}}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:edgecolor, :facecolor, :linestyle, :lw), Tuple{Tuple{Int64, Float64, Int64}, Tuple{Int64, Float64, Int64, Float64}, String, Float64}}}, getfield(PyCall, Symbol("#108#109"))}, Int64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Tuple{Int64, Float64, Int64, Float64}})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Pair{String, B} where B, 1}, Int64, Array{Base.Pair{String, Tuple{Int64, Float64, Int64}}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Base.Pair{String, Tuple{Int64, Float64, Int64}}, 1}, Base.Pair{String, Tuple{Int64, Float64, Int64, Float64}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{String, B} where B, 1}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:edgecolor, :facecolor, :linestyle, :lw), Tuple{Tuple{Int64, Float64, Int64}, Tuple{Int64, Float64, Int64, Float64}, String, Float64}}}, getfield(PyCall, Symbol("#108#109"))}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{AbstractString, Any}, Tuple{Int64, Float64, Int64}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{AbstractString, Any}, Tuple{Int64, Float64, Int64, Float64}, String})
precompile(Tuple{Type{PyCall.PyObject}, Tuple{Int64, Float64, Int64, Float64}})
precompile(Tuple{Type{PyCall.PyObject}, Tuple{Int64, Float64, Int64}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:color, :linestyle, :lw), Tuple{Tuple{Int64, Float64, Int64}, String, Float64}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Tuple{Int64, Float64, Int64}, String, Float64}}})
precompile(Tuple{getfield(DynamicalBilliards, Symbol("##plot#153")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(PyPlot.plot), DynamicalBilliards.InfiniteWall{Float64}})
precompile(Tuple{typeof(PyPlot.plot), DynamicalBilliards.InfiniteWall{Float64}, Type{DynamicalBilliards.Particle{T} where T<:AbstractFloat}})
precompile(Tuple{getfield(PyPlot, Symbol("##plot#85")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:color, :linestyle, :lw), Tuple{Tuple{Int64, Float64, Int64}, String, Float64}}}, typeof(PyPlot.plot), Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{getfield(PyCall, Symbol("#pycall##kw")), NamedTuple{(:color, :linestyle, :lw), Tuple{Tuple{Int64, Float64, Int64}, String, Float64}}, typeof(PyCall.pycall), PyCall.PyObject, Type{PyCall.PyAny}, Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{getfield(PyCall, Symbol("##pycall#116")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:color, :linestyle, :lw), Tuple{Tuple{Int64, Float64, Int64}, String, Float64}}}, typeof(PyCall.pycall), PyCall.PyObject, Type{PyCall.PyAny}, Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:color, :linestyle, :lw), Tuple{Tuple{Int64, Float64, Int64}, String, Float64}}}, getfield(PyCall, Symbol("#108#109"))}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Array{Float64, 1}, Array{Float64, 1}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:color, :linestyle, :lw), Tuple{Tuple{Int64, Float64, Int64}, String, Float64}}}})
precompile(Tuple{typeof(Base._array_for), Type{Base.Pair{String, Tuple{Int64, Float64, Int64}}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:color, :linestyle, :lw), Tuple{Tuple{Int64, Float64, Int64}, String, Float64}}}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{String, Tuple{Int64, Float64, Int64}}, 1}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:color, :linestyle, :lw), Tuple{Tuple{Int64, Float64, Int64}, String, Float64}}}, getfield(PyCall, Symbol("#108#109"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{String, Tuple{Int64, Float64, Int64}}, 1}, Base.Pair{String, Tuple{Int64, Float64, Int64}}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:color, :linestyle, :lw), Tuple{Tuple{Int64, Float64, Int64}, String, Float64}}}, getfield(PyCall, Symbol("#108#109"))}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Base.Pair{String, Tuple{Int64, Float64, Int64}}, 1}, Base.Pair{String, String}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{String, B} where B, 1}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:color, :linestyle, :lw), Tuple{Tuple{Int64, Float64, Int64}, String, Float64}}}, getfield(PyCall, Symbol("#108#109"))}, Int64, Int64})
precompile(Tuple{getfield(PyPlot, Symbol("#plot##kw")), NamedTuple{(:ax,), Tuple{PyCall.PyObject}}, typeof(PyPlot.plot), Array{DynamicalBilliards.Particle{Float64}, 1}, Type{DynamicalBilliards.Particle{T} where T<:AbstractFloat}, Array{String, 1}})
precompile(Tuple{typeof(BilharesMarkov._p_plot), Function, Array{DynamicalBilliards.Particle{Float64}, 1}, Array{String, 1}, PyCall.PyObject})
precompile(Tuple{typeof(Base.iterate), StaticArrays.SArray{Tuple{2}, Float64, 1, 2}})
precompile(Tuple{typeof(Base.iterate), StaticArrays.SArray{Tuple{2}, Float64, 1, 2}, Tuple{StaticArrays.SOneTo{2}, Int64}})
precompile(Tuple{getfield(BilharesMarkov, Symbol("#6#7")), Float64, Vararg{Float64, N} where N})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, Float64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, Float64}, Int64, Int64})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{String, 1}, Float64, Int64}}})
precompile(Tuple{typeof(PyCall.array2py), Array{Any, 1}, Int64, Base.IteratorsMD.CartesianIndex{1}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Array{Any, 1}, Array{Any, 1}}, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Array{Any, 1}, Array{Any, 1}}, Int64, PyCall.PyObject})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:color, :s, :zorder), Tuple{Array{String, 1}, Float64, Int64}}}, getfield(PyCall, Symbol("#108#109"))}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Array{Any, 1}, Array{Any, 1}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:color, :s, :zorder), Tuple{Array{String, 1}, Float64, Int64}}}})
precompile(Tuple{getfield(Core, Symbol("#Any##kw")), NamedTuple{(:color, :s, :zorder), Tuple{Array{String, 1}, Float64, Int64}}, PyCall.PyObject, Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Array{String, 1}})
precompile(Tuple{typeof(Base._array_for), Type{Base.Pair{String, Array{String, 1}}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:color, :s, :zorder), Tuple{Array{String, 1}, Float64, Int64}}}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{String, Array{String, 1}}, 1}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:color, :s, :zorder), Tuple{Array{String, 1}, Float64, Int64}}}, getfield(PyCall, Symbol("#108#109"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{String, Array{String, 1}}, 1}, Base.Pair{String, Array{String, 1}}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:color, :s, :zorder), Tuple{Array{String, 1}, Float64, Int64}}}, getfield(PyCall, Symbol("#108#109"))}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Pair{String, B} where B, 1}, Int64, Array{Base.Pair{String, Array{String, 1}}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Base.Pair{String, Array{String, 1}}, 1}, Base.Pair{String, Float64}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{String, B} where B, 1}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:color, :s, :zorder), Tuple{Array{String, 1}, Float64, Int64}}}, getfield(PyCall, Symbol("#108#109"))}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{AbstractString, Any}, Array{String, 1}, String})
precompile(Tuple{Type{PyCall.PyObject}, Array{String, 1}})
precompile(Tuple{typeof(Base.getindex), Array{DynamicalBilliards.Particle{Float64}, 1}, Int64})
precompile(Tuple{typeof(DynamicalBilliards.timeseries!), DynamicalBilliards.Particle{Float64}, DynamicalBilliards.Billiard{Float64, 5, Tuple{DynamicalBilliards.Disk{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, Int64})
precompile(Tuple{getfield(BilharesMarkov, Symbol("##timeseries!#15")), Function, Float64, typeof(DynamicalBilliards.timeseries!), DynamicalBilliards.Particle{Float64}, DynamicalBilliards.Billiard{Float64, 5, Tuple{DynamicalBilliards.Disk{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, Int64})
precompile(Tuple{getfield(BilharesMarkov, Symbol("#16#18")), Float64, Vararg{Float64, N} where N})
precompile(Tuple{typeof(Base.push!), Array{Float64, 1}, Float64})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Base.RefValue{Type{Float64}}, Array{Float64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.convert), Tuple{Base.RefValue{Type{Float64}}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.convert), Tuple{Base.RefValue{Type{Float64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.convert), Tuple{Base.RefValue{Type{Float64}}, Array{Float64, 1}}}})
precompile(Tuple{PyCall.PyObject, Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{getfield(PyCall, Symbol("##_#117")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, PyCall.PyObject, Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Array{Float64, 1}, Array{Float64, 1}}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{getfield(Observables, Symbol("##map#31")), Array{PyCall.PyObject, 1}, typeof(Base.map), Function, Observables.Observable{Any}})
precompile(Tuple{Type{Observables.MapUpdater{F, T} where T where F}, getfield(Main, Symbol("#7#12")){Bool, Int64, Int64, UnionAll, Array{String, 1}, UnionAll, PyPlot.Figure}, Observables.Observable{Any}})
precompile(Tuple{Type{Observables.OnUpdate{F, Args} where Args where F}, Observables.MapUpdater{getfield(Main, Symbol("#7#12")){Bool, Int64, Int64, UnionAll, Array{String, 1}, UnionAll, PyPlot.Figure}, Any}, Tuple{Observables.Observable{Any}}})
precompile(Tuple{getfield(Observables, Symbol("##map#31")), Nothing, typeof(Base.map), Function, Widgets.Widget{:togglebuttons, Any}, Widgets.Widget{:spinbox, Union{Nothing, Int64}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.map!), Function, Observables.Observable{Any}, Widgets.Widget{:togglebuttons, Any}, Widgets.Widget{:spinbox, Union{Nothing, Int64}}, Widgets.Widget{:spinbox, Union{Nothing, Int64}}, Vararg{Any, N} where N})
precompile(Tuple{Type{Observables.MapUpdater{F, T} where T where F}, getfield(Main, Symbol("#6#11")){UnionAll, PyPlot.Figure, Widgets.Widget{:togglebuttons, Any}}, Observables.Observable{Any}})
precompile(Tuple{typeof(Observables.onany), Function, Widgets.Widget{:togglebuttons, Any}, Vararg{Any, N} where N})
precompile(Tuple{Type{Observables.OnUpdate{F, Args} where Args where F}, Observables.MapUpdater{getfield(Main, Symbol("#6#11")){UnionAll, PyPlot.Figure, Widgets.Widget{:togglebuttons, Any}}, Any}, Tuple{Widgets.Widget{:togglebuttons, Any}, Widgets.Widget{:spinbox, Union{Nothing, Int64}}, Widgets.Widget{:spinbox, Union{Nothing, Int64}}, Widgets.Widget{:dropdown, Any}, Widgets.Widget{:button, Int64}}})
precompile(Tuple{typeof(Observables.listeners), Widgets.Widget{:togglebuttons, Any}})
precompile(Tuple{typeof(Observables.on), Function, Widgets.Widget{:togglebuttons, Any}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{WeakRef, Any}, Widgets.Widget{:togglebuttons, Any}})
precompile(Tuple{typeof(Base.lock), getfield(Base, Symbol("#493#494")){Base.WeakKeyDict{Any, Any}, Widgets.Widget{:togglebuttons, Any}}, Base.ReentrantLock})
precompile(Tuple{typeof(Base.lock), getfield(Base, Symbol("#495#496")){Base.WeakKeyDict{Any, Any}, Widgets.Widget{:togglebuttons, Any}}, Base.ReentrantLock})
precompile(Tuple{typeof(WebIO.setup_comm), Function, Widgets.Widget{:togglebuttons, Any}})
precompile(Tuple{typeof(Observables.listeners), Widgets.Widget{:spinbox, Union{Nothing, Int64}}})
precompile(Tuple{typeof(Observables.on), Function, Widgets.Widget{:spinbox, Union{Nothing, Int64}}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{WeakRef, Any}, Widgets.Widget{:spinbox, Union{Nothing, Int64}}})
precompile(Tuple{typeof(Base.lock), getfield(Base, Symbol("#493#494")){Base.WeakKeyDict{Any, Any}, Widgets.Widget{:spinbox, Union{Nothing, Int64}}}, Base.ReentrantLock})
precompile(Tuple{typeof(Base.lock), getfield(Base, Symbol("#495#496")){Base.WeakKeyDict{Any, Any}, Widgets.Widget{:spinbox, Union{Nothing, Int64}}}, Base.ReentrantLock})
precompile(Tuple{typeof(WebIO.setup_comm), Function, Widgets.Widget{:spinbox, Union{Nothing, Int64}}})
precompile(Tuple{typeof(Base.isequal), Widgets.Widget{:spinbox, Union{Nothing, Int64}}, WeakRef})
precompile(Tuple{typeof(Base.isequal), PyCall.PyObject, Widgets.Widget{:spinbox, Union{Nothing, Int64}}})
precompile(Tuple{typeof(Base.:(==)), Widgets.Widget{:spinbox, Union{Nothing, Int64}}, WeakRef})
precompile(Tuple{typeof(Base.isequal), Widgets.Widget{:spinbox, Union{Nothing, Int64}}, Observables.Observable{Int64}})
precompile(Tuple{typeof(Base.isequal), Widgets.Widget{:spinbox, Union{Nothing, Int64}}, Observables.Observable{Any}})
precompile(Tuple{typeof(Observables.listeners), Widgets.Widget{:dropdown, Any}})
precompile(Tuple{typeof(Observables.on), Function, Widgets.Widget{:dropdown, Any}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{WeakRef, Any}, Widgets.Widget{:dropdown, Any}})
precompile(Tuple{typeof(Base.lock), getfield(Base, Symbol("#493#494")){Base.WeakKeyDict{Any, Any}, Widgets.Widget{:dropdown, Any}}, Base.ReentrantLock})
precompile(Tuple{typeof(Base.lock), getfield(Base, Symbol("#495#496")){Base.WeakKeyDict{Any, Any}, Widgets.Widget{:dropdown, Any}}, Base.ReentrantLock})
precompile(Tuple{typeof(WebIO.setup_comm), Function, Widgets.Widget{:dropdown, Any}})
precompile(Tuple{typeof(Base.isequal), Widgets.Widget{:dropdown, Any}, WeakRef})
precompile(Tuple{typeof(Base.isequal), PyCall.PyObject, Widgets.Widget{:dropdown, Any}})
precompile(Tuple{typeof(Base.:(==)), Widgets.Widget{:dropdown, Any}, WeakRef})
precompile(Tuple{typeof(Base.isequal), Widgets.Widget{:dropdown, Any}, Observables.Observable{Any}})
precompile(Tuple{typeof(Observables.listeners), Widgets.Widget{:button, Int64}})
precompile(Tuple{typeof(Observables.on), Function, Widgets.Widget{:button, Int64}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{WeakRef, Any}, Widgets.Widget{:button, Int64}})
precompile(Tuple{typeof(Base.lock), getfield(Base, Symbol("#493#494")){Base.WeakKeyDict{Any, Any}, Widgets.Widget{:button, Int64}}, Base.ReentrantLock})
precompile(Tuple{typeof(Base.lock), getfield(Base, Symbol("#495#496")){Base.WeakKeyDict{Any, Any}, Widgets.Widget{:button, Int64}}, Base.ReentrantLock})
precompile(Tuple{typeof(WebIO.setup_comm), Function, Widgets.Widget{:button, Int64}})
precompile(Tuple{typeof(Base.map!), Function, Observables.Observable{Any}, Widgets.Widget{:dropdown, Any}})
precompile(Tuple{getfield(Observables, Symbol("##map#31")), Observables.Observable{Any}, typeof(Base.map), Function, Widgets.Widget{:dropdown, Any}})
precompile(Tuple{Type{Observables.MapUpdater{F, T} where T where F}, getfield(Main, Symbol("#5#10")), Observables.Observable{Any}})
precompile(Tuple{typeof(Observables.onany), Function, Widgets.Widget{:dropdown, Any}})
precompile(Tuple{Type{Observables.OnUpdate{F, Args} where Args where F}, Observables.MapUpdater{getfield(Main, Symbol("#5#10")), Any}, Tuple{Widgets.Widget{:dropdown, Any}}})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{Any}, Tuple{Observables.Observable{Any}, Bool}})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{Any}, Tuple{Observables.Observable{Any}, Bool}})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{Observables.Observable{Any}, Bool}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Observables.Observable{Any}, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Observables.Observable{Any}, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Observables.Observable{Any}})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Multimedia.MIME{Symbol("text/plain")}, Observables.Observable{Any}})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Nothing})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Widgets.Widget{:spinbox, Union{Nothing, Int64}}, 1}}})
precompile(Tuple{typeof(CSSUtil.container), Array{Widgets.Widget{:spinbox, Union{Nothing, Int64}}, 1}})
precompile(Tuple{typeof(CSSUtil.hbox), Array{Widgets.Widget{:spinbox, Union{Nothing, Int64}}, 1}})
precompile(Tuple{typeof(CSSUtil.hbox), Widgets.Widget{:spinbox, Union{Nothing, Int64}}, Widgets.Widget{:spinbox, Union{Nothing, Int64}}})
precompile(Tuple{getfield(WebIO, Symbol("#dom#13")){getfield(WebIO, Symbol("#dom#12#14")){Base.Dict{Any, Any}, WebIO.DOM}}, Widgets.Widget{:spinbox, Union{Nothing, Int64}}, Vararg{Widgets.Widget{:spinbox, Union{Nothing, Int64}}, N} where N})
precompile(Tuple{getfield(WebIO, Symbol("#dom#12#14")){Base.Dict{Any, Any}, WebIO.DOM}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, getfield(WebIO, Symbol("#dom#13")){getfield(WebIO, Symbol("#dom#12#14")){Base.Dict{Any, Any}, WebIO.DOM}}, Widgets.Widget{:spinbox, Union{Nothing, Int64}}, Vararg{Widgets.Widget{:spinbox, Union{Nothing, Int64}}, N} where N})
precompile(Tuple{typeof(Widgets.node), WebIO.DOM, Widgets.Widget{:spinbox, Union{Nothing, Int64}}, Vararg{Widgets.Widget{:spinbox, Union{Nothing, Int64}}, N} where N})
precompile(Tuple{getfield(WebIO, Symbol("##node#26")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Widgets.node), WebIO.DOM, Vararg{Any, N} where N})
precompile(Tuple{Type{WebIO.Node{T} where T}, WebIO.DOM, Widgets.Widget{:spinbox, Union{Nothing, Int64}}, Vararg{Widgets.Widget{:spinbox, Union{Nothing, Int64}}, N} where N})
precompile(Tuple{getfield(WebIO, Symbol("##Node#25")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{WebIO.Node{T} where T}, WebIO.DOM, Widgets.Widget{:spinbox, Union{Nothing, Int64}}, Vararg{Widgets.Widget{:spinbox, Union{Nothing, Int64}}, N} where N})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Any, Any}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Base.Dict{String, String}, Symbol})
precompile(Tuple{typeof(WebIO.recmerge!), Base.Dict{Any, Any}, Base.Dict{Symbol, Base.Dict{String, String}}, typeof(WebIO.recmerge)})
precompile(Tuple{typeof(CSSUtil.hbox), Widgets.Widget{:dropdown, Any}, Widgets.Widget{:dropdown, Any}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.vect), Widgets.Widget{:dropdown, Any}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Widgets.Widget{:dropdown, Any}, Widgets.Widget{:dropdown, Any}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Widgets.Widget{:dropdown, Any}, Observables.Observable{Any}})
precompile(Tuple{typeof(Base.promote_type), Type{Widgets.Widget{:dropdown, Any}}, Type{Observables.AbstractObservable{Any}}})
precompile(Tuple{Type{Array{Observables.AbstractObservable{Any}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Observables.AbstractObservable{Any}, 1}, Tuple{Widgets.Widget{:dropdown, Any}, Widgets.Widget{:dropdown, Any}, Observables.Observable{Any}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Observables.AbstractObservable{Any}, 1}}})
precompile(Tuple{typeof(CSSUtil.container), Array{Observables.AbstractObservable{Any}, 1}})
precompile(Tuple{typeof(CSSUtil.hbox), Array{Observables.AbstractObservable{Any}, 1}})
precompile(Tuple{getfield(WebIO, Symbol("#dom#13")){getfield(WebIO, Symbol("#dom#12#14")){Base.Dict{Any, Any}, WebIO.DOM}}, Widgets.Widget{:dropdown, Any}, Vararg{Any, N} where N})
precompile(Tuple{getfield(WebIO, Symbol("#dom#12#14")){Base.Dict{Any, Any}, WebIO.DOM}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, getfield(WebIO, Symbol("#dom#13")){getfield(WebIO, Symbol("#dom#12#14")){Base.Dict{Any, Any}, WebIO.DOM}}, Widgets.Widget{:dropdown, Any}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Widgets.node), WebIO.DOM, Widgets.Widget{:dropdown, Any}, Vararg{Any, N} where N})
precompile(Tuple{Type{WebIO.Node{T} where T}, WebIO.DOM, Widgets.Widget{:dropdown, Any}, Vararg{Any, N} where N})
precompile(Tuple{getfield(WebIO, Symbol("##Node#25")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{WebIO.Node{T} where T}, WebIO.DOM, Widgets.Widget{:dropdown, Any}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.isabstracttype), Any})
precompile(Tuple{typeof(ColorTypes.basetype), Any})
precompile(Tuple{typeof(Base.eltype), Type{C}} where C<:(ColorTypes.Colorant{T, N} where N where T))
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.Colorant{T, N}}} where N where T)
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.AbstractRGB{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.RGB24}})
precompile(Tuple{typeof(Base.typename), UnionAll})
precompile(Tuple{typeof(ColorTypes._eltypes_supported), Type{C}} where C<:(ColorTypes.Colorant{T, N} where N where T))
precompile(Tuple{typeof(Base.nameof), UnionAll})
precompile(Tuple{typeof(Base.nameof), DataType})
precompile(Tuple{typeof(ColorTypes._parameter_upper_bound), UnionAll, Any})
precompile(Tuple{typeof(ColorTypes._eltypes_supported), Type{ColorTypes.AbstractRGB{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}})
precompile(Tuple{typeof(Base.nameof), UnionAll})
precompile(Tuple{typeof(Base.nameof), DataType})
precompile(Tuple{typeof(ColorTypes._parameter_upper_bound), UnionAll, Int64})
precompile(Tuple{typeof(ColorTypes._eltypes_supported), Type{ColorTypes.RGB{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.ColorAlpha{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, FixedPointNumbers.Normed{UInt8, 8}, 4}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(CSSUtil.empty)})
precompile(Tuple{typeof(CSSUtil.style), Base.Pair{String, String}})
precompile(Tuple{typeof(CSSUtil.assertoneof), String, Array{String, 1}, String})
precompile(Tuple{typeof(CSSUtil.assertstyle), String})
precompile(Tuple{typeof(Base.Unicode.uppercasefirst), String})
precompile(Tuple{typeof(CSSUtil._border_prefix), String})
precompile(Tuple{getfield(Base, Symbol("##parse#346")), Int64, typeof(Base.parse), Type{UInt32}, Base.SubString{String}})
precompile(Tuple{typeof(Colors.chop1), Base.SubString{String}})
precompile(Tuple{typeof(Base._round_digits), Float64, Base.Rounding.RoundingMode{:Nearest}, Int64, Int64})
precompile(Tuple{typeof(FixedPointNumbers.throw_converterror), Type{FixedPointNumbers.Normed{UInt8, 8}}, Float64})
precompile(Tuple{typeof(Colors.parse_rgb), Base.SubString{String}})
precompile(Tuple{typeof(Colors.parse_hsl_sl), Base.SubString{String}})
precompile(Tuple{typeof(Colors.parse_alpha_num), Base.SubString{String}})
precompile(Tuple{typeof(ColorTypes.throw_colorerror_), Type{FixedPointNumbers.Normed{UInt8, 8}}, Tuple{FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, Float32}})
precompile(Tuple{typeof(ColorTypes.throw_colorerror), Type{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}}, Tuple{FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, Float32}})
precompile(Tuple{typeof(ColorTypes.color_type), Type{ColorTypes.TransparentColor{ColorTypes.HSL{T}, T, 4} where T<:AbstractFloat}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Tuple{Int64, Int64, Int64}}, Base.SubString{String}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Tuple{Int64, Int64, Int64}}, String})
precompile(Tuple{getfield(Base.Unicode, Symbol("##titlecase#2")), getfield(Base, Symbol("#66#67")){typeof(Base.Unicode.iscased)}, Bool, typeof(Base.Unicode.titlecase), String})
precompile(Tuple{typeof(Colors._parse_colorant), String})
precompile(Tuple{typeof(CSSUtil.border), String, String, Measures.Length{:px, Float64}, String, WebIO.Node{WebIO.DOM}})
precompile(Tuple{getfield(CSSUtil, Symbol("##hline#4")), String, Measures.Length{:px, Float64}, String, typeof(CSSUtil.hline)})
precompile(Tuple{typeof(CSSUtil.hline)})
precompile(Tuple{typeof(Base.print_to_string), Float64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Core.Compiler.zero), Type{UInt8}})
precompile(Tuple{typeof(Base.collect_to!), Array{UInt8, 1}, Base.Generator{Base.StepRange{UInt8, UInt8}, getfield(Colors, Symbol("#1#2")){UInt32, UInt8}}, Int64, UInt8})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.StepRange{UInt8, UInt8}, getfield(Colors, Symbol("#1#2")){UInt32, UInt8}}})
precompile(Tuple{typeof(JSON.Writer.lower), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(WebIO.recmerge!), Base.Dict{Any, Any}, Base.Dict{String, String}, typeof(WebIO.recmerge)})
precompile(Tuple{typeof(WebIO.recmerge), Base.Dict{String, String}, Base.Dict{String, String}})
precompile(Tuple{typeof(CSSUtil.vbox), WebIO.Node{WebIO.DOM}, WebIO.Node{WebIO.DOM}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.vect), WebIO.Node{WebIO.DOM}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), WebIO.Node{WebIO.DOM}, WebIO.Node{WebIO.DOM}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), WebIO.Node{WebIO.DOM}, Widgets.Widget{:button, Int64}})
precompile(Tuple{typeof(Base.promote_type), Type{WebIO.Node{WebIO.DOM}}, Type{Any}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Tuple{WebIO.Node{WebIO.DOM}, WebIO.Node{WebIO.DOM}, WebIO.Node{WebIO.DOM}, Widgets.Widget{:button, Int64}}})
precompile(Tuple{getfield(WebIO, Symbol("#dom#13")){getfield(WebIO, Symbol("#dom#12#14")){Base.Dict{Any, Any}, WebIO.DOM}}, WebIO.Node{WebIO.DOM}, Vararg{Any, N} where N})
precompile(Tuple{getfield(WebIO, Symbol("#dom#12#14")){Base.Dict{Any, Any}, WebIO.DOM}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, getfield(WebIO, Symbol("#dom#13")){getfield(WebIO, Symbol("#dom#12#14")){Base.Dict{Any, Any}, WebIO.DOM}}, WebIO.Node{WebIO.DOM}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Widgets.node), WebIO.DOM, WebIO.Node{WebIO.DOM}, Vararg{Any, N} where N})
precompile(Tuple{Type{WebIO.Node{T} where T}, WebIO.DOM, WebIO.Node{WebIO.DOM}, Vararg{Any, N} where N})
precompile(Tuple{getfield(WebIO, Symbol("##Node#25")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{WebIO.Node{T} where T}, WebIO.DOM, WebIO.Node{WebIO.DOM}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{Any}, Tuple{WebIO.Node{WebIO.DOM}, Bool}})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{Any}, Tuple{WebIO.Node{WebIO.DOM}, Bool}})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{WebIO.Node{WebIO.DOM}, Bool}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{WebIO.Node{WebIO.DOM}, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{WebIO.Node{WebIO.DOM}, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.repr), Base.Dict{String, String}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Pair{String, String}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Widgets.Widget{:spinbox, Union{Nothing, Int64}}})
precompile(Tuple{typeof(WebIO._show), Base.IOContext{REPL.Terminals.TTYTerminal}, Widgets.Widget{:spinbox, Union{Nothing, Int64}}, Int64})
precompile(Tuple{typeof(Base.show_circular), Base.IOContext{REPL.Terminals.TTYTerminal}, Any})
precompile(Tuple{typeof(Base._show_default), Base.IOContext{REPL.Terminals.TTYTerminal}, Any})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Any})
precompile(Tuple{typeof(Base.sizeof), WebIO.Node{WebIO.DOM}})
precompile(Tuple{typeof(Base.sizeof), WebIO.DOM})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Symbol})
precompile(Tuple{typeof(Base.show_unquoted_expr_fallback), Base.IOContext{REPL.Terminals.TTYTerminal}, Expr, Int64, Int64})
precompile(Tuple{typeof(Base.show_list), Base.IOContext{REPL.Terminals.TTYTerminal}, Array{Any, 1}, String, Int64, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.show_enclosed_list), Base.IOContext{REPL.Terminals.TTYTerminal}, Char, Array{Any, 1}, String, Char, Int64, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.show_list), Base.IOContext{REPL.Terminals.TTYTerminal}, Array{Any, 1}, Symbol, Int64, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.show_enclosed_list), Base.IOContext{REPL.Terminals.TTYTerminal}, Char, Array{Any, 1}, Symbol, Char, Int64, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.show_list), Base.IOContext{REPL.Terminals.TTYTerminal}, Array{Any, 1}, String, Int64, Int64, Int64, Bool})
precompile(Tuple{typeof(Base.show_list), Base.IOContext{REPL.Terminals.TTYTerminal}, Array{Any, 1}, String, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.show_enclosed_list), Base.IOContext{REPL.Terminals.TTYTerminal}, String, Array{Any, 1}, String, String, Int64, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.show_generator), Base.IOContext{REPL.Terminals.TTYTerminal}, Expr, Int64, Int64})
precompile(Tuple{typeof(Base.show_block), Base.IOContext{REPL.Terminals.TTYTerminal}, String, Array{Any, 1}, Expr, Int64, Int64})
precompile(Tuple{typeof(Base.show_unquoted), Base.IOContext{REPL.Terminals.TTYTerminal}, Expr, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.show_unquoted_quote_expr), Base.IOContext{REPL.Terminals.TTYTerminal}, Any, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.print), Base.IOContext{REPL.Terminals.TTYTerminal}, Symbol})
precompile(Tuple{typeof(Base.typeinfo_prefix), Base.IOContext{REPL.Terminals.TTYTerminal}, FunctionalCollections.PersistentVector{Any}})
precompile(Tuple{typeof(Base.isassigned), FunctionalCollections.PersistentVector{Any}, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{REPL.Terminals.TTYTerminal}, FunctionalCollections.PersistentVector{Any}, Char, String, String, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{REPL.Terminals.TTYTerminal}, FunctionalCollections.PersistentVector{Any}, String, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{REPL.Terminals.TTYTerminal}, FunctionalCollections.PersistentVector{Any}, Char, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_vector), Base.IOContext{REPL.Terminals.TTYTerminal}, FunctionalCollections.PersistentVector{Any}, Char, Char})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, FunctionalCollections.PersistentVector{Any}})
precompile(Tuple{typeof(Base.typeinfo_eltype), Type{T} where T})
precompile(Tuple{typeof(Base.:(==)), Type{T} where T, Nothing})
precompile(Tuple{typeof(Base.sizeof), WebIO.Scope})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, String})
precompile(Tuple{typeof(Base.typeinfo_prefix), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.isdelimited), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Pair{Symbol, Any}})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Pair{Symbol, Any}})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.isdelimited), Base.IOContext{REPL.Terminals.TTYTerminal}, String})
precompile(Tuple{typeof(Base.isdelimited), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.typeinfo_prefix), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.isdelimited), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Pair{Any, Any}})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Pair{Any, Any}})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.isdelimited), Base.IOContext{REPL.Terminals.TTYTerminal}, Int64})
precompile(Tuple{typeof(Base.typeinfo_prefix), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Dict{String, Tuple{Observables.AbstractObservable{T} where T, Union{Nothing, Bool}}}})
precompile(Tuple{typeof(Base.isdelimited), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Pair{String, Tuple{Observables.AbstractObservable{T} where T, Union{Nothing, Bool}}}})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Pair{String, Tuple{Observables.AbstractObservable{T} where T, Union{Nothing, Bool}}}})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Dict{String, Tuple{Observables.AbstractObservable{T} where T, Union{Nothing, Bool}}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Core.TypeName})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{Tuple{Observables.AbstractObservable{T} where T, Union{Nothing, Bool}}}})
precompile(Tuple{typeof(Base.isdelimited), Base.IOContext{REPL.Terminals.TTYTerminal}, Tuple{Observables.Observable{Int64}, Nothing}})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Observables.Observable{Int64}})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{REPL.Terminals.TTYTerminal}, Tuple{Observables.Observable{Int64}, Nothing}, Char, Char, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Tuple{Observables.Observable{Int64}, Nothing}})
precompile(Tuple{Type{Base.Pair{Symbol, UnionAll}}, Any, Any})
precompile(Tuple{typeof(Base.convert), Type{UnionAll}, Type{Observables.AbstractObservable{T} where T}})
precompile(Tuple{typeof(Base.convert), Type{Union}, Type{Union{Nothing, Bool}}})
precompile(Tuple{typeof(Base.isdelimited), Base.IOContext{REPL.Terminals.TTYTerminal}, Tuple{Observables.Observable{Union{Nothing, Int64}}, Nothing}})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Observables.Observable{Union{Nothing, Int64}}})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{REPL.Terminals.TTYTerminal}, Tuple{Observables.Observable{Union{Nothing, Int64}}, Nothing}, Char, Char, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Tuple{Observables.Observable{Union{Nothing, Int64}}, Nothing}})
precompile(Tuple{typeof(Base.typeinfo_prefix), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Set{String}})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Set{String}, Char, String, String, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Set{String}, String, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Set{String}, Char, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_vector), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Set{String}, Char, Char})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Set{String}})
precompile(Tuple{typeof(Base.typeinfo_prefix), Base.IOContext{REPL.Terminals.TTYTerminal}, Array{WebIO.Asset, 1}})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{REPL.Terminals.TTYTerminal}, Array{WebIO.Asset, 1}, Char, String, String, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{REPL.Terminals.TTYTerminal}, Array{WebIO.Asset, 1}, String, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{REPL.Terminals.TTYTerminal}, Array{WebIO.Asset, 1}, Char, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_vector), Base.IOContext{REPL.Terminals.TTYTerminal}, Array{WebIO.Asset, 1}, Char, Char})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Array{WebIO.Asset, 1}})
precompile(Tuple{typeof(Base.sizeof), WebIO.Asset})
precompile(Tuple{typeof(Base.isdelimited), Base.IOContext{REPL.Terminals.TTYTerminal}, Array{Any, 1}})
precompile(Tuple{typeof(Base.typeinfo_prefix), Base.IOContext{REPL.Terminals.TTYTerminal}, Array{Any, 1}})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{REPL.Terminals.TTYTerminal}, Array{Any, 1}, Char, String, String, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{REPL.Terminals.TTYTerminal}, Array{Any, 1}, String, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{REPL.Terminals.TTYTerminal}, Array{Any, 1}, Char, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_vector), Base.IOContext{REPL.Terminals.TTYTerminal}, Array{Any, 1}, Char, Char})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Array{Any, 1}})
precompile(Tuple{typeof(Base.sizeof), WebIO.JSString})
precompile(Tuple{typeof(Base.sizeof), WebIO.ConnectionPool})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Channel{Any}})
precompile(Tuple{typeof(Base.print_to_string), Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.typeinfo_prefix), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Set{WebIO.AbstractConnection}})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Set{WebIO.AbstractConnection}, Char, String, String, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Set{WebIO.AbstractConnection}, String, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Set{WebIO.AbstractConnection}, Char, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_vector), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Set{WebIO.AbstractConnection}, Char, Char})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Set{WebIO.AbstractConnection}})
precompile(Tuple{typeof(Base.sizeof), Base.GenericCondition{Base.AlwaysLockedST}})
precompile(Tuple{typeof(Base.sizeof), Base.InvasiveLinkedList{Task}})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Task})
precompile(Tuple{typeof(Base.sizeof), Base.AlwaysLockedST})
precompile(Tuple{getfield(Base, Symbol("##string#319")), Int64, Int64, typeof(Base.string), Int16})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Int16})
precompile(Tuple{typeof(Base.typeinfo_prefix), Base.IOContext{REPL.Terminals.TTYTerminal}, Array{WebIO.JSString, 1}})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{REPL.Terminals.TTYTerminal}, Array{WebIO.JSString, 1}, Char, String, String, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{REPL.Terminals.TTYTerminal}, Array{WebIO.JSString, 1}, String, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{REPL.Terminals.TTYTerminal}, Array{WebIO.JSString, 1}, Char, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_vector), Base.IOContext{REPL.Terminals.TTYTerminal}, Array{WebIO.JSString, 1}, Char, Char})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Array{WebIO.JSString, 1}})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Widgets.Widget{:dropdown, Any}})
precompile(Tuple{typeof(WebIO._show), Base.IOContext{REPL.Terminals.TTYTerminal}, Widgets.Widget{:dropdown, Any}, Int64})
precompile(Tuple{typeof(Base.isdelimited), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Dict{Union{String, Symbol}, Any}})
precompile(Tuple{typeof(Base.typeinfo_prefix), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Dict{Union{String, Symbol}, Any}})
precompile(Tuple{typeof(Base.isdelimited), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Pair{Union{String, Symbol}, Any}})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Pair{Union{String, Symbol}, Any}})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Dict{Union{String, Symbol}, Any}})
precompile(Tuple{typeof(Base.isdelimited), Base.IOContext{REPL.Terminals.TTYTerminal}, Tuple{Observables.Observable{Any}, Nothing}})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{REPL.Terminals.TTYTerminal}, Tuple{Observables.Observable{Any}, Nothing}, Char, Char, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Tuple{Observables.Observable{Any}, Nothing}})
precompile(Tuple{typeof(Base.typeinfo_prefix), Base.IOContext{REPL.Terminals.TTYTerminal}, Array{OrderedCollections.OrderedDict{K, V} where V where K, 1}})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Revise.RelocatableExpr})
precompile(Tuple{Type{Revise.RelocatableExpr}, Nothing})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{REPL.Terminals.TTYTerminal}, Array{OrderedCollections.OrderedDict{K, V} where V where K, 1}, Char, String, String, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{REPL.Terminals.TTYTerminal}, Array{OrderedCollections.OrderedDict{K, V} where V where K, 1}, String, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{REPL.Terminals.TTYTerminal}, Array{OrderedCollections.OrderedDict{K, V} where V where K, 1}, Char, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_vector), Base.IOContext{REPL.Terminals.TTYTerminal}, Array{OrderedCollections.OrderedDict{K, V} where V where K, 1}, Char, Char})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Array{OrderedCollections.OrderedDict{K, V} where V where K, 1}})
precompile(Tuple{typeof(Base.string), Core.TypeName})
precompile(Tuple{typeof(Base.typeinfo_prefix), Base.IOContext{REPL.Terminals.TTYTerminal}, OrderedCollections.OrderedDict{String, Any}})
precompile(Tuple{typeof(Base.iterate), OrderedCollections.OrderedDict{String, Any}})
precompile(Tuple{typeof(Base.iterate), OrderedCollections.OrderedDict{String, Any}, Int64})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, OrderedCollections.OrderedDict{String, Any}})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Pair{String, String}})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Pair{String, Int64}})
precompile(Tuple{typeof(WebIO._show), Base.IOContext{REPL.Terminals.TTYTerminal}, Observables.Observable{Any}, Int64})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Widgets.Widget{:button, Int64}})
precompile(Tuple{typeof(WebIO._show), Base.IOContext{REPL.Terminals.TTYTerminal}, Widgets.Widget{:button, Int64}, Int64})
precompile(Tuple{typeof(Base.isdelimited), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.typeinfo_prefix), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.isdelimited), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Pair{String, Any}})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Pair{String, Any}})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.isdelimited), Base.IOContext{REPL.Terminals.TTYTerminal}, Tuple{Observables.Observable{Bool}, Nothing}})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Observables.Observable{Bool}})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{REPL.Terminals.TTYTerminal}, Tuple{Observables.Observable{Bool}, Nothing}, Char, Char, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Tuple{Observables.Observable{Bool}, Nothing}})
precompile(Tuple{Type{Base.Dict{Symbol, Int64}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, Int64}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Int64}, Int64, Symbol})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{Symbol, Int64}, Vararg{Base.Pair{Symbol, Int64}, N} where N})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{Base.SubString{String}}, Tuple{String}}})
precompile(Tuple{typeof(Base.read), Base.Cmd})
precompile(Tuple{typeof(Base.read), Base.Cmd, Type{String}})
precompile(Tuple{typeof(Blink.AtomShell.hascommand), String})
precompile(Tuple{typeof(Blink.AtomShell.inspector)})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{Base.SubString{String}}, Tuple{Base.Cmd}}})
precompile(Tuple{typeof(Blink.AtomShell.inspector), Int64})
precompile(Tuple{getfield(Blink.AtomShell, Symbol("##init#6")), Bool, typeof(Blink.AtomShell.init)})
precompile(Tuple{getfield(Blink.AtomShell, Symbol("##shell#9")), Bool, typeof(Blink.AtomShell.shell)})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, Int64}, Symbol})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Any, Any}, Base.Dict{Symbol, Int64}})
precompile(Tuple{typeof(Base.filter), getfield(MacroTools, Symbol("#15#17")), Array{Any, 1}})
precompile(Tuple{typeof(Base.filter), getfield(MacroTools, Symbol("#16#18")), Array{Any, 1}})
precompile(Tuple{typeof(MacroTools.rmlines), Expr})
precompile(Tuple{typeof(JSExpr.jsexpr), QuoteNode})
precompile(Tuple{typeof(JSExpr.jsexpr), Expr})
precompile(Tuple{typeof(JSExpr._flatten), JSExpr.F})
precompile(Tuple{typeof(JSExpr.jsstring), Expr})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Int64, Base.GenericCondition{Base.AlwaysLockedST}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Int64, Base.GenericCondition{Base.AlwaysLockedST}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Int64, Base.GenericCondition{Base.AlwaysLockedST}}, Base.GenericCondition{Base.AlwaysLockedST}, Int64})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Sockets.TCPSocket}, JSON.Serializations.StandardSerialization, Base.Pair{Any, Any}})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Sockets.TCPSocket}, JSON.Serializations.StandardSerialization, Base.Dict{Any, Any}})
precompile(Tuple{getfield(Blink, Symbol("##js#3")), Bool, typeof(Blink.js), Blink.AtomShell.Electron, WebIO.JSString})
precompile(Tuple{getfield(Blink, Symbol("##js#4")), Bool, typeof(Blink.js), Blink.AtomShell.Electron, Expr})
precompile(Tuple{typeof(Blink.AtomShell.raw_window), Blink.AtomShell.Electron, Base.Dict{Symbol, Int64}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Int64, WeakRef}, Int64})
precompile(Tuple{Type{Base.Dict{String, Any}}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.hash), Distributed.Future, UInt64})
precompile(Tuple{typeof(Base.isequal), PyCall.PyObject, Distributed.Future})
precompile(Tuple{typeof(Base.:(==)), Distributed.Future, WeakRef})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{WeakRef, Nothing}, Distributed.Future})
precompile(Tuple{typeof(Base.lock), getfield(Base, Symbol("#475#476")){Distributed.AbstractRemoteRef, Base.WeakKeyDict{Distributed.AbstractRemoteRef, Nothing}, Distributed.Future, Nothing}, Base.ReentrantLock})
precompile(Tuple{getfield(Distributed, Symbol("#129#130")){Distributed.ProcessGroup, Distributed.RRID, Int64}})
precompile(Tuple{typeof(Base.lock), getfield(Distributed, Symbol("#129#130")){Distributed.ProcessGroup, Distributed.RRID, Int64}, Base.ReentrantLock})
precompile(Tuple{typeof(Distributed.send_del_client), Distributed.Future})
precompile(Tuple{typeof(Base.lock), getfield(Base, Symbol("#473#474")){Base.WeakKeyDict{Distributed.AbstractRemoteRef, Nothing}, Nothing, Distributed.Future}, Base.ReentrantLock})
precompile(Tuple{typeof(Distributed.test_existing_ref), Distributed.Future})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Int64, WeakRef}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Int64, WeakRef}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Int64, WeakRef}, WeakRef, Int64})
precompile(Tuple{Type{Blink.Page}, Nothing})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Dict{Symbol, Int64}})
precompile(Tuple{typeof(Blink.AtomShell.raw_window), Blink.AtomShell.Electron, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.wait), Blink.AtomShell.Window})
precompile(Tuple{getfield(Blink.AtomShell, Symbol("##Window#11")), Bool, Type{Blink.AtomShell.Window}, Blink.AtomShell.Electron, Blink.Page, Base.Dict{Symbol, Int64}})
precompile(Tuple{getfield(Blink.AtomShell, Symbol("##Window#10")), Bool, Type{Blink.AtomShell.Window}, Blink.AtomShell.Electron, Base.Dict{Symbol, Int64}})
precompile(Tuple{Type{Blink.AtomShell.Window}, Base.Dict{Symbol, Int64}})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{String}, Tuple{Array{Any, 1}}, Tuple{String}, Tuple{Base.SubString{String}}, Tuple{Int64}}})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}, Char, String, String, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}, String, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}, Char, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_vector), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Any, 1}, Char, Char})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.print_to_string), Array{Any, 1}})
precompile(Tuple{typeof(Base.arg_gen), Array{Any, 1}})
precompile(Tuple{typeof(Base.arg_gen), Int64})
precompile(Tuple{getfield(Base, Symbol("#run##kw")), NamedTuple{(:wait,), Tuple{Bool}}, typeof(Base.run), Base.Cmd})
precompile(Tuple{getfield(Blink.AtomShell, Symbol("##try_connect#5")), Float64, Int64, typeof(Blink.AtomShell.try_connect), Sockets.IPv4, Vararg{Any, N} where N})
precompile(Tuple{typeof(Sockets.connect!), Sockets.TCPSocket, Sockets.IPv4, Int64})
precompile(Tuple{typeof(Sockets.connect), Sockets.IPv4, Int64})
precompile(Tuple{typeof(Base.convert), Type{Any}, Base.IOError})
precompile(Tuple{Type{Blink.AtomShell.Electron}, Base.Process, Sockets.TCPSocket})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Function, String})
precompile(Tuple{getfield(MacroTools, Symbol("#16#18")), Symbol})
precompile(Tuple{getfield(MacroTools, Symbol("#16#18")), Base.Dict{Any, Any}})
precompile(Tuple{typeof(MacroTools.unblock), Expr})
precompile(Tuple{typeof(MacroTools.normalise), Expr})
precompile(Tuple{typeof(MacroTools.bname), Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Expr, Symbol})
precompile(Tuple{typeof(MacroTools.store!), Base.Dict{Any, Any}, Symbol, Expr})
precompile(Tuple{typeof(MacroTools.isslurp), Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Array{Any, 1}, Symbol})
precompile(Tuple{typeof(MacroTools.store!), Base.Dict{Any, Any}, Symbol, Array{Any, 1}})
precompile(Tuple{typeof(MacroTools.match), Expr, Expr, Base.Dict{Any, Any}})
precompile(Tuple{typeof(MacroTools.trymatch), Expr, Expr})
precompile(Tuple{typeof(Base.:(==)), Expr, Symbol})
precompile(Tuple{typeof(MacroTools.isbinding), Expr})
precompile(Tuple{typeof(MacroTools.blockunify), Expr, Expr})
precompile(Tuple{typeof(MacroTools.normalise), Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Symbol, Symbol})
precompile(Tuple{typeof(MacroTools.store!), Base.Dict{Any, Any}, Symbol, Symbol})
precompile(Tuple{typeof(MacroTools.match), Symbol, Symbol, Base.Dict{Any, Any}})
precompile(Tuple{typeof(MacroTools.match_inner), Expr, Expr, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.filter), typeof(MacroTools.isslurp), Array{Any, 1}})
precompile(Tuple{typeof(MacroTools.slurprange), Array{Any, 1}})
precompile(Tuple{typeof(MacroTools.inrange), Int64, Tuple{Int64, Int64}, Int64})
precompile(Tuple{typeof(Base.get), Base.Dict{Any, Any}, Symbol, Nothing})
precompile(Tuple{typeof(JSExpr.call_expr), Symbol, Base.Dict{Any, Any}})
precompile(Tuple{getfield(JSExpr, Symbol("#1#2")), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.print), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Bool})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, WebIO.JSEvalSerialization, String, Bool})
precompile(Tuple{typeof(Base.write), JSON.Writer.StringContext{JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}}, Symbol})
precompile(Tuple{typeof(JSON.Writer.show_string), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Symbol})
precompile(Tuple{typeof(JSON.Writer.show_key), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Symbol})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, WebIO.JSEvalSerialization, Symbol, String})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, WebIO.JSEvalSerialization, Symbol, Int64})
precompile(Tuple{typeof(Base.vect), String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), String, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), String, JSExpr.F, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Tuple{String, String, JSExpr.F, String}})
precompile(Tuple{typeof(Base.iterate), Array{JSExpr.F, 1}})
precompile(Tuple{typeof(Base.iterate), Array{JSExpr.F, 1}, Int64})
precompile(Tuple{typeof(JSExpr._simplify), Array{Any, 1}, Int64, Array{Any, 1}})
precompile(Tuple{typeof(JSExpr._simplify), Array{Any, 1}})
precompile(Tuple{getfield(Base, Symbol("##sprint#338")), Nothing, Int64, typeof(Base.sprint), Function, Array{Any, 1}})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{Symbol, Symbol}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{getfield(Blink.AtomShell, Symbol("#7#8")){Blink.AtomShell.Electron}})
precompile(Tuple{getfield(JSON.Parser, Symbol("##parse#2")), Type{T} where T, Type{Int64}, Bool, Nothing, typeof(JSON.Parser.parse), Sockets.TCPSocket})
precompile(Tuple{typeof(JSON.Parser.current), JSON.Parser.StreamingParserState{Sockets.TCPSocket}})
precompile(Tuple{typeof(JSON.Parser._error), String, JSON.Parser.StreamingParserState{Sockets.TCPSocket}})
precompile(Tuple{typeof(JSON.Parser.byteat), JSON.Parser.StreamingParserState{Sockets.TCPSocket}})
precompile(Tuple{typeof(JSON.Parser.read_four_hex_digits!), JSON.Parser.StreamingParserState{Sockets.TCPSocket}})
precompile(Tuple{typeof(JSON.Parser._error_expected_char), UInt8, JSON.Parser.StreamingParserState{Sockets.TCPSocket}})
precompile(Tuple{typeof(JSON.Parser.read_unicode_escape!), JSON.Parser.StreamingParserState{Sockets.TCPSocket}})
precompile(Tuple{typeof(JSON.Parser.parse_string), JSON.Parser.StreamingParserState{Sockets.TCPSocket}})
precompile(Tuple{typeof(JSON.Parser.skip!), JSON.Parser.StreamingParserState{Sockets.TCPSocket}, UInt8, UInt8})
precompile(Tuple{typeof(JSON.Parser.parse_jsconstant), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.StreamingParserState{Sockets.TCPSocket}})
precompile(Tuple{typeof(JSON.Parser.number_from_bytes), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.StreamingParserState{Sockets.TCPSocket}, Bool, JSON.Parser.PushVector{UInt8, Array{UInt8, 1}}, Int64, Int64})
precompile(Tuple{typeof(JSON.Parser.parse_number), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.StreamingParserState{Sockets.TCPSocket}})
precompile(Tuple{typeof(JSON.Parser.parse_object), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.StreamingParserState{Sockets.TCPSocket}})
precompile(Tuple{typeof(JSON.Parser.parse_array), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.StreamingParserState{Sockets.TCPSocket}})
precompile(Tuple{typeof(JSON.Parser.parse_value), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.StreamingParserState{Sockets.TCPSocket}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:in, :out, :sslconfig, :tcpisvalid, :reuseaddr, :connection_count, :rate_limit, :reuse_limit, :readtimeout), Tuple{Base.Channel{Any}, Base.Channel{Any}, Nothing, getfield(WebSockets, Symbol("#1#2")), Bool, Base.RefValue{Int64}, Nothing, Int64, Int64}}, Array{Base.Pair{Union{}, Union{}}, 1}})
precompile(Tuple{getfield(WebSockets, Symbol("##ServerWS#7")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{WebSockets.ServerWS}, HTTP.Handlers.RequestHandlerFunction{getfield(Mux, Symbol("#7#8")){Mux.App}}, WebSockets.WSHandlerFunction{getfield(Mux, Symbol("#9#10")){Mux.App}}})
precompile(Tuple{getfield(Sockets, Symbol("##TCPServer#5")), Bool, Type{Sockets.TCPServer}})
precompile(Tuple{getfield(Sockets, Symbol("##bind#8")), Bool, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.bind), Sockets.TCPServer, Sockets.IPv4, UInt16})
precompile(Tuple{getfield(Sockets, Symbol("##listen#13")), Int64, typeof(Sockets.listen), Sockets.TCPServer})
precompile(Tuple{typeof(WebSockets.serve), WebSockets.ServerWS, Sockets.IPv4, Int64, Bool})
precompile(Tuple{typeof(Base.CoreLogging.with_logstate), getfield(Blink, Symbol("#23#25")){HTTP.Handlers.RequestHandlerFunction{getfield(Mux, Symbol("#7#8")){Mux.App}}, WebSockets.WSHandlerFunction{getfield(Mux, Symbol("#9#10")){Mux.App}}}, Base.CoreLogging.LogState})
precompile(Tuple{getfield(Blink, Symbol("#22#24")){HTTP.Handlers.RequestHandlerFunction{getfield(Mux, Symbol("#7#8")){Mux.App}}, WebSockets.WSHandlerFunction{getfield(Mux, Symbol("#9#10")){Mux.App}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:in, :out, :sslconfig, :tcpisvalid, :reuseaddr, :connection_count, :rate_limit, :reuse_limit, :readtimeout), Tuple{Base.Channel{Any}, Base.Channel{Any}, Nothing, getfield(WebSockets, Symbol("#1#2")), Bool, Base.RefValue{Int64}, Nothing, Int64, Int64}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:in, :out, :sslconfig, :tcpisvalid, :reuseaddr, :connection_count, :rate_limit, :reuse_limit, :readtimeout), Tuple{Base.Channel{Any}, Base.Channel{Any}, Nothing, getfield(WebSockets, Symbol("#1#2")), Bool, Base.RefValue{Int64}, Nothing, Int64, Int64}}, NamedTuple{(), Tuple{}}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:handler, :wshandler), Tuple{HTTP.Handlers.RequestHandlerFunction{getfield(Mux, Symbol("#7#8")){Mux.App}}, WebSockets.WSHandlerFunction{getfield(Mux, Symbol("#9#10")){Mux.App}}}}}, Type{NamedTuple{(:in, :out, :sslconfig, :tcpisvalid, :reuseaddr, :connection_count, :rate_limit, :reuse_limit, :readtimeout), Tuple{Base.Channel{Any}, Base.Channel{Any}, Nothing, getfield(WebSockets, Symbol("#1#2")), Bool, Base.RefValue{Int64}, Nothing, Int64, Int64}}}})
precompile(Tuple{typeof(Base.sym_in), Symbol, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:handler, :wshandler), Tuple{HTTP.Handlers.RequestHandlerFunction{getfield(Mux, Symbol("#7#8")){Mux.App}}, WebSockets.WSHandlerFunction{getfield(Mux, Symbol("#9#10")){Mux.App}}}}, NamedTuple{(:in, :out, :sslconfig, :tcpisvalid, :reuseaddr, :connection_count, :rate_limit, :reuse_limit, :readtimeout), Tuple{Base.Channel{Any}, Base.Channel{Any}, Nothing, getfield(WebSockets, Symbol("#1#2")), Bool, Base.RefValue{Int64}, Nothing, Int64, Int64}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:handler, :wshandler, :in, :out, :sslconfig, :tcpisvalid, :reuseaddr, :connection_count, :rate_limit, :reuse_limit, :readtimeout), Tuple{HTTP.Handlers.RequestHandlerFunction{getfield(Mux, Symbol("#7#8")){Mux.App}}, WebSockets.WSHandlerFunction{getfield(Mux, Symbol("#9#10")){Mux.App}}, Base.Channel{Any}, Base.Channel{Any}, Nothing, getfield(WebSockets, Symbol("#1#2")), Bool, Base.RefValue{Int64}, Nothing, Int64, Int64}}, Type{WebSockets.ServerWS}})
precompile(Tuple{Type{NamedTuple{(:verbose, :sslconfig, :tcpisvalid, :server, :reuseaddr, :connection_count, :rate_limit, :reuse_limit, :readtimeout), T} where T<:Tuple}, Tuple{Bool, Nothing, getfield(WebSockets, Symbol("#1#2")), Sockets.TCPServer, Bool, Base.RefValue{Int64}, Nothing, Int64, Int64}})
precompile(Tuple{getfield(HTTP.Servers, Symbol("#listen##kw")), NamedTuple{(:verbose, :sslconfig, :tcpisvalid, :server, :reuseaddr, :connection_count, :rate_limit, :reuse_limit, :readtimeout), Tuple{Bool, Nothing, getfield(WebSockets, Symbol("#1#2")), Sockets.TCPServer, Bool, Base.RefValue{Int64}, Nothing, Int64, Int64}}, typeof(HTTP.Servers.listen), Function, Sockets.IPv4, Int64})
precompile(Tuple{getfield(HTTP.Servers, Symbol("##listen#1")), Nothing, Function, Sockets.TCPServer, Bool, Base.RefValue{Int64}, Nothing, Int64, Int64, Bool, typeof(HTTP.Servers.listen), getfield(WebSockets, Symbol("#_servercoroutine#11")){WebSockets.ServerWS}, Sockets.IPv4, Int64})
precompile(Tuple{typeof(Base.preserve_handle), Sockets.TCPServer})
precompile(Tuple{typeof(Base.unpreserve_handle), Sockets.TCPServer})
precompile(Tuple{typeof(Sockets.accept), Sockets.TCPServer, Sockets.TCPSocket})
precompile(Tuple{typeof(HTTP.IOExtras.peerport), Sockets.TCPSocket})
precompile(Tuple{typeof(HTTP.IOExtras.localport), Sockets.TCPSocket})
precompile(Tuple{Type{HTTP.ConnectionPool.Connection{T} where T<:IO}, String, String, Int64, Int64, Bool, Sockets.TCPSocket, Bool})
precompile(Tuple{typeof(Base.wait_close), Sockets.TCPServer})
precompile(Tuple{typeof(Base.close), Sockets.TCPServer})
precompile(Tuple{typeof(HTTP.Servers.listenloop), Function, HTTP.Servers.Server{Nothing, Sockets.TCPServer}, getfield(HTTP.Servers, Symbol("#2#5")){Nothing, getfield(WebSockets, Symbol("#1#2"))}, Base.RefValue{Int64}, Int64, Int64, Bool})
precompile(Tuple{getfield(WebSockets, Symbol("#9#10")){WebSockets.ServerWS, Base.RefValue{Union{Nothing, Base.IOServer}}}})
precompile(Tuple{typeof(Base.write), JSON.Writer.StringContext{JSON.Writer.CompactContext{Sockets.TCPSocket}}, UInt8})
precompile(Tuple{typeof(Base.write), JSON.Writer.StringContext{JSON.Writer.CompactContext{Sockets.TCPSocket}}, Symbol})
precompile(Tuple{typeof(JSON.Writer.show_key), JSON.Writer.CompactContext{Sockets.TCPSocket}, Symbol})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Sockets.TCPSocket}, JSON.Serializations.StandardSerialization, Symbol})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Sockets.TCPSocket}, JSON.Serializations.StandardSerialization, Symbol, Symbol})
precompile(Tuple{typeof(Base.write), JSON.Writer.StringContext{JSON.Writer.CompactContext{Sockets.TCPSocket}}, String})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Sockets.TCPSocket}, JSON.Serializations.StandardSerialization, String})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Sockets.TCPSocket}, JSON.Serializations.StandardSerialization, Symbol, String})
precompile(Tuple{typeof(Base.write), JSON.Writer.CompactContext{Sockets.TCPSocket}, String})
precompile(Tuple{typeof(Base.print), JSON.Writer.CompactContext{Sockets.TCPSocket}, Int64})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Sockets.TCPSocket}, JSON.Serializations.StandardSerialization, Symbol, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Int64, String})
precompile(Tuple{typeof(Blink.handle_message), Blink.AtomShell.Electron, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.get), Base.Dict{String, Any}, String, Function})
precompile(Tuple{getfield(Blink, Symbol("#1#2")), Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Int64, Base.GenericCondition{Base.AlwaysLockedST}}, Int64})
precompile(Tuple{typeof(Base._delete!), Base.Dict{Int64, Base.GenericCondition{Base.AlwaysLockedST}}, Int64})
precompile(Tuple{typeof(Blink.callback!), Int64, Int64})
precompile(Tuple{getfield(Blink, Symbol("#js##kw")), NamedTuple{(:callback,), Tuple{Bool}}, typeof(Blink.js), Blink.AtomShell.Window, WebIO.JSString})
precompile(Tuple{getfield(Blink.AtomShell, Symbol("##dot#15")), Bool, typeof(Blink.AtomShell.dot), Blink.AtomShell.Electron, Int64, Expr})
precompile(Tuple{getfield(Blink.AtomShell, Symbol("##dot#16")), Bool, typeof(Blink.AtomShell.dot), Blink.AtomShell.Window, Expr})
precompile(Tuple{typeof(Blink.active), Blink.AtomShell.Electron, Int64})
precompile(Tuple{typeof(Blink.active), Blink.AtomShell.Window})
precompile(Tuple{typeof(Blink.active), Blink.Page})
precompile(Tuple{getfield(Blink.AtomShell, Symbol("##js#17")), Bool, typeof(Blink.js), Blink.AtomShell.Window, WebIO.JSString})
precompile(Tuple{getfield(Blink, Symbol("##js#4")), Bool, typeof(Blink.js), Blink.AtomShell.Window, Expr})
precompile(Tuple{typeof(Blink.AtomShell.initwebio!), Blink.AtomShell.Window})
precompile(Tuple{typeof(Blink.AtomShell.initwindow!), Blink.AtomShell.Window, Base.GenericCondition{Base.AlwaysLockedST}})
precompile(Tuple{getfield(Blink.AtomShell, Symbol("#12#13")){Base.GenericCondition{Base.AlwaysLockedST}, Blink.AtomShell.Window}})
precompile(Tuple{typeof(Base.StackTraces.stacktrace), Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}, Bool})
precompile(Tuple{getfield(HTTP.Servers, Symbol("#8#9")){getfield(WebSockets, Symbol("#_servercoroutine#11")){WebSockets.ServerWS}, HTTP.Servers.Server{Nothing, Sockets.TCPServer}, Base.RefValue{Int64}, Int64, Int64, Bool, HTTP.ConnectionPool.Connection{Sockets.TCPSocket}}})
precompile(Tuple{getfield(HTTP.Servers, Symbol("#handle_transaction##kw")), NamedTuple{(:final_transaction,), Tuple{Bool}}, typeof(HTTP.Servers.handle_transaction), Function, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Servers.Server{Nothing, Sockets.TCPServer}})
precompile(Tuple{typeof(HTTP.Servers.handle_connection), Function, HTTP.ConnectionPool.Connection{Sockets.TCPSocket}, HTTP.Servers.Server{Nothing, Sockets.TCPServer}, Int64, Int64})
precompile(Tuple{typeof(HTTP.Messages.mkheaders), Array{Any, 1}})
precompile(Tuple{getfield(HTTP.Messages, Symbol("##Request#3")), Base.VersionNumber, Nothing, Type{HTTP.Messages.Request}, String, String, Array{Any, 1}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.lock), getfield(HTTP.ConnectionPool, Symbol("#12#13")){HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.ReentrantLock})
precompile(Tuple{typeof(HTTP.method_name), Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{typeof(HTTP.precondition_error), String, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{typeof(Base.lock), getfield(HTTP.ConnectionPool, Symbol("#8#9")){HTTP.ConnectionPool.Connection{Sockets.TCPSocket}}, Base.ReentrantLock})
precompile(Tuple{typeof(HTTP.postcondition_error), String, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}, String, String, String, String})
precompile(Tuple{typeof(HTTP.postcondition_error), String, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{typeof(HTTP.IOExtras.startread), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}})
precompile(Tuple{typeof(Base.unalias), Array{UInt8, 1}, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.copyto!), Array{UInt8, 1}, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(HTTP.Parsers.group), Int64, HTTP.Parsers.RegexAndMatchData, String})
precompile(Tuple{typeof(HTTP.Parsers.nextbytes), HTTP.Parsers.RegexAndMatchData, String})
precompile(Tuple{typeof(HTTP.Parsers.parse_request_line!), String, HTTP.Messages.Request})
precompile(Tuple{typeof(HTTP.Parsers.group), Int64, HTTP.Parsers.RegexAndMatchData, Base.SubString{String}})
precompile(Tuple{typeof(HTTP.Parsers.nextbytes), HTTP.Parsers.RegexAndMatchData, Base.SubString{String}})
precompile(Tuple{typeof(HTTP.Parsers.parse_header_field), Base.SubString{String}})
precompile(Tuple{typeof(HTTP.Messages.appendheader), HTTP.Messages.Request, Base.Pair{Base.SubString{String}, Base.SubString{String}}})
precompile(Tuple{typeof(HTTP.Messages.parse_header_fields!), Base.SubString{String}, HTTP.Messages.Request})
precompile(Tuple{typeof(HTTP.Messages.readheaders), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request})
precompile(Tuple{typeof(HTTP.Messages.ascii_lc_isequal), Base.SubString{String}, String})
precompile(Tuple{typeof(HTTP.Messages.ascii_lc_isequal), String, String})
precompile(Tuple{typeof(HTTP.Messages.hasheader), HTTP.Messages.Request, String, String})
precompile(Tuple{typeof(Base.lock), getfield(HTTP.ConnectionPool, Symbol("#10#11")){HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.ReentrantLock})
precompile(Tuple{typeof(Base.lock), getfield(HTTP.ConnectionPool, Symbol("#4#5")){HTTP.ConnectionPool.Connection{Sockets.TCPSocket}}, Base.ReentrantLock})
precompile(Tuple{typeof(HTTP.IOExtras.startwrite), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}})
precompile(Tuple{typeof(HTTP.Messages.statustext), Int16})
precompile(Tuple{typeof(HTTP.Messages.writestartline), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Response})
precompile(Tuple{typeof(HTTP.Messages.writeheaders), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Response})
precompile(Tuple{typeof(HTTP.Streams.handle_continue), HTTP.Streams.Stream{HTTP.Messages.Request, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{typeof(Base._any), getfield(HTTP.Messages, Symbol("#4#5")), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.Colon})
precompile(Tuple{typeof(HTTP.Messages.bodylength), HTTP.Messages.Request})
precompile(Tuple{typeof(HTTP.IOExtras.startread), HTTP.Streams.Stream{HTTP.Messages.Request, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{typeof(HTTP.postcondition_error), String, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}, String, Int64, String, Int64})
precompile(Tuple{typeof(HTTP.ConnectionPool.purge), HTTP.ConnectionPool.Connection{Sockets.TCPSocket}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{UInt64, HTTP.ConnectionPool.Pod}, UInt64})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{UInt64, HTTP.ConnectionPool.Pod}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{UInt64, HTTP.ConnectionPool.Pod}, UInt64})
precompile(Tuple{typeof(Base.get!), getfield(HTTP.ConnectionPool, Symbol("#19#21")), Base.Dict{UInt64, HTTP.ConnectionPool.Pod}, UInt64})
precompile(Tuple{typeof(Base.lock), getfield(HTTP.ConnectionPool, Symbol("#18#20")){HTTP.ConnectionPool.Pool, UInt64}, Base.ReentrantLock})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{HTTP.ConnectionPool.Connection{T} where T<:IO}, HTTP.ConnectionPool.Connection{Sockets.TCPSocket}})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{HTTP.ConnectionPool.Connection{T} where T<:IO}, HTTP.ConnectionPool.Connection{Sockets.TCPSocket}})
precompile(Tuple{typeof(HTTP.ConnectionPool.release), HTTP.ConnectionPool.Connection{Sockets.TCPSocket}})
precompile(Tuple{typeof(HTTP.IOExtras.closewrite), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}})
precompile(Tuple{typeof(Base.lock), getfield(HTTP.ConnectionPool, Symbol("#2#3")){HTTP.ConnectionPool.Connection{Sockets.TCPSocket}}, Base.ReentrantLock})
precompile(Tuple{typeof(Base.lock), getfield(HTTP.ConnectionPool, Symbol("#6#7")){HTTP.ConnectionPool.Connection{Sockets.TCPSocket}}, Base.ReentrantLock})
precompile(Tuple{typeof(HTTP.ConnectionPool.isbusy), HTTP.ConnectionPool.Connection{Sockets.TCPSocket}})
precompile(Tuple{typeof(HTTP.IOExtras.closeread), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}})
precompile(Tuple{typeof(Base.close), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}})
precompile(Tuple{typeof(HTTP.Messages.ascii_lc_isequal), Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{typeof(HTTP.Pairs.setbyfirst), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.Pair{Base.SubString{String}, Base.SubString{String}}, typeof(HTTP.Messages.field_name_isequal)})
precompile(Tuple{getfield(HTTP.Servers, Symbol("##handle_transaction#12")), Bool, typeof(HTTP.Servers.handle_transaction), getfield(WebSockets, Symbol("#_servercoroutine#11")){WebSockets.ServerWS}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Servers.Server{Nothing, Sockets.TCPServer}})
precompile(Tuple{typeof(HTTP.ConnectionPool.read_to_buffer), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, Int64})
precompile(Tuple{typeof(Base.readuntil), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, Function, Int64})
precompile(Tuple{Type{HTTP.Parsers.ParseError}, Symbol, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{getfield(HTTP.Parsers, Symbol("##find_end_of_header#1")), Bool, typeof(HTTP.Parsers.find_end_of_header), Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.readuntil), Base.GenericIOBuffer{Array{UInt8, 1}}, typeof(HTTP.Parsers.find_end_of_header)})
precompile(Tuple{typeof(WebSockets.is_upgrade), HTTP.Messages.Request})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{Any}, Array{Base.StackTraces.StackFrame, 1}})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{Any}, Array{Base.StackTraces.StackFrame, 1}})
precompile(Tuple{getfield(WebSockets, Symbol("#_servercoroutine#11")){WebSockets.ServerWS}, HTTP.Streams.Stream{HTTP.Messages.Request, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{typeof(HTTP.IOExtras.closewrite), HTTP.Streams.Stream{HTTP.Messages.Request, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{typeof(HTTP.Messages.hasheader), HTTP.Messages.Response, String})
precompile(Tuple{typeof(PyCall.pyjlwrap_new), PyCall.PyTypeObject, Base.VersionNumber})
precompile(Tuple{typeof(HTTP.Messages.bodylength), HTTP.Messages.Response})
precompile(Tuple{typeof(HTTP.Messages.writestartline), Base.GenericIOBuffer{Array{UInt8, 1}}, HTTP.Messages.Response})
precompile(Tuple{typeof(HTTP.Messages.writeheaders), Base.GenericIOBuffer{Array{UInt8, 1}}, HTTP.Messages.Response})
precompile(Tuple{typeof(HTTP.IOExtras.startwrite), HTTP.Streams.Stream{HTTP.Messages.Request, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{typeof(Base.write), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, String, String})
precompile(Tuple{typeof(Base.unsafe_write), HTTP.Streams.Stream{HTTP.Messages.Request, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Ptr{UInt8}, UInt64})
precompile(Tuple{getfield(HTTP.Servers, Symbol("#13#14")){getfield(WebSockets, Symbol("#_servercoroutine#11")){WebSockets.ServerWS}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Streams.Stream{HTTP.Messages.Request, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{PyCall.PyBuffer}})
precompile(Tuple{getfield(Core.Compiler, Symbol("#295#300")), Int8})
precompile(Tuple{typeof(HTTP.Parsers.parse_chunk_size), Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(HTTP.Messages.readchunksize), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request})
precompile(Tuple{typeof(Base.unsafe_read), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(HTTP.Streams.http_unsafe_read), HTTP.Streams.Stream{HTTP.Messages.Request, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(Base.eof), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}})
precompile(Tuple{typeof(Base.unsafe_read), HTTP.Streams.Stream{HTTP.Messages.Request, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(Base.readbytes!), HTTP.Streams.Stream{HTTP.Messages.Request, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.GenericIOBuffer{Array{UInt8, 1}}, Int64})
precompile(Tuple{typeof(Base.read), HTTP.Streams.Stream{HTTP.Messages.Request, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{getfield(Mux, Symbol("#7#8")){Mux.App}, HTTP.Messages.Request})
precompile(Tuple{typeof(HTTP.Handlers.handle), HTTP.Handlers.RequestHandlerFunction{getfield(Mux, Symbol("#7#8")){Mux.App}}, HTTP.Streams.Stream{HTTP.Messages.Request, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{typeof(HTTP.ConnectionPool.hashconn), Type{T} where T, String, String, Int64, Bool, Bool})
precompile(Tuple{getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#3#4")){getfield(Mux, Symbol("#3#4")){getfield(Mux, Symbol("#3#4")){getfield(Mux, Symbol("#3#4")){getfield(Mux, Symbol("#3#4")){typeof(Mux.todict), typeof(Mux.basiccatch)}, typeof(Mux.splitquery)}, typeof(Mux.toresponse)}, getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#28#29")){Array{Base.SubString{String}, 1}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#48#51")){Bool, getfield(Mux, Symbol("#absdir#50"))}, getfield(Mux, Symbol("#49#52")){getfield(Mux, Symbol("#absdir#50"))}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#18#19")){getfield(Mux, Symbol("#22#23")){Symbol, Int64}}, getfield(Mux, Symbol("#20#21")){String}}}}}, getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#28#29")){Array{Base.SubString{String}, 1}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#43#46")){Bool, getfield(Mux, Symbol("#absdir#45")){Array{String, 1}}}, getfield(Mux, Symbol("#44#47")){getfield(Mux, Symbol("#absdir#45")){Array{String, 1}}}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#18#19")){getfield(Mux, Symbol("#22#23")){Symbol, Int64}}, getfield(Mux, Symbol("#20#21")){String}}}}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Blink, Symbol("#14#16")), getfield(Blink, Symbol("#15#17"))}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#30#31")){Array{Base.SubString{String}, 1}}, typeof(Blink.page_handler)}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#18#19")){getfield(Mux, Symbol("#22#23")){Symbol, Int64}}, getfield(Mux, Symbol("#20#21")){String}}}}}, HTTP.Messages.Request})
precompile(Tuple{getfield(Mux, Symbol("#3#4")){getfield(Mux, Symbol("#3#4")){getfield(Mux, Symbol("#3#4")){getfield(Mux, Symbol("#3#4")){typeof(Mux.todict), typeof(Mux.basiccatch)}, typeof(Mux.splitquery)}, typeof(Mux.toresponse)}, getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#28#29")){Array{Base.SubString{String}, 1}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#48#51")){Bool, getfield(Mux, Symbol("#absdir#50"))}, getfield(Mux, Symbol("#49#52")){getfield(Mux, Symbol("#absdir#50"))}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#18#19")){getfield(Mux, Symbol("#22#23")){Symbol, Int64}}, getfield(Mux, Symbol("#20#21")){String}}}}}, Function, HTTP.Messages.Request})
precompile(Tuple{getfield(Mux, Symbol("#3#4")){typeof(Mux.todict), typeof(Mux.basiccatch)}, Function, HTTP.Messages.Request})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Array{UInt8, 1}, Symbol})
precompile(Tuple{typeof(HTTP.URIs.group), Int64, HTTP.URIs.RegexAndMatchData, String, Base.SubString{String}})
precompile(Tuple{typeof(HTTP.URIs.ensurevalid), HTTP.URIs.URI})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, String, Base.SubString{String}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.SubString{String}, String})
precompile(Tuple{typeof(HTTP.URIs.formaturi), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.SubString{String}, Base.SubString{String}, Base.SubString{String}, Base.SubString{String}, Base.SubString{String}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.URIs, Symbol("##parse_uri_reference#6")), Bool, typeof(HTTP.URIs.parse_uri_reference), String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, HTTP.URIs.URI, Symbol})
precompile(Tuple{Type{HTTP.Cookies.Cookie}, Base.SubString{String}, Bool, String, String, Dates.DateTime, Int64, Bool, Bool, Bool, Array{String, 1}})
precompile(Tuple{getfield(HTTP.Cookies, Symbol("##Cookie#3")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{HTTP.Cookies.Cookie}, Base.SubString{String}, Bool})
precompile(Tuple{Type{HTTP.Cookies.Cookie}, Base.SubString{String}, Bool})
precompile(Tuple{Type{HTTP.Cookies.Cookie}, Base.SubString{String}, Base.SubString{String}, String, String, Dates.DateTime, Int64, Bool, Bool, Bool, Array{String, 1}})
precompile(Tuple{typeof(HTTP.Cookies.parsecookievalue), String, Bool})
precompile(Tuple{typeof(Base._any), typeof(HTTP.Cookies.isurlchar), Base.SubString{String}, Base.Colon})
precompile(Tuple{typeof(HTTP.Cookies.readcookies), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Array{HTTP.Cookies.Cookie, 1}, Symbol})
precompile(Tuple{typeof(Mux.todict), HTTP.Messages.Request})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Array{Base.SubString{String}, 1}, Symbol})
precompile(Tuple{typeof(Base.get!), getfield(Base, Symbol("#242#243")){Base.Dict{Any, Any}}, Base.Dict{Any, Any}, Symbol})
precompile(Tuple{typeof(Base.splice!), Base.BitArray{1}, Base.UnitRange{Int64}, Base.BitArray{1}})
precompile(Tuple{typeof(Mux.matchpath!), Array{Base.SubString{String}, 1}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Mux.toresponse), getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#28#29")){Array{Base.SubString{String}, 1}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#48#51")){Bool, getfield(Mux, Symbol("#absdir#50"))}, getfield(Mux, Symbol("#49#52")){getfield(Mux, Symbol("#absdir#50"))}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#18#19")){getfield(Mux, Symbol("#22#23")){Symbol, Int64}}, getfield(Mux, Symbol("#20#21")){String}}}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#28#29")){Array{Base.SubString{String}, 1}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#43#46")){Bool, getfield(Mux, Symbol("#absdir#45")){Array{String, 1}}}, getfield(Mux, Symbol("#44#47")){getfield(Mux, Symbol("#absdir#45")){Array{String, 1}}}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#18#19")){getfield(Mux, Symbol("#22#23")){Symbol, Int64}}, getfield(Mux, Symbol("#20#21")){String}}}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Blink, Symbol("#14#16")), getfield(Blink, Symbol("#15#17"))}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#30#31")){Array{Base.SubString{String}, 1}}, typeof(Blink.page_handler)}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#18#19")){getfield(Mux, Symbol("#22#23")){Symbol, Int64}}, getfield(Mux, Symbol("#20#21")){String}}}}}}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Mux.splitquery), getfield(Mux, Symbol("#1#2")){typeof(Mux.toresponse), getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#28#29")){Array{Base.SubString{String}, 1}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#48#51")){Bool, getfield(Mux, Symbol("#absdir#50"))}, getfield(Mux, Symbol("#49#52")){getfield(Mux, Symbol("#absdir#50"))}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#18#19")){getfield(Mux, Symbol("#22#23")){Symbol, Int64}}, getfield(Mux, Symbol("#20#21")){String}}}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#28#29")){Array{Base.SubString{String}, 1}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#43#46")){Bool, getfield(Mux, Symbol("#absdir#45")){Array{String, 1}}}, getfield(Mux, Symbol("#44#47")){getfield(Mux, Symbol("#absdir#45")){Array{String, 1}}}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#18#19")){getfield(Mux, Symbol("#22#23")){Symbol, Int64}}, getfield(Mux, Symbol("#20#21")){String}}}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Blink, Symbol("#14#16")), getfield(Blink, Symbol("#15#17"))}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#30#31")){Array{Base.SubString{String}, 1}}, typeof(Blink.page_handler)}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#18#19")){getfield(Mux, Symbol("#22#23")){Symbol, Int64}}, getfield(Mux, Symbol("#20#21")){String}}}}}}}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Mux.basiccatch), getfield(Mux, Symbol("#1#2")){typeof(Mux.splitquery), getfield(Mux, Symbol("#1#2")){typeof(Mux.toresponse), getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#28#29")){Array{Base.SubString{String}, 1}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#48#51")){Bool, getfield(Mux, Symbol("#absdir#50"))}, getfield(Mux, Symbol("#49#52")){getfield(Mux, Symbol("#absdir#50"))}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#18#19")){getfield(Mux, Symbol("#22#23")){Symbol, Int64}}, getfield(Mux, Symbol("#20#21")){String}}}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#28#29")){Array{Base.SubString{String}, 1}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#43#46")){Bool, getfield(Mux, Symbol("#absdir#45")){Array{String, 1}}}, getfield(Mux, Symbol("#44#47")){getfield(Mux, Symbol("#absdir#45")){Array{String, 1}}}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#18#19")){getfield(Mux, Symbol("#22#23")){Symbol, Int64}}, getfield(Mux, Symbol("#20#21")){String}}}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Blink, Symbol("#14#16")), getfield(Blink, Symbol("#15#17"))}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#30#31")){Array{Base.SubString{String}, 1}}, typeof(Blink.page_handler)}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#18#19")){getfield(Mux, Symbol("#22#23")){Symbol, Int64}}, getfield(Mux, Symbol("#20#21")){String}}}}}}}}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Mux.todict), getfield(Mux, Symbol("#1#2")){typeof(Mux.basiccatch), getfield(Mux, Symbol("#1#2")){typeof(Mux.splitquery), getfield(Mux, Symbol("#1#2")){typeof(Mux.toresponse), getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#28#29")){Array{Base.SubString{String}, 1}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#48#51")){Bool, getfield(Mux, Symbol("#absdir#50"))}, getfield(Mux, Symbol("#49#52")){getfield(Mux, Symbol("#absdir#50"))}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#18#19")){getfield(Mux, Symbol("#22#23")){Symbol, Int64}}, getfield(Mux, Symbol("#20#21")){String}}}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#28#29")){Array{Base.SubString{String}, 1}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#43#46")){Bool, getfield(Mux, Symbol("#absdir#45")){Array{String, 1}}}, getfield(Mux, Symbol("#44#47")){getfield(Mux, Symbol("#absdir#45")){Array{String, 1}}}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#18#19")){getfield(Mux, Symbol("#22#23")){Symbol, Int64}}, getfield(Mux, Symbol("#20#21")){String}}}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Blink, Symbol("#14#16")), getfield(Blink, Symbol("#15#17"))}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#30#31")){Array{Base.SubString{String}, 1}}, typeof(Blink.page_handler)}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#18#19")){getfield(Mux, Symbol("#22#23")){Symbol, Int64}}, getfield(Mux, Symbol("#20#21")){String}}}}}}}}}, HTTP.Messages.Request})
precompile(Tuple{typeof(Base.split), String, Char})
precompile(Tuple{Type{HTTP.URIs.URI}, String})
precompile(Tuple{typeof(Mux.matchpath), Array{Base.SubString{String}, 1}, Array{Base.SubString{String}, 1}})
precompile(Tuple{getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#28#29")){Array{Base.SubString{String}, 1}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#43#46")){Bool, getfield(Mux, Symbol("#absdir#45")){Array{String, 1}}}, getfield(Mux, Symbol("#44#47")){getfield(Mux, Symbol("#absdir#45")){Array{String, 1}}}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#18#19")){getfield(Mux, Symbol("#22#23")){Symbol, Int64}}, getfield(Mux, Symbol("#20#21")){String}}}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Blink, Symbol("#14#16")), getfield(Blink, Symbol("#15#17"))}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#30#31")){Array{Base.SubString{String}, 1}}, typeof(Blink.page_handler)}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#18#19")){getfield(Mux, Symbol("#22#23")){Symbol, Int64}}, getfield(Mux, Symbol("#20#21")){String}}}}}, Base.Dict{Any, Any}})
precompile(Tuple{getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Blink, Symbol("#14#16")), getfield(Blink, Symbol("#15#17"))}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#30#31")){Array{Base.SubString{String}, 1}}, typeof(Blink.page_handler)}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#18#19")){getfield(Mux, Symbol("#22#23")){Symbol, Int64}}, getfield(Mux, Symbol("#20#21")){String}}}}, Base.Dict{Any, Any}})
precompile(Tuple{getfield(Blink, Symbol("#14#16")), Base.Dict{Any, Any}})
precompile(Tuple{getfield(Mux, Symbol("#5#6")){getfield(Blink, Symbol("#14#16")), getfield(Blink, Symbol("#15#17"))}, Function, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.length), Array{Base.SubString{String}, 1}})
precompile(Tuple{typeof(Base.haskey), Base.Dict{String, String}, Base.SubString{String}})
precompile(Tuple{getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#30#31")){Array{Base.SubString{String}, 1}}, typeof(Blink.page_handler)}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#18#19")){getfield(Mux, Symbol("#22#23")){Symbol, Int64}}, getfield(Mux, Symbol("#20#21")){String}}}, Base.Dict{Any, Any}})
precompile(Tuple{getfield(Mux, Symbol("#30#31")){Array{Base.SubString{String}, 1}}, Base.Dict{Any, Any}})
precompile(Tuple{getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#30#31")){Array{Base.SubString{String}, 1}}, typeof(Blink.page_handler)}, Function, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.splice!), Array{Base.SubString{String}, 1}, Base.UnitRange{Int64}, Array{Any, 1}})
precompile(Tuple{typeof(Base.splice!), Array{Base.SubString{String}, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Blink.page_handler), Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, Any}, Symbol})
precompile(Tuple{typeof(Base.parse), Type{Int64}, Base.SubString{String}})
precompile(Tuple{typeof(Base.split), Base.SubString{String}, String})
precompile(Tuple{typeof(Base.:(!=)), Base.SubString{String}, Nothing})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{String, Int64}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Int64, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Base.Dict{Any, Any}, String})
precompile(Tuple{typeof(Mustache.readutf), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64})
precompile(Tuple{typeof(Mustache.peekaheadmatch), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Char, 1}})
precompile(Tuple{typeof(Base.close), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.:(*)), PyCall.PyObject, String})
precompile(Tuple{typeof(Base.push!), Mustache.MustacheTokens, Mustache.TextToken})
precompile(Tuple{typeof(Mustache.scan_past!), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Char, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, Type{String}, Tuple{Base.Broadcast.Extruded{Array{Base.SubString{String}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Mustache.is_r_standalone), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Mustache.is_l_standalone), String, Bool})
precompile(Tuple{typeof(Mustache.popfirst!_whitespace), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.push!), Mustache.MustacheTokens, Mustache.SectionToken})
precompile(Tuple{Type{Mustache.TagToken}, String, String, String, String, Nothing})
precompile(Tuple{typeof(Base.:(*)), String, PyCall.PyObject})
precompile(Tuple{typeof(Mustache.make_tokens), String, Tuple{String, String}})
precompile(Tuple{typeof(Mustache.nestTokens), Mustache.MustacheTokens})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Mustache.Token, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{Mustache.Token, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Mustache.renderTokens), Base.GenericIOBuffer{Array{UInt8, 1}}, Mustache.MustacheTokens, Mustache.Writer, Mustache.Context, Mustache.MustacheTokens, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Mustache.renderTokens), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Mustache.Token, 1}, Mustache.Writer, Mustache.Context, Mustache.MustacheTokens, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Mustache.render), Base.GenericIOBuffer{Array{UInt8, 1}}, Mustache.Writer, Mustache.MustacheTokens, Base.Dict{Any, Any}})
precompile(Tuple{getfield(Mustache, Symbol("#11#12")){Mustache.MustacheTokens, Base.Dict{Any, Any}}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.isequal), PyCall.PyObject, Nothing})
precompile(Tuple{typeof(Base.:(==)), WeakRef, Nothing})
precompile(Tuple{typeof(Mustache.lookup_dotted), Mustache.Context, Base.SubString{String}})
precompile(Tuple{typeof(Mustache.lookup), Mustache.Context, Base.SubString{String}})
precompile(Tuple{typeof(Mustache.lookup_dotted), Mustache.Context, String})
precompile(Tuple{typeof(Mustache.lookup), Mustache.Context, String})
precompile(Tuple{typeof(Base.getproperty), Mustache.Context, Symbol})
precompile(Tuple{typeof(Mustache._lookup_in_view), Base.Dict{Any, Any}, String})
precompile(Tuple{typeof(Mustache.lookup_in_view), Base.Dict{Any, Any}, String})
precompile(Tuple{typeof(Mustache.falsy), Int64})
precompile(Tuple{typeof(Mustache.escape_html), Int64})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{String, String}, 1}})
precompile(Tuple{typeof(Base.replace), String, Base.Pair{String, String}})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{String, String}, 1}, Int64})
precompile(Tuple{typeof(Mustache.falsy), String})
precompile(Tuple{typeof(Mustache.escape_html), String})
precompile(Tuple{typeof(Mux.response), String})
precompile(Tuple{typeof(Mux.Response), Base.Dict{Any, Any}})
precompile(Tuple{Type{NamedTuple{(:body,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:body,), Tuple{String}}, Type{HTTP.Messages.Response}, Int64, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}})
precompile(Tuple{typeof(Mux.mk_response), HTTP.Messages.Response})
precompile(Tuple{typeof(Base.setproperty!), HTTP.Messages.Request, Symbol, HTTP.Messages.Response})
precompile(Tuple{typeof(Base.convert), Type{HTTP.Messages.Response}, HTTP.Messages.Response})
precompile(Tuple{typeof(Base.:(>=)), Base.VersionNumber, Base.VersionNumber})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Int16})
precompile(Tuple{typeof(Base.string), Base.SubString{String}, String, Vararg{Union{Char, Base.SubString{String}, String}, N} where N})
precompile(Tuple{typeof(HTTP.ConnectionPool.monitor_idle_connection), HTTP.ConnectionPool.Connection{Sockets.TCPSocket}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#14#15")){HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{getfield(Base, Symbol("##open#270")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), typeof(Base.read), String})
precompile(Tuple{getfield(Blink, Symbol("#15#17")), Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{String, String}, Base.SubString{String}})
precompile(Tuple{typeof(Mux.extension), Base.SubString{String}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{AbstractString, AbstractString}, String})
precompile(Tuple{typeof(Mux.fileheaders), Base.SubString{String}})
precompile(Tuple{typeof(Lazy.d), Base.Pair{String, String}})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{Symbol, Array{UInt8, 1}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Mux.response), Base.Dict{Any, Any}})
precompile(Tuple{Type{NamedTuple{(:body,), T} where T<:Tuple}, Tuple{Array{UInt8, 1}}})
precompile(Tuple{typeof(HTTP.Messages.mkheaders), Base.Dict{Any, Any}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:body,), Tuple{Array{UInt8, 1}}}, Type{HTTP.Messages.Response}, Int64, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.Pair{String, String}, Int64})
precompile(Tuple{typeof(HTTP.Messages.hasheader), HTTP.Streams.Stream{HTTP.Messages.Request, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, String, String})
precompile(Tuple{typeof(WebSockets.check_upgrade), HTTP.Streams.Stream{HTTP.Messages.Request, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{typeof(HTTP.Messages.hasheader), HTTP.Streams.Stream{HTTP.Messages.Request, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, String})
precompile(Tuple{typeof(WebSockets.hasprotocol), Base.SubString{String}})
precompile(Tuple{Type{Base.SubString{T} where T<:AbstractString}, Base.SubString{String}})
precompile(Tuple{typeof(Base.eof), Base64.Base64DecodePipe})
precompile(Tuple{typeof(Base64.decode), UInt8})
precompile(Tuple{typeof(Base64.read_until_end), Base64.Base64DecodePipe, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(Base.readbytes!), Base64.Base64DecodePipe, Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(Base.close), Base.GenericIOBuffer{Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}}})
precompile(Tuple{typeof(Base64.base64decode), Base.SubString{String}})
precompile(Tuple{typeof(MbedTLS.mbed_err), Int32})
precompile(Tuple{typeof(MbedTLS.digest!), MbedTLS.MDKind, String, Array{UInt8, 1}})
precompile(Tuple{typeof(MbedTLS.digest), MbedTLS.MDKind, String})
precompile(Tuple{getfield(Mux, Symbol("#9#10")){Mux.App}, HTTP.Messages.Request, WebSockets.WebSocket{Sockets.TCPSocket}})
precompile(Tuple{typeof(Random.rand!), Random.MersenneTwister, Random.UnsafeView{UInt8}, Random.SamplerType{UInt8}})
precompile(Tuple{typeof(Base.rand), Type{UInt8}, Tuple{Int64}})
precompile(Tuple{typeof(WebSockets.maskswitch!), Array{UInt8, 1}, Array{UInt8, 1}})
precompile(Tuple{typeof(WebSockets.write_fragment), Sockets.TCPSocket, Bool, UInt8, Bool, Array{UInt8, 1}})
precompile(Tuple{typeof(WebSockets.locked_write), Sockets.TCPSocket, Bool, UInt8, Bool, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.take_buffered), Base.Channel{WebSockets.WebSocketFragment}})
precompile(Tuple{typeof(Base.take_unbuffered), Base.Channel{WebSockets.WebSocketFragment}})
precompile(Tuple{typeof(WebSockets.readframe_nonblocking), WebSockets.WebSocket{Sockets.TCPSocket}})
precompile(Tuple{getfield(Base, Symbol("#thrownonint#205")){UInt16, UInt8}, Type{UInt16}, Type{UInt8}, Int64})
precompile(Tuple{typeof(Base.unalias), Array{UInt8, 1}, Base.ReinterpretArray{UInt8, 1, UInt16, Array{UInt16, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.ReinterpretArray{UInt8, 1, UInt16, Array{UInt16, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), Array{UInt8, 1}, Base.ReinterpretArray{UInt8, 1, UInt16, Array{UInt16, 1}}})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{UInt8, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Base.ReinterpretArray{UInt8, 1, UInt16, Array{UInt16, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(Base._typed_vcat), Type{UInt8}, Tuple{Base.ReinterpretArray{UInt8, 1, UInt16, Array{UInt16, 1}}, Array{UInt8, 1}}})
precompile(Tuple{getfield(WebSockets, Symbol("##close#19")), Int64, String, typeof(Base.close), WebSockets.WebSocket{Sockets.TCPSocket}})
precompile(Tuple{typeof(Base64.base64decode), String})
precompile(Tuple{typeof(WebSockets.hasprotocol), String})
precompile(Tuple{typeof(WebSockets.upgrade), getfield(Mux, Symbol("#9#10")){Mux.App}, HTTP.Streams.Stream{HTTP.Messages.Request, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{typeof(Base.eof), Base.GenericIOBuffer{Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}}})
precompile(Tuple{typeof(Base64.decode_slow), UInt8, UInt8, UInt8, UInt8, Base64.Buffer, Int64, Base.GenericIOBuffer{Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Ptr{UInt8}, UInt64, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.copyto!), Array{UInt8, 1}, Int64, Array{UInt8, 1}, UInt64, Int64})
precompile(Tuple{typeof(Base64.read_to_buffer), Base.GenericIOBuffer{Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Base64.Buffer})
precompile(Tuple{typeof(Base64.encode), UInt8})
precompile(Tuple{typeof(Base.close), Base64.Base64EncodePipe})
precompile(Tuple{getfield(Base64, Symbol("##base64encode#3")), Nothing, typeof(Base64.base64encode), Function, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.unsafe_write), Base64.Base64EncodePipe, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(Base.write), Base64.Base64EncodePipe, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.unsafe_write), Base.GenericIOBuffer{Array{UInt8, 1}}, Ptr{UInt8}, Int64})
precompile(Tuple{typeof(Base.write), Base.GenericIOBuffer{Array{UInt8, 1}}, UInt8, UInt8, UInt8, Vararg{UInt8, N} where N})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, WebSockets.WebSocket{Sockets.TCPSocket}, Symbol})
precompile(Tuple{typeof(Blink.ws_handler), Base.Dict{Any, Any}})
precompile(Tuple{typeof(Mux.splitquery), typeof(Blink.ws_handler), Base.Dict{Any, Any}})
precompile(Tuple{typeof(Mux.wcatch), getfield(Mux, Symbol("#1#2")){typeof(Mux.splitquery), typeof(Blink.ws_handler)}, Base.Dict{Any, Any}})
precompile(Tuple{getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#3#4")){getfield(Mux, Symbol("#3#4")){typeof(Mux.todict), typeof(Mux.wcatch)}, typeof(Mux.splitquery)}, typeof(Blink.ws_handler)}, Tuple{HTTP.Messages.Request, WebSockets.WebSocket{Sockets.TCPSocket}}})
precompile(Tuple{getfield(Base64, Symbol("#1#2")){Base64.Base64EncodePipe}, Base64.Buffer})
precompile(Tuple{typeof(Base.lastindex), Array{Base.SubString{String}, 1}})
precompile(Tuple{typeof(Base.setproperty!), Blink.Page, Symbol, WebSockets.WebSocket{Sockets.TCPSocket}})
precompile(Tuple{typeof(Base.convert), Type{WebSockets.WebSocket{T} where T<:IO}, WebSockets.WebSocket{Sockets.TCPSocket}})
precompile(Tuple{typeof(Base.getproperty), Blink.Page, Symbol})
precompile(Tuple{typeof(Base.put!), Distributed.Future, Bool})
precompile(Tuple{typeof(Distributed.call_on_owner), Function, Distributed.Future, Bool, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.isready), Distributed.RemoteValue})
precompile(Tuple{typeof(Base.put!), Distributed.RemoteValue, Bool})
precompile(Tuple{typeof(Distributed.put_future), Distributed.RRID, Bool, Int64})
precompile(Tuple{typeof(Base.isequal), PyCall.PyObject, Distributed.RRID})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Any, Any}, Distributed.RRID})
precompile(Tuple{typeof(Base.get), Base.Dict{Any, Any}, Distributed.RRID, Bool})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, Any}, Distributed.RRID})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Distributed.RemoteValue, Distributed.RRID})
precompile(Tuple{typeof(Base.isready), Base.Channel{Any}})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{Any}, Bool})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{Any}, Bool})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Bool})
precompile(Tuple{typeof(Base.delete!), Base.Dict{Any, Any}, Distributed.RRID})
precompile(Tuple{typeof(Base.isopen), WebSockets.WebSocket{Sockets.TCPSocket}})
precompile(Tuple{typeof(Base.isopen), Sockets.TCPSocket})
precompile(Tuple{typeof(WebSockets.read_frame), WebSockets.WebSocket{Sockets.TCPSocket}})
precompile(Tuple{typeof(Base.reverse), Array{UInt8, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Int64, String}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.ReinterpretArray{UInt16, 1, UInt8, Array{UInt8, 1}}, Tuple{Int64}})
precompile(Tuple{getfield(Base, Symbol("#thrownonint#205")){UInt8, UInt16}, Type{UInt8}, Type{UInt16}, Int64})
precompile(Tuple{typeof(WebSockets.handle_control_frame), WebSockets.WebSocket{Sockets.TCPSocket}, WebSockets.WebSocketFragment})
precompile(Tuple{typeof(Base.vcat), Array{UInt8, 1}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.read), WebSockets.WebSocket{Sockets.TCPSocket}})
precompile(Tuple{getfield(Blink, Symbol("#20#21")){Blink.Page}})
precompile(Tuple{typeof(Base.identity), Blink.Page})
precompile(Tuple{typeof(JSON.Parser.parse), String})
precompile(Tuple{typeof(JSON.Parser._count_before), String, Char, Int64})
precompile(Tuple{typeof(JSON.Parser._error), String, JSON.Parser.MemoryParserState})
precompile(Tuple{getfield(JSON.Parser, Symbol("##parse#1")), Type{T} where T, Type{Int64}, Bool, Nothing, typeof(JSON.Parser.parse), String})
precompile(Tuple{typeof(JSON.Parser.read_four_hex_digits!), JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser._error_expected_char), UInt8, JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser.read_unicode_escape!), JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser.predict_string), JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser.parse_string), JSON.Parser.MemoryParserState, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(JSON.Parser.parse_string), JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser.skip!), JSON.Parser.MemoryParserState, UInt8, UInt8})
precompile(Tuple{typeof(JSON.Parser.parse_jsconstant), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser.hasleadingzero), JSON.Parser.MemoryParserState, Int64, Int64})
precompile(Tuple{typeof(JSON.Parser.int_from_bytes), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.MemoryParserState, JSON.Parser.MemoryParserState, Int64, Int64})
precompile(Tuple{typeof(Parsers._typeparser), Type{Float64}, Base.CodeUnits{UInt8, String}, Int64, Int64, UInt8, Int16, Parsers.Options{false, false, false, false, Nothing, Nothing, Nothing}, Type{Base.GMP.BigInt}})
precompile(Tuple{typeof(Parsers._typeparser), Type{Float64}, Base.CodeUnits{UInt8, String}, Int64, Int64, UInt8, Int16, Parsers.Options{false, false, false, false, Nothing, Nothing, Nothing}, Type{UInt128}})
precompile(Tuple{typeof(Parsers.xparse), Type{Float64}, String, Int64, Int64, Parsers.Options{false, false, false, false, Nothing, Nothing, Nothing}})
precompile(Tuple{typeof(JSON.Parser.number_from_bytes), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.MemoryParserState, Bool, JSON.Parser.MemoryParserState, Int64, Int64})
precompile(Tuple{typeof(JSON.Parser.parse_number), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser.parse_object), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser.parse_array), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser.parse_value), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser.skip!), JSON.Parser.MemoryParserState, UInt8, UInt8, Vararg{UInt8, N} where N})
precompile(Tuple{typeof(Blink.handle_message), Blink.Page, Base.Dict{String, Any}})
precompile(Tuple{typeof(Blink.callback!), Int64, Bool})
precompile(Tuple{getfield(MacroTools, Symbol("#16#18")), LineNumberNode})
precompile(Tuple{getfield(MacroTools, Symbol("#16#18")), Expr})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(JSExpr.jsexpr), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(JSExpr.jsexpr_joined), Array{Any, 1}, String})
precompile(Tuple{typeof(JSExpr.block_expr), Array{Any, 1}})
precompile(Tuple{getfield(MacroTools, Symbol("#16#18")), String})
precompile(Tuple{typeof(MacroTools.trymatch), MacroTools.OrBind, Expr})
precompile(Tuple{typeof(MacroTools.normalise), MacroTools.OrBind})
precompile(Tuple{typeof(MacroTools.match), MacroTools.OrBind, Expr, Base.Dict{Any, Any}})
precompile(Tuple{typeof(MacroTools.blockunify), MacroTools.OrBind, Expr})
precompile(Tuple{typeof(MacroTools.match_inner), MacroTools.OrBind, Expr, Base.Dict{Any, Any}})
precompile(Tuple{typeof(MacroTools.match), Symbol, Expr, Base.Dict{Any, Any}})
precompile(Tuple{typeof(MacroTools.store!), Base.Dict{Any, Any}, Symbol, String})
precompile(Tuple{typeof(MacroTools.normalise), String})
precompile(Tuple{typeof(MacroTools.match), Symbol, String, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.vect), Expr, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Expr, String})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Tuple{Expr, String}})
precompile(Tuple{getfield(MacroTools, Symbol("#16#18")), QuoteNode})
precompile(Tuple{typeof(MacroTools.isslurp), QuoteNode})
precompile(Tuple{typeof(MacroTools.normalise), QuoteNode})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, QuoteNode, Symbol})
precompile(Tuple{typeof(MacroTools.store!), Base.Dict{Any, Any}, Symbol, QuoteNode})
precompile(Tuple{typeof(MacroTools.match), QuoteNode, QuoteNode, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(JSExpr.jsexpr), Tuple{Base.Broadcast.Extruded{Array{Symbol, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(JSExpr.intersperse), Array{String, 1}, String})
precompile(Tuple{typeof(JSExpr.jsexpr_joined), Array{Symbol, 1}, String})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(JSExpr.jsexpr), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{JSExpr.F}})
precompile(Tuple{typeof(Base.setindex!), Array{JSExpr.F, 1}, JSExpr.F, Int64})
precompile(Tuple{typeof(Base.similar), Array{JSExpr.F, 1}, Type})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{JSExpr.F, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(JSExpr.jsexpr), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(JSExpr.jsexpr), String})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Any, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(JSExpr.jsexpr), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Any, 1}, Array{JSExpr.F, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(JSExpr.jsexpr), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, String, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(JSExpr.intersperse), Array{Any, 1}, String})
precompile(Tuple{typeof(JSExpr.call_expr), Symbol, String})
precompile(Tuple{typeof(Base.allocatedinline), Type{JSExpr.F}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{JSExpr.F, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(JSExpr.intersperse), Array{JSExpr.F, 1}, String})
precompile(Tuple{typeof(Distributed.fetch_ref), Distributed.RRID})
precompile(Tuple{typeof(Blink.msg), Blink.Page, Base.Dict{Any, Any}})
precompile(Tuple{getfield(Blink, Symbol("##js#3")), Bool, typeof(Blink.js), Blink.Page, WebIO.JSString})
precompile(Tuple{getfield(Blink, Symbol("#js##kw")), NamedTuple{(:callback,), Tuple{Bool}}, typeof(Blink.js), Blink.Page, WebIO.JSString})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Pair{Any, Any}})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Dict{Any, Any}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, Symbol})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, String})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, Int64})
precompile(Tuple{typeof(Base.error_if_canonical_setindex), Base.IndexLinear, Base.CodeUnits{UInt8, String}, Int64})
precompile(Tuple{typeof(WebSockets.maskswitch!), Base.CodeUnits{UInt8, String}})
precompile(Tuple{typeof(WebSockets.write_fragment), Sockets.TCPSocket, Bool, UInt8, Bool, Base.CodeUnits{UInt8, String}})
precompile(Tuple{typeof(WebSockets.locked_write), Sockets.TCPSocket, Bool, UInt8, Bool, Base.CodeUnits{UInt8, String}})
precompile(Tuple{typeof(Base.write), WebSockets.WebSocket{Sockets.TCPSocket}, String})
precompile(Tuple{typeof(Blink.callback!), Int64, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.get), Base.Dict{String, Any}, String, String})
precompile(Tuple{typeof(Blink.handlers), Blink.AtomShell.Window})
precompile(Tuple{typeof(Blink.handle), Function, Blink.AtomShell.Window, String})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{Any}, Tuple{Blink.AtomShell.Window, Bool}})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{Any}, Tuple{Blink.AtomShell.Window, Bool}})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{Blink.AtomShell.Window, Bool}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Blink.AtomShell.Window, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Blink.AtomShell.Window, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Multimedia.MIME{Symbol("text/plain")}, Blink.AtomShell.Window})
precompile(Tuple{typeof(Base.sizeof), Blink.AtomShell.Window})
precompile(Tuple{typeof(Base.sizeof), Blink.AtomShell.Electron})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Process})
precompile(Tuple{typeof(Base.print), Base.IOContext{REPL.Terminals.TTYTerminal}, String, Base.Cmd, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.collect_to!), Array{String, 1}, Base.Generator{Array{String, 1}, getfield(Base, Symbol("#540#543")){Base.IOContext{REPL.Terminals.TTYTerminal}}}, Int64, Int64})
precompile(Tuple{typeof(Base._collect), Array{String, 1}, Base.Generator{Array{String, 1}, getfield(Base, Symbol("#540#543")){Base.IOContext{REPL.Terminals.TTYTerminal}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.join), Base.IOContext{REPL.Terminals.TTYTerminal}, Array{String, 1}, Char})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Cmd})
precompile(Tuple{typeof(Base.print), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Cmd})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Sockets.TCPSocket})
precompile(Tuple{typeof(Base.print), Base.IOContext{REPL.Terminals.TTYTerminal}, Type{T} where T, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.print), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Libc.RawFD})
precompile(Tuple{typeof(Base.sizeof), Base.Libc.RawFD})
precompile(Tuple{Type{Ref{T} where T}, Base.Libc.RawFD})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{Nothing}}, Base.RefValue{Base.Libc.RawFD}})
precompile(Tuple{typeof(Base.:(+)), Ptr{Nothing}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Ptr{UInt8}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.isdelimited), Base.IOContext{REPL.Terminals.TTYTerminal}, Function})
precompile(Tuple{typeof(Base._show_default), Base.GenericIOBuffer{Array{UInt8, 1}}, Any})
precompile(Tuple{typeof(Base.show_function), Base.GenericIOBuffer{Array{UInt8, 1}}, Function, Bool})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Function})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Function})
precompile(Tuple{typeof(Base.show_function), Base.IOContext{REPL.Terminals.TTYTerminal}, Function, Bool})
precompile(Tuple{typeof(Base.sizeof), Function})
precompile(Tuple{typeof(Base.sizeof), Blink.Page})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, WebSockets.WebSocket{Sockets.TCPSocket}})
precompile(Tuple{typeof(Base.sizeof), Blink.AtomShell.WebIOBlinkComm})
precompile(Tuple{typeof(Base.sizeof), Distributed.Future})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Some{Any}})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Bool})
precompile(Tuple{typeof(Base.endswith), String, Char})
precompile(Tuple{typeof(REPL.LineEdit.edit_insert_newline), REPL.LineEdit.PromptState, Int64})
precompile(Tuple{typeof(REPL.LineEdit.edit_insert_newline), REPL.LineEdit.PromptState})
precompile(Tuple{typeof(REPL.LineEdit.setmark), REPL.LineEdit.MIState, Bool})
precompile(Tuple{typeof(REPL.LineEdit.setmark), REPL.LineEdit.MIState})
precompile(Tuple{typeof(REPL.LineEdit.set_action!), REPL.LineEdit.MIState, Symbol})
precompile(Tuple{typeof(REPL.LineEdit.edit_insert_newline), REPL.LineEdit.MIState})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#110#163")), Any, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.print_to_string), Base.Multimedia.MIME{Symbol("text/html")}})
precompile(Tuple{typeof(Base.Multimedia.istextmime), Base.Multimedia.MIME{Symbol("text/html")}})
precompile(Tuple{typeof(Base.rand), Type{UInt64}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/html")}, WebIO.Node{WebIO.DOM}})
precompile(Tuple{getfield(Base64, Symbol("##stringmime#6")), Nothing, typeof(Base64.stringmime), Base.Multimedia.MIME{Symbol("text/html")}, WebIO.Node{WebIO.DOM}})
precompile(Tuple{getfield(Blink, Symbol("##content!#5")), Bool, Bool, typeof(Blink.content!), Blink.AtomShell.Window, String, String})
precompile(Tuple{typeof(Blink.body!), Blink.AtomShell.Window, WebIO.Node{WebIO.DOM}})
precompile(Tuple{getfield(Base, Symbol("##sprint#338")), Nothing, Int64, typeof(Base.sprint), Function, WebIO.Node{WebIO.DOM}})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, WebIO.DOM})
precompile(Tuple{typeof(Base.map!), typeof(WebIO.render), Array{Any, 1}, FunctionalCollections.PersistentVector{Any}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Pair{String, Any}})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Dict{String, Any}})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, WebIO.Node{WebIO.DOM}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, WebIO.Node{WebIO.DOM}})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, WebIO.DOM, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(WebIO.render), WebIO.Node{WebIO.DOM}})
precompile(Tuple{typeof(WebIO.render), Widgets.Widget{:button, Int64}})
precompile(Tuple{Type{Base.Dict{String, Any}}, Base.Pair{String, String}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, JSON.Writer.CompositeTypeWrapper{WebIO.DOM}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Base.Dict{Symbol, Any}, String})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Pair{Symbol, Any}})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Dict{String, String}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, Base.Dict{String, String}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, String})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, JSON.Writer.CompositeTypeWrapper{WebIO.DOM}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, JSON.Writer.CompositeTypeWrapper{WebIO.DOM}})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Array{Any, 1}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Array{Any, 1}})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, WebIO.Node{WebIO.DOM}})
precompile(Tuple{typeof(WebIO.render), Widgets.Widget{:spinbox, Union{Nothing, Int64}}})
precompile(Tuple{typeof(WebIO.render), WebIO.Scope})
precompile(Tuple{getfield(WebIO, Symbol("##node#26")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Widgets.node), WebIO.Scope, Vararg{Any, N} where N})
precompile(Tuple{Type{WebIO.Node{T} where T}, WebIO.Scope, Array{Any, 1}, Base.Dict{Any, Any}})
precompile(Tuple{getfield(WebIO, Symbol("##Node#25")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{WebIO.Node{T} where T}, WebIO.Scope, WebIO.Node{WebIO.DOM}})
precompile(Tuple{Type{WebIO.Node{T} where T}, WebIO.Scope, WebIO.Node{WebIO.DOM}})
precompile(Tuple{typeof(JSON.Writer.lower), WebIO.Scope})
precompile(Tuple{typeof(JSON.Writer.lower), WebIO.Node{WebIO.Scope}})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, WebIO.Node{WebIO.Scope}})
precompile(Tuple{typeof(Base.getindex), Observables.Observable{Int64}})
precompile(Tuple{typeof(Observables.obsid), Observables.Observable{Int64}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{String, Bool}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, Bool}, Base.Pair{String, Int64}, Base.Pair{String, String}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{String, Bool}, Base.Pair{String, Int64}, Base.Pair{String, String}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, Bool}, Base.Pair{String, Int64}, Base.Pair{String, String}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{String}, Type{Bool}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Bool}, Tuple{Base.Pair{String, Bool}, Base.Pair{String, Int64}, Base.Pair{String, String}}, Int64})
precompile(Tuple{Type{Base.Dict{String, Integer}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{String, Bool}, Type{String}, Type{Integer}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, Integer}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, Integer}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Integer}, Bool, String})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, Integer}, Base.Dict{String, Bool}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Integer}, Int64, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Integer}, Tuple{Base.Pair{String, Bool}, Base.Pair{String, Int64}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{String, Integer}, Type{String}, Type{Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, Any}, Base.Dict{String, Integer}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, Bool}, Base.Pair{String, Int64}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(Base.getindex), Observables.Observable{Union{Nothing, Int64}}})
precompile(Tuple{typeof(Observables.obsid), Observables.Observable{Union{Nothing, Int64}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, String}, String, Nothing})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, String}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Nothing}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{String, String}, Type{String}, Type{Union{Nothing, String}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, Union{Nothing, String}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, Union{Nothing, String}}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Union{Nothing, String}}, String, String})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, Union{Nothing, String}}, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Union{Nothing, String}}, Nothing, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Union{Nothing, String}}, Nothing, Nothing})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Union{Nothing, String}}, String, Nothing})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Union{Nothing, String}}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Nothing}}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Dict{String, V} where V, 1}, Int64, Array{Base.Dict{String, String}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Base.Dict{String, String}, 1}, Base.Dict{String, Union{Nothing, String}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Dict{String, V} where V, 1}, Base.Generator{Array{Any, 1}, typeof(WebIO.lowerassets)}, Int64, Int64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Array{Base.Dict{String, V} where V, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{String, V} where V, 1}}}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.Dict{String, V} where V}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{String, V} where V, 1}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{String, V} where V, 1}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, String}, String, Array{Base.Dict{String, V} where V, 1}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, String}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{String, V} where V, 1}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Array{Base.Dict{String, V} where V, 1}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Array{Base.Dict{String, V} where V, 1}, Array{Base.Dict{String, V} where V, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, String, Array{Base.Dict{String, V} where V, 1}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{String, V} where V, 1}}}, Int64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Base.Dict{String, Any}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, String}, Base.Pair{String, Nothing}, Base.Pair{String, Base.Dict{String, Any}}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Array{WebIO.JSString, 1}}, Base.Pair{String, Base.Dict{Any, Any}}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, Nothing}, Base.Pair{String, Base.Dict{String, Any}}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Array{WebIO.JSString, 1}}, Base.Pair{String, Base.Dict{Any, Any}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, String}, Base.Pair{String, Nothing}, Base.Pair{String, Base.Dict{String, Any}}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Array{WebIO.JSString, 1}}, Base.Pair{String, Base.Dict{Any, Any}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, String}, Tuple{Base.Pair{String, String}, Base.Pair{String, Nothing}, Base.Pair{String, Base.Dict{String, Any}}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Array{WebIO.JSString, 1}}, Base.Pair{String, Base.Dict{Any, Any}}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Union{Nothing, String}}, Tuple{Base.Pair{String, String}, Base.Pair{String, Nothing}, Base.Pair{String, Base.Dict{String, Any}}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Array{WebIO.JSString, 1}}, Base.Pair{String, Base.Dict{Any, Any}}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{String, Union{Nothing, String}}, Type{String}, Type{Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, Any}, Base.Dict{String, Union{Nothing, String}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, Nothing}, Base.Pair{String, Base.Dict{String, Any}}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Array{WebIO.JSString, 1}}, Base.Pair{String, Base.Dict{Any, Any}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Base.Dict{Any, Any}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Array{WebIO.JSString, 1}, String})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Base.Dict{String, Any}})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Array{Base.Dict{String, V} where V, 1}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Array{Base.Dict{String, V} where V, 1}})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Dict{String, String}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Pair{String, Union{Nothing, String}}})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Dict{String, Union{Nothing, String}}})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Dict{String, Union{Nothing, String}}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Base.Dict{Any, Any}})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, WebIO.JSString})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Nothing})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Array{WebIO.JSString, 1}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Array{WebIO.JSString, 1}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Bool})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Int64})
precompile(Tuple{typeof(WebIO.render), String})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, Base.Dict{Any, Any}})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String})
precompile(Tuple{typeof(WebIO.render), Widgets.Widget{:dropdown, Any}})
precompile(Tuple{getfield(WebIO, Symbol("##Scope#31")), WebIO.Node{WebIO.DOM}, Nothing, Base.Dict{String, Tuple{Observables.AbstractObservable{T} where T, Union{Nothing, Bool}}}, Base.Set{String}, Nothing, Array{WebIO.Asset, 1}, Base.Dict{Any, Any}, Array{WebIO.JSString, 1}, Nothing, Type{WebIO.Scope}})
precompile(Tuple{Type{WebIO.Scope}})
precompile(Tuple{Type{WebIO.Node{T} where T}, WebIO.ObservableNode, Array{Any, 1}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Tuple{Observables.AbstractObservable{T} where T, Union{Nothing, Bool}}}, Tuple{Observables.Observable{AbstractString}, Nothing}, String})
precompile(Tuple{typeof(Base.lock), getfield(Base, Symbol("#473#474")){Base.WeakKeyDict{Any, Any}, Tuple{WeakRef, String}, Observables.Observable{AbstractString}}, Base.ReentrantLock})
precompile(Tuple{getfield(WebIO, Symbol("##setobservable!#37")), Nothing, typeof(WebIO.setobservable!), WebIO.Scope, String, Observables.Observable{AbstractString}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{WeakRef, Any}, Observables.Observable{AbstractString}})
precompile(Tuple{typeof(Base.lock), getfield(Base, Symbol("#493#494")){Base.WeakKeyDict{Any, Any}, Observables.Observable{AbstractString}}, Base.ReentrantLock})
precompile(Tuple{typeof(Base.lock), getfield(Base, Symbol("#495#496")){Base.WeakKeyDict{Any, Any}, Observables.Observable{AbstractString}}, Base.ReentrantLock})
precompile(Tuple{typeof(WebIO.onjs), Observables.Observable{AbstractString}, WebIO.JSString})
precompile(Tuple{typeof(WebIO.observable_to_scope), Observables.Observable{Any}})
precompile(Tuple{typeof(WebIO.render), Observables.Observable{Any}})
precompile(Tuple{typeof(WebIO.richest_mime), Observables.Observable{Any}})
precompile(Tuple{typeof(Base._collect), Array{String, 1}, Base.Generator{Array{String, 1}, Type{Base.Multimedia.MIME{mime} where mime}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(WebIO.richest_html), Observables.Observable{Any}})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("text/html")}, Any})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/html")}, WebIO.Node{WebIO.Scope}})
precompile(Tuple{typeof(Base.Multimedia._textrepr), Base.Multimedia.MIME{Symbol("text/html")}, Observables.Observable{Any}, Nothing})
precompile(Tuple{typeof(Base64.stringmime), Base.Multimedia.MIME{Symbol("text/html")}, Observables.Observable{Any}})
precompile(Tuple{Type{NamedTuple{(:setInnerHtml,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:setInnerHtml,), Tuple{String}}}})
precompile(Tuple{typeof(WebIO.recmerge!), Base.Dict{Any, Any}, Base.Dict{Symbol, String}, typeof(WebIO.recmerge)})
precompile(Tuple{getfield(WebIO, Symbol("#dom#12#14")){Base.Dict{Any, Any}, WebIO.DOM}, Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:setInnerHtml,), Tuple{String}}}, getfield(WebIO, Symbol("#dom#13")){getfield(WebIO, Symbol("#dom#12#14")){Base.Dict{Any, Any}, WebIO.DOM}}})
precompile(Tuple{getfield(WebIO, Symbol("#dom#13##kw")), NamedTuple{(:setInnerHtml,), Tuple{String}}, getfield(WebIO, Symbol("#dom#13")){getfield(WebIO, Symbol("#dom#12#14")){Base.Dict{Any, Any}, WebIO.DOM}}})
precompile(Tuple{typeof(WebIO.recmerge!), Base.Dict{Any, Any}, Base.Dict{Any, Any}, typeof(WebIO.recmerge)})
precompile(Tuple{getfield(WebIO, Symbol("#56#59")), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{AbstractString}, WeakRef})
precompile(Tuple{typeof(Base.isequal), PyCall.PyObject, Observables.Observable{AbstractString}})
precompile(Tuple{typeof(Base.:(==)), Observables.Observable{AbstractString}, WeakRef})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{AbstractString}, Observables.Observable{AbstractString}})
precompile(Tuple{typeof(Observables.listeners), Observables.Observable{AbstractString}})
precompile(Tuple{typeof(Observables.on), WebIO.SyncCallback, Observables.Observable{AbstractString}})
precompile(Tuple{typeof(WebIO.setup_comm), WebIO.SyncCallback, Observables.Observable{AbstractString}})
precompile(Tuple{getfield(Base, Symbol("##sprint#338")), Nothing, Int64, typeof(Base.sprint), Function, WebIO.Node{WebIO.Scope}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, WebIO.Node{WebIO.Scope}})
precompile(Tuple{typeof(Base.getindex), Observables.Observable{AbstractString}})
precompile(Tuple{typeof(Observables.obsid), Observables.Observable{AbstractString}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, Bool}, Base.Pair{String, String}, Base.Pair{String, String}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{String, Bool}, Base.Pair{String, String}, Base.Pair{String, String}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, Bool}, Base.Pair{String, String}, Base.Pair{String, String}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Bool}, Bool, Bool})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Bool}, Tuple{Base.Pair{String, Bool}, Base.Pair{String, String}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{String, Bool}, Type{String}, Type{Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, Any}, Base.Dict{String, Bool}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Bool, Bool})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, String, Bool})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, Bool}, Base.Pair{String, String}, Base.Pair{String, String}}, Int64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Array{Any, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Any, 1}}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Any, 1}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Any, 1}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, String}, String, Array{Any, 1}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, String}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Any, 1}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, String, Array{Any, 1}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Any, 1}}}, Int64})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, UInt64})
precompile(Tuple{typeof(Base.getindex), Observables.Observable{Any}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Array{OrderedCollections.OrderedDict{K, V} where V where K, 1}})
precompile(Tuple{typeof(Observables.obsid), Observables.Observable{Any}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, Bool}, Base.Pair{String, Array{OrderedCollections.OrderedDict{K, V} where V where K, 1}}, Base.Pair{String, String}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{String, Bool}, Base.Pair{String, Array{OrderedCollections.OrderedDict{K, V} where V where K, 1}}, Base.Pair{String, String}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, Bool}, Base.Pair{String, Array{OrderedCollections.OrderedDict{K, V} where V where K, 1}}, Base.Pair{String, String}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Bool}, Tuple{Base.Pair{String, Bool}, Base.Pair{String, Array{OrderedCollections.OrderedDict{K, V} where V where K, 1}}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Array{OrderedCollections.OrderedDict{K, V} where V where K, 1}, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, Bool}, Base.Pair{String, Array{OrderedCollections.OrderedDict{K, V} where V where K, 1}}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Array{OrderedCollections.OrderedDict{K, V} where V where K, 1}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Array{OrderedCollections.OrderedDict{K, V} where V where K, 1}})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, OrderedCollections.OrderedDict{String, Any}})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, OrderedCollections.OrderedDict{String, Any}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Pair{String, String}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Pair{String, Int64}})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Dict{Union{String, Symbol}, Any}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, Base.Dict{Union{String, Symbol}, Any}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Pair{Union{String, Symbol}, Any}})
precompile(Tuple{typeof(Base.getindex), Observables.Observable{Bool}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Bool})
precompile(Tuple{typeof(Observables.obsid), Observables.Observable{Bool}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, Bool}, Base.Pair{String, Bool}, Base.Pair{String, String}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{String, Bool}, Base.Pair{String, Bool}, Base.Pair{String, String}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, Bool}, Base.Pair{String, Bool}, Base.Pair{String, String}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Bool}, Tuple{Base.Pair{String, Bool}, Base.Pair{String, Bool}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, Bool}, Base.Pair{String, Bool}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, Base.Dict{String, Any}})
precompile(Tuple{getfield(MacroTools, Symbol("#16#18")), Bool})
precompile(Tuple{typeof(MacroTools.blockunify), Symbol, Expr})
precompile(Tuple{typeof(MacroTools.match_inner), Symbol, Expr, Base.Dict{Any, Any}})
precompile(Tuple{typeof(JSExpr.call_expr), Expr, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(JSExpr.intersperse), Tuple{String, String, String, String, String}, String})
precompile(Tuple{typeof(JSExpr.jsexpr_joined), Tuple{String, String, Bool, Symbol, Symbol}, String})
precompile(Tuple{typeof(JSExpr.jsexpr_joined), Tuple{String, String, Bool, Symbol, Symbol}})
precompile(Tuple{getfield(Base, Symbol("##sprint#338")), Nothing, Int64, typeof(Base.sprint), Function, Bool})
precompile(Tuple{getfield(JSExpr, Symbol("#1#2")), Base.GenericIOBuffer{Array{UInt8, 1}}, Bool})
precompile(Tuple{typeof(Base.vect), JSExpr.F, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), JSExpr.F, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_type), Type{JSExpr.F}, Type{Any}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Tuple{JSExpr.F, String, JSExpr.F, String}})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{Any}, Tuple{Blink.Page, Bool}})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{Any}, Tuple{Blink.Page, Bool}})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{Blink.Page, Bool}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Blink.Page, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Blink.Page, Bool}, Int64, Int64})
precompile(Tuple{getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#48#51")){Bool, getfield(Mux, Symbol("#absdir#50"))}, getfield(Mux, Symbol("#49#52")){getfield(Mux, Symbol("#absdir#50"))}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#18#19")){getfield(Mux, Symbol("#22#23")){Symbol, Int64}}, getfield(Mux, Symbol("#20#21")){String}}}, Base.Dict{Any, Any}})
precompile(Tuple{getfield(Mux, Symbol("#absdir#50")), Base.Dict{Any, Any}})
precompile(Tuple{getfield(Mux, Symbol("##validpath#36")), Bool, typeof(Mux.validpath), String, String})
precompile(Tuple{getfield(Mux, Symbol("#48#51")){Bool, getfield(Mux, Symbol("#absdir#50"))}, Base.Dict{Any, Any}})
precompile(Tuple{getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#48#51")){Bool, getfield(Mux, Symbol("#absdir#50"))}, getfield(Mux, Symbol("#49#52")){getfield(Mux, Symbol("#absdir#50"))}}, Function, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.:(*)), String, Base.SubString{String}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{String, String}, String})
precompile(Tuple{typeof(Base.isempty), Array{Base.SubString{String}, 1}})
precompile(Tuple{getfield(Base, Symbol("##open#270")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#277#278")){Tuple{}}, String})
precompile(Tuple{typeof(Mux.extension), String})
precompile(Tuple{typeof(Mux.fileheaders), String})
precompile(Tuple{getfield(Hiccup, Symbol("##Node#1")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{Hiccup.Node{tag} where tag}, Symbol, Base.Dict{Any, Any}, Array{Any, 1}})
precompile(Tuple{typeof(Mux.filelink), String, String})
precompile(Tuple{typeof(Base.grow_to!), Array{Base.SubString{String}, 1}, Base.Generator{Base.RegexMatchIterator, getfield(Hiccup, Symbol("#4#6"))}, Tuple{Int64, Bool}})
precompile(Tuple{typeof(Base.grow_to!), Array{Base.SubString{String}, 1}, Base.Generator{Base.RegexMatchIterator, getfield(Hiccup, Symbol("#4#6"))}})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.SubString{String}, 1}, Base.Generator{Array{Base.SubString{String}, 1}, getfield(Hiccup, Symbol("#trimfirst#5"))}, Int64, Int64})
precompile(Tuple{typeof(Base._collect), Array{Base.SubString{String}, 1}, Base.Generator{Array{Base.SubString{String}, 1}, getfield(Hiccup, Symbol("#trimfirst#5"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Hiccup.cssparse), String})
precompile(Tuple{getfield(Mux, Symbol("#41#42")){String}, String})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{String, 1}, getfield(Mux, Symbol("#41#42")){String}}})
precompile(Tuple{typeof(Mux.dirresponse), String})
precompile(Tuple{typeof(Mux.fresp), String})
precompile(Tuple{getfield(Mux, Symbol("#49#52")){getfield(Mux, Symbol("#absdir#50"))}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.Filesystem.joinpath), String})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{Symbol, String}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(WebIO.dispatch_request), Blink.AtomShell.WebIOBlinkComm, Base.Dict{String, Any}})
precompile(Tuple{typeof(WebIO.dispatch_response), Blink.AtomShell.WebIOBlinkComm, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, WebIO.Scope}, String})
precompile(Tuple{getfield(WebIO, Symbol("#29#30")){String}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{WebIO.AbstractConnection, Nothing}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{WebIO.AbstractConnection, Nothing}, Blink.AtomShell.WebIOBlinkComm})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{WebIO.AbstractConnection, Nothing}, Nothing, Blink.AtomShell.WebIOBlinkComm})
precompile(Tuple{typeof(WebIO.dispatch_command), Blink.AtomShell.WebIOBlinkComm, Base.Dict{String, Any}})
precompile(Tuple{typeof(WebIO.dispatch), Blink.AtomShell.WebIOBlinkComm, Base.Dict{String, Any}})
precompile(Tuple{getfield(Blink.AtomShell, Symbol("#22#23")){Blink.AtomShell.WebIOBlinkComm}, Base.Dict{String, Any}})
precompile(Tuple{typeof(WebIO.dispatch), WebIO.Scope, String, Int64})
precompile(Tuple{getfield(Observables, Symbol("##setindex!#5")), getfield(WebIO, Symbol("#44#45")), typeof(Base.setindex!), Observables.Observable{Any}, Int64})
precompile(Tuple{typeof(WebIO.set_nosync), Observables.Observable{Any}, Int64})
precompile(Tuple{getfield(InteractBase, Symbol("#126#129")){Observables.Observable{Any}}, Int64})
precompile(Tuple{getfield(Observables, Symbol("#38#41")){getfield(InteractBase, Symbol("#126#129")){Observables.Observable{Any}}, Observables.Observable{Any}, Array{Function, 1}}, Int64})
precompile(Tuple{typeof(Base.getindex), InteractBase.Vals2Idxs{UnionAll}, Int64})
precompile(Tuple{getfield(Observables, Symbol("##setindex!#5")), getfield(Base, Symbol("#66#67")){Base.Fix2{typeof(Base.in), Array{Function, 1}}}, typeof(Base.setindex!), Observables.Observable{Any}, Type{T} where T})
precompile(Tuple{getfield(Base, Symbol("#setindex!##kw")), NamedTuple{(:notify,), Tuple{getfield(Base, Symbol("#66#67")){Base.Fix2{typeof(Base.in), Array{Function, 1}}}}}, typeof(Base.setindex!), Observables.Observable{Any}, Type{T} where T})
precompile(Tuple{getfield(Base, Symbol("#66#67")){Base.Fix2{typeof(Base.in), Array{Function, 1}}}, Function})
precompile(Tuple{Observables.OnUpdate{Observables.MapUpdater{getfield(Main, Symbol("#5#10")), Any}, Tuple{Widgets.Widget{:dropdown, Any}}}, Type{T} where T})
precompile(Tuple{getfield(Observables, Symbol("##setindex!#5")), getfield(Observables, Symbol("#6#8")), typeof(Base.setindex!), Observables.Observable{Any}, Observables.Observable{Any}})
precompile(Tuple{Observables.MapUpdater{getfield(Main, Symbol("#5#10")), Any}, Type{T} where T})
precompile(Tuple{getfield(Widgets, Symbol("#spinbox##kw")), NamedTuple{(:label,), Tuple{String}}, typeof(Widgets.spinbox), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{getfield(Widgets, Symbol("##spinbox#36")), Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:label,), Tuple{String}}}, typeof(Widgets.spinbox), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{getfield(InteractBase, Symbol("##spinbox#44")), Float64, String, Nothing, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:min, :max, :step, :label), Tuple{Float64, Float64, Float64, String}}}, typeof(Widgets.spinbox), Interact.Bulma, String})
precompile(Tuple{getfield(InteractBase, Symbol("##spinbox#45")), Float64, Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:label,), Tuple{String}}}, typeof(Widgets.spinbox), Interact.Bulma, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{getfield(Widgets, Symbol("#spinbox##kw")), NamedTuple{(:label,), Tuple{String}}, typeof(Widgets.spinbox), Interact.Bulma, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{getfield(Widgets, Symbol("#input##kw")), NamedTuple{(:isnumeric, :placeholder, :typ, :min, :max, :step, :label), Tuple{Bool, String, String, Float64, Float64, Float64, String}}, typeof(Widgets.input), Observables.Observable{Union{Nothing, Float64}}})
precompile(Tuple{getfield(Widgets, Symbol("##input#40")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:isnumeric, :placeholder, :typ, :min, :max, :step, :label), Tuple{Bool, String, String, Float64, Float64, Float64, String}}}, typeof(Widgets.input), Observables.Observable{Union{Nothing, Float64}}})
precompile(Tuple{getfield(InteractBase, Symbol("##input#47")), WebIO.JSString, Array{Any, 1}, String, String, String, String, Base.Dict{Any, Any}, Bool, Array{Any, 1}, Base.Dict{Any, Any}, String, String, String, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:placeholder, :min, :max, :step), Tuple{String, Float64, Float64, Float64}}}, typeof(Widgets.input), Interact.Bulma, Observables.Observable{Union{Nothing, Float64}}})
precompile(Tuple{getfield(Widgets, Symbol("#input##kw")), NamedTuple{(:isnumeric, :placeholder, :typ, :min, :max, :step, :label), Tuple{Bool, String, String, Float64, Float64, Float64, String}}, typeof(Widgets.input), Interact.Bulma, Observables.Observable{Union{Nothing, Float64}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:className, :attributes, :style, :placeholder, :min, :max, :step), Tuple{String, Base.Dict{Any, Any}, Base.Dict{Any, Any}, String, Float64, Float64, Float64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:className, :attributes, :style, :placeholder, :min, :max, :step), Tuple{String, Base.Dict{Any, Any}, Base.Dict{Any, Any}, String, Float64, Float64, Float64}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Float64, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Float64, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Tuple{Observables.AbstractObservable{T} where T, Union{Nothing, Bool}}}, Tuple{Observables.Observable{Union{Nothing, Float64}}, Nothing}, String})
precompile(Tuple{typeof(Base.lock), getfield(Base, Symbol("#473#474")){Base.WeakKeyDict{Any, Any}, Tuple{WeakRef, String}, Observables.Observable{Union{Nothing, Float64}}}, Base.ReentrantLock})
precompile(Tuple{getfield(WebIO, Symbol("##setobservable!#37")), Nothing, typeof(WebIO.setobservable!), WebIO.Scope, String, Observables.Observable{Union{Nothing, Float64}}})
precompile(Tuple{typeof(WebIO.setobservable!), WebIO.Scope, String, Observables.Observable{Union{Nothing, Float64}}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{WeakRef, Any}, Observables.Observable{Union{Nothing, Float64}}})
precompile(Tuple{typeof(Base.lock), getfield(Base, Symbol("#493#494")){Base.WeakKeyDict{Any, Any}, Observables.Observable{Union{Nothing, Float64}}}, Base.ReentrantLock})
precompile(Tuple{typeof(Base.lock), getfield(Base, Symbol("#495#496")){Base.WeakKeyDict{Any, Any}, Observables.Observable{Union{Nothing, Float64}}}, Base.ReentrantLock})
precompile(Tuple{typeof(WebIO.onjs), Observables.Observable{Union{Nothing, Float64}}, WebIO.JSString})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{Union{Nothing, Float64}}, WeakRef})
precompile(Tuple{typeof(Base.isequal), PyCall.PyObject, Observables.Observable{Union{Nothing, Float64}}})
precompile(Tuple{typeof(Base.:(==)), Observables.Observable{Union{Nothing, Float64}}, WeakRef})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{Union{Nothing, Float64}}, Observables.Observable{Union{Nothing, Float64}}})
precompile(Tuple{typeof(Observables.listeners), Observables.Observable{Union{Nothing, Float64}}})
precompile(Tuple{typeof(Observables.on), WebIO.SyncCallback, Observables.Observable{Union{Nothing, Float64}}})
precompile(Tuple{typeof(WebIO.setup_comm), WebIO.SyncCallback, Observables.Observable{Union{Nothing, Float64}}})
precompile(Tuple{typeof(JSExpr.jsexpr), Observables.Observable{Union{Nothing, Float64}}})
precompile(Tuple{Type{NamedTuple{(:scope, :output, :layout), T} where T<:Tuple}, Tuple{WebIO.Scope, Observables.Observable{Union{Nothing, Float64}}, getfield(Base, Symbol("#64#65")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{WebIO.Scope, Observables.Observable{Union{Nothing, Float64}}, getfield(Base, Symbol("#64#65")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}}}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:scope, :output, :layout), Tuple{WebIO.Scope, Observables.Observable{Union{Nothing, Float64}}, getfield(Base, Symbol("#64#65")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}}}, Type{Widgets.Widget{:input, S} where S}, OrderedCollections.OrderedDict{Symbol, Any}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:scope, :output, :layout), Tuple{WebIO.Scope, Observables.Observable{Union{Nothing, Float64}}, getfield(Base, Symbol("#64#65")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}}}, Type{Widgets.Widget{:input, S} where S}, Array{Base.Pair{String, Any}, 1}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Observables.Observable{Union{Nothing, Float64}}})
precompile(Tuple{typeof(OrderedCollections._setindex!), OrderedCollections.OrderedDict{Symbol, Any}, Observables.Observable{Union{Nothing, Float64}}, Symbol, Int64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Symbol, Any}, Observables.Observable{Union{Nothing, Float64}}, Symbol})
precompile(Tuple{getfield(Widgets, Symbol("#_#1#2")), Observables.Observable{Union{Nothing, Float64}}, WebIO.Scope, Function, Type{Widgets.Widget{:input, S} where S}, OrderedCollections.OrderedDict{Symbol, Any}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Observables.Observable{Union{Nothing, Float64}}, Symbol})
precompile(Tuple{getfield(Widgets, Symbol("##_#7")), Base.Iterators.Pairs{Symbol, Observables.Observable{Union{Nothing, Float64}}, Tuple{Symbol}, NamedTuple{(:output,), Tuple{Observables.Observable{Union{Nothing, Float64}}}}}, Type{Widgets.Widget{:spinbox, S} where S}, Widgets.Widget{:input, Union{Nothing, Float64}}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:output,), Tuple{Observables.Observable{Union{Nothing, Float64}}}}, Type{Widgets.Widget{:spinbox, S} where S}, Widgets.Widget{:input, Union{Nothing, Float64}}})
precompile(Tuple{typeof(Base.get!), getfield(Base, Symbol("#242#243")){Observables.Observable{Union{Nothing, Float64}}}, Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Base.get!), Base.Dict{Symbol, Any}, Symbol, Observables.Observable{Union{Nothing, Float64}}})
precompile(Tuple{Type{NamedTuple{(:output, :components, :layout, :scope), T} where T<:Tuple}, Tuple{Observables.Observable{Union{Nothing, Float64}}, OrderedCollections.OrderedDict{Symbol, Any}, getfield(Base, Symbol("#64#65")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}, WebIO.Scope}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:output, :components, :layout, :scope), Tuple{Observables.Observable{Union{Nothing, Float64}}, OrderedCollections.OrderedDict{Symbol, Any}, getfield(Base, Symbol("#64#65")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}, WebIO.Scope}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Observables.Observable{Union{Nothing, Float64}}, getfield(Base, Symbol("#64#65")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}, WebIO.Scope}}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:output, :layout, :scope), Tuple{Observables.Observable{Union{Nothing, Float64}}, getfield(Base, Symbol("#64#65")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}, WebIO.Scope}}, Type{Widgets.Widget{:spinbox, S} where S}, OrderedCollections.OrderedDict{Symbol, Any}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:output, :components, :layout, :scope), Tuple{Observables.Observable{Union{Nothing, Float64}}, OrderedCollections.OrderedDict{Symbol, Any}, getfield(Base, Symbol("#64#65")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}, WebIO.Scope}}, Type{Widgets.Widget{:spinbox, S} where S}})
precompile(Tuple{getfield(Widgets, Symbol("#_#1#2")), Observables.Observable{Union{Nothing, Float64}}, WebIO.Scope, Function, Type{Widgets.Widget{:spinbox, S} where S}, OrderedCollections.OrderedDict{Symbol, Any}})
precompile(Tuple{typeof(Base.getindex), Widgets.Widget{:spinbox, Union{Nothing, Float64}}, Symbol})
precompile(Tuple{typeof(Widgets.onchange), Widgets.Widget{:spinbox, Union{Nothing, Float64}}})
precompile(Tuple{typeof(Base.getindex), Widgets.Widget{:spinbox, Union{Nothing, Float64}}})
precompile(Tuple{getfield(Widgets, Symbol("##_#7")), Base.Iterators.Pairs{Symbol, Observables.Observable{Union{Nothing, Float64}}, Tuple{Symbol}, NamedTuple{(:output,), Tuple{Observables.Observable{Union{Nothing, Float64}}}}}, Type{Widgets.Widget{:spinbox, S} where S}, Widgets.Widget{:spinbox, Union{Nothing, Float64}}})
precompile(Tuple{typeof(Widgets.onchange), Widgets.Widget{:spinbox, Union{Nothing, Float64}}, Observables.Observable{Int64}})
precompile(Tuple{typeof(Observables.on), Function, Observables.Observable{Union{Nothing, Float64}}})
precompile(Tuple{typeof(WebIO.setup_comm), Function, Observables.Observable{Union{Nothing, Float64}}})
precompile(Tuple{typeof(Base.map), Function, Widgets.Widget{:spinbox, Union{Nothing, Float64}}})
precompile(Tuple{typeof(Main.bil_ui), Function, Widgets.Widget{:spinbox, Union{Nothing, Float64}}})
precompile(Tuple{typeof(Base.map!), Function, Observables.Observable{Any}, Widgets.Widget{:spinbox, Union{Nothing, Float64}}})
precompile(Tuple{getfield(Observables, Symbol("##map#31")), DynamicalBilliards.Billiard{Float64, 5, Tuple{DynamicalBilliards.Disk{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, typeof(Base.map), Function, Widgets.Widget{:spinbox, Union{Nothing, Float64}}})
precompile(Tuple{typeof(Observables.onany), Function, Widgets.Widget{:spinbox, Union{Nothing, Float64}}})
precompile(Tuple{Type{Observables.OnUpdate{F, Args} where Args where F}, Observables.MapUpdater{typeof(Main.sinai), Any}, Tuple{Widgets.Widget{:spinbox, Union{Nothing, Float64}}}})
precompile(Tuple{typeof(Observables.listeners), Widgets.Widget{:spinbox, Union{Nothing, Float64}}})
precompile(Tuple{typeof(Observables.on), Function, Widgets.Widget{:spinbox, Union{Nothing, Float64}}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{WeakRef, Any}, Widgets.Widget{:spinbox, Union{Nothing, Float64}}})
precompile(Tuple{typeof(Base.lock), getfield(Base, Symbol("#493#494")){Base.WeakKeyDict{Any, Any}, Widgets.Widget{:spinbox, Union{Nothing, Float64}}}, Base.ReentrantLock})
precompile(Tuple{typeof(Base.lock), getfield(Base, Symbol("#495#496")){Base.WeakKeyDict{Any, Any}, Widgets.Widget{:spinbox, Union{Nothing, Float64}}}, Base.ReentrantLock})
precompile(Tuple{typeof(WebIO.setup_comm), Function, Widgets.Widget{:spinbox, Union{Nothing, Float64}}})
precompile(Tuple{typeof(Base.isequal), Widgets.Widget{:spinbox, Union{Nothing, Float64}}, WeakRef})
precompile(Tuple{typeof(Base.isequal), PyCall.PyObject, Widgets.Widget{:spinbox, Union{Nothing, Float64}}})
precompile(Tuple{typeof(Base.:(==)), Widgets.Widget{:spinbox, Union{Nothing, Float64}}, WeakRef})
precompile(Tuple{typeof(Base.isequal), Widgets.Widget{:spinbox, Union{Nothing, Float64}}, Observables.Observable{Any}})
precompile(Tuple{typeof(Base.isequal), Widgets.Widget{:spinbox, Union{Nothing, Float64}}, Observables.Observable{Int64}})
precompile(Tuple{typeof(BilharesMarkov.random_on_border), Type{BilharesMarkov.HyperBKParticle{T} where T<:AbstractFloat}, DynamicalBilliards.Billiard{Float64, 5, Tuple{DynamicalBilliards.Disk{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, Int64})
precompile(Tuple{Type{BilharesMarkov.HyperBKParticle{T} where T<:AbstractFloat}, StaticArrays.SArray{Tuple{2}, Float64, 1, 2}, StaticArrays.SArray{Tuple{2}, Float64, 1, 2}})
precompile(Tuple{typeof(Base._array_for), Type{BilharesMarkov.HyperBKParticle{Float64}}, Base.UnitRange{Int64}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{BilharesMarkov.HyperBKParticle{Float64}, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(BilharesMarkov, Symbol("#13#14")){Float64, UnionAll, DynamicalBilliards.Billiard{Float64, 5, Tuple{DynamicalBilliards.Disk{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, Array{Float64, 1}, Array{Float64, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{BilharesMarkov.HyperBKParticle{Float64}, 1}, BilharesMarkov.HyperBKParticle{Float64}, Base.Generator{Base.UnitRange{Int64}, getfield(BilharesMarkov, Symbol("#13#14")){Float64, UnionAll, DynamicalBilliards.Billiard{Float64, 5, Tuple{DynamicalBilliards.Disk{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, Array{Float64, 1}, Array{Float64, 1}}}, Int64})
precompile(Tuple{getfield(DynamicalBilliards, Symbol("##parallelize#69")), Symbol, typeof(DynamicalBilliards.parallelize), Function, DynamicalBilliards.Billiard{Float64, 5, Tuple{DynamicalBilliards.Disk{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, Int64, Array{BilharesMarkov.HyperBKParticle{Float64}, 1}})
precompile(Tuple{typeof(DynamicalBilliards.parallelize), Function, DynamicalBilliards.Billiard{Float64, 5, Tuple{DynamicalBilliards.Disk{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, Int64, Array{BilharesMarkov.HyperBKParticle{Float64}, 1}})
precompile(Tuple{typeof(DynamicalBilliards.collision), Type{BilharesMarkov.PropagatesLinearly{BilharesMarkov.HyperBKParticle{Float64}}}, BilharesMarkov.HyperBKParticle{Float64}, DynamicalBilliards.Disk{Float64}})
precompile(Tuple{typeof(DynamicalBilliards.collision), Type{BilharesMarkov.PropagatesLinearly{BilharesMarkov.HyperBKParticle{Float64}}}, BilharesMarkov.HyperBKParticle{Float64}, DynamicalBilliards.InfiniteWall{Float64}})
precompile(Tuple{typeof(DynamicalBilliards.next_collision), BilharesMarkov.HyperBKParticle{Float64}, DynamicalBilliards.Billiard{Float64, 5, Tuple{DynamicalBilliards.Disk{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}})
precompile(Tuple{typeof(DynamicalBilliards._correct_pos!), BilharesMarkov.HyperBKParticle{Float64}, DynamicalBilliards.Disk{Float64}})
precompile(Tuple{typeof(DynamicalBilliards.boundarymap), BilharesMarkov.HyperBKParticle{Float64}, DynamicalBilliards.Billiard{Float64, 5, Tuple{DynamicalBilliards.Disk{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, Int64, StaticArrays.SArray{Tuple{6}, Float64, 1, 6}})
precompile(Tuple{getfield(DynamicalBilliards, Symbol("#98#threadsfor_fun#72")){typeof(DynamicalBilliards.boundarymap), DynamicalBilliards.Billiard{Float64, 5, Tuple{DynamicalBilliards.Disk{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, Int64, Array{BilharesMarkov.HyperBKParticle{Float64}, 1}, StaticArrays.SArray{Tuple{6}, Float64, 1, 6}, Array{Array{StaticArrays.SArray{Tuple{2}, Float64, 1, 2}, 1}, 1}, Base.UnitRange{Int64}}, Bool})
precompile(Tuple{getfield(DynamicalBilliards, Symbol("#98#threadsfor_fun#72")){typeof(DynamicalBilliards.boundarymap), DynamicalBilliards.Billiard{Float64, 5, Tuple{DynamicalBilliards.Disk{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, Int64, Array{BilharesMarkov.HyperBKParticle{Float64}, 1}, StaticArrays.SArray{Tuple{6}, Float64, 1, 6}, Array{Array{StaticArrays.SArray{Tuple{2}, Float64, 1, 2}, 1}, 1}, Base.UnitRange{Int64}}})
precompile(Tuple{getfield(BilharesMarkov, Symbol("##_oc_plot#3")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(BilharesMarkov._oc_plot), typeof(BilharesMarkov.hyper_rtransf), DynamicalBilliards.Disk{Float64}})
precompile(Tuple{getfield(BilharesMarkov, Symbol("##plot#1")), PyCall.PyObject, typeof(PyPlot.plot), DynamicalBilliards.Billiard{Float64, 5, Tuple{DynamicalBilliards.Disk{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, Type{BilharesMarkov.HyperBKParticle{T} where T<:AbstractFloat}})
precompile(Tuple{getfield(PyPlot, Symbol("#plot##kw")), NamedTuple{(:ax,), Tuple{PyCall.PyObject}}, typeof(PyPlot.plot), DynamicalBilliards.Billiard{Float64, 5, Tuple{DynamicalBilliards.Disk{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, Type{BilharesMarkov.HyperBKParticle{T} where T<:AbstractFloat}})
precompile(Tuple{typeof(Base._linspace1), Type{Float64}, Float64, Float64, Int64})
precompile(Tuple{typeof(Base.steprangelen_hp), Type{Float64}, Tuple{Int64, Int64}, Tuple{Int64, Int64}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.splitprec), Type{Float64}, Int128})
precompile(Tuple{typeof(Base.:(/)), Base.TwicePrecision{Float64}, Int128})
precompile(Tuple{typeof(Base.steprangelen_hp), Type{Float64}, Tuple{Int128, Int128}, Tuple{Int128, Int128}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._linspace), Type{Float64}, Int64, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._linspace), Float64, Float64, Int64})
precompile(Tuple{typeof(Base._range), Float64, Nothing, Float64, Int64})
precompile(Tuple{getfield(BilharesMarkov, Symbol("##plot#20")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(PyPlot.plot), DynamicalBilliards.InfiniteWall{Float64}, Type{BilharesMarkov.HyperBKParticle{T} where T<:AbstractFloat}})
precompile(Tuple{typeof(PyPlot.plot), DynamicalBilliards.InfiniteWall{Float64}, Type{BilharesMarkov.HyperBKParticle{T} where T<:AbstractFloat}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Iterators.Zip{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, getfield(BilharesMarkov, Symbol("#21#22"))}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Iterators.Zip{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, getfield(BilharesMarkov, Symbol("#21#22"))}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.Iterators.zip), Tuple{Float64, Float64}, Vararg{Tuple{Float64, Float64}, N} where N})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Float64}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Float64, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Float64, Float64, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Float64, Float64, Float64, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.Iterators._zip_min_length), Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Base.Iterators._zip_min_length), Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Base.Iterators._zip_min_length), Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}, 1}, Base.Iterators.Zip{Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Iterators.Zip{Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}}}})
precompile(Tuple{typeof(Base.argtail), Tuple{Float64, Float64}, Tuple{Float64, Float64}, Vararg{Tuple{Float64, Float64}, N} where N})
precompile(Tuple{typeof(Base.Iterators._zip_isdone), Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}}, Tuple{Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.Iterators._zip_isdone), Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}}, Tuple{Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.Iterators._zip_isdone), Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}}, Tuple{Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.Iterators._zip_isdone), Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}}, Tuple{Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.Iterators._zip_isdone), Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}}, Tuple{Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.Iterators._zip_isdone), Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}}, Tuple{Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.Iterators._zip_isdone), Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}}, Tuple{Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.Iterators._zip_isdone), Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}}, Tuple{Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_interleave), Tuple{Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}, Tuple{}, Tuple{Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_interleave), Tuple{Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}, Tuple{}, Tuple{Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_interleave), Tuple{Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}, Tuple{}, Tuple{Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_interleave), Tuple{Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}, Tuple{}, Tuple{Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_interleave), Tuple{Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}, Tuple{}, Tuple{Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_interleave), Tuple{Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}, Tuple{}, Tuple{Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_interleave), Tuple{Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}, Tuple{}, Tuple{Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_interleave), Tuple{Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}, Tuple{}, Tuple{Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_interleave), Tuple{Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}, Tuple{}, Tuple{Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}}, Tuple{Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.argtail), Tuple{}, Tuple{}, Vararg{Tuple{}, N} where N})
precompile(Tuple{typeof(Base.argtail), Base.Missing, Base.Missing, Vararg{Base.Missing, N} where N})
precompile(Tuple{typeof(Base.argtail), Tuple{Float64, Int64}, Tuple{Float64, Int64}, Vararg{Tuple{Float64, Int64}, N} where N})
precompile(Tuple{typeof(Base.Iterators._zip_isdone), Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}}, Tuple{Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{typeof(Base.Iterators._zip_isdone), Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}}, Tuple{Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{typeof(Base.Iterators._zip_isdone), Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}}, Tuple{Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{typeof(Base.Iterators._zip_isdone), Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}}, Tuple{Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{typeof(Base.Iterators._zip_isdone), Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}}, Tuple{Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{typeof(Base.Iterators._zip_isdone), Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}}, Tuple{Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{typeof(Base.Iterators._zip_isdone), Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}}, Tuple{Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{typeof(Base.Iterators._zip_isdone), Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}}, Tuple{Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}}, Tuple{Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{typeof(Base.argtail), Tuple{Int64}, Tuple{Int64}, Vararg{Tuple{Int64}, N} where N})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.collect), Tuple{Array{Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.collect), Tuple{Array{Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}, 1}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.collect), Tuple{Base.Broadcast.Extruded{Array{Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.collect), Tuple{Array{Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}, 1}}}})
precompile(Tuple{typeof(Base.indexed_iterate), Array{Array{Float64, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Array{Array{Float64, 1}, 1}, Int64, Int64})
precompile(Tuple{getfield(PyPlot, Symbol("#plot##kw")), NamedTuple{(:color, :linestyle, :lw), Tuple{Tuple{Int64, Float64, Int64}, String, Float64}}, typeof(PyPlot.plot), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(PyPlot, Symbol("#plot##kw")), NamedTuple{(:ax,), Tuple{PyCall.PyObject}}, typeof(PyPlot.plot), Array{BilharesMarkov.HyperBKParticle{Float64}, 1}, Type{BilharesMarkov.HyperBKParticle{T} where T<:AbstractFloat}, Array{String, 1}})
precompile(Tuple{typeof(BilharesMarkov._p_plot), Function, Array{BilharesMarkov.HyperBKParticle{Float64}, 1}, Array{String, 1}, PyCall.PyObject})
precompile(Tuple{typeof(BilharesMarkov.hyper_transf), Float64, Float64})
precompile(Tuple{typeof(Base.getindex), Array{BilharesMarkov.HyperBKParticle{Float64}, 1}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Float64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Int64, Array{Float64, 1}, Int64, Int64})
precompile(Tuple{getfield(BilharesMarkov, Symbol("##timeseries!#15")), Function, Float64, typeof(DynamicalBilliards.timeseries!), BilharesMarkov.HyperBKParticle{Float64}, DynamicalBilliards.Billiard{Float64, 5, Tuple{DynamicalBilliards.Disk{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, Int64})
precompile(Tuple{typeof(CSSUtil.vbox), Widgets.Widget{:togglebuttons, Any}, Widgets.Widget{:spinbox, Union{Nothing, Float64}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.vect), Widgets.Widget{:togglebuttons, Any}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Widgets.Widget{:togglebuttons, Any}, Widgets.Widget{:spinbox, Union{Nothing, Float64}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Widgets.Widget{:spinbox, Union{Nothing, Float64}}, Nothing})
precompile(Tuple{typeof(Base.promote_type), Type{Widgets.Widget{:togglebuttons, Any}}, Type{Union{Nothing, Widgets.Widget{:spinbox, Union{Nothing, Float64}}}}})
precompile(Tuple{Type{Array{Union{Nothing, Widgets.Widget{T, S} where S where T}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Nothing, Widgets.Widget{T, S} where S where T}, 1}, Tuple{Widgets.Widget{:togglebuttons, Any}, Widgets.Widget{:spinbox, Union{Nothing, Float64}}, Nothing}})
precompile(Tuple{typeof(Base.setindex!), Array{Union{Nothing, Widgets.Widget{T, S} where S where T}, 1}, Widgets.Widget{:togglebuttons, Any}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Union{Nothing, Widgets.Widget{T, S} where S where T}, 1}, Widgets.Widget{:spinbox, Union{Nothing, Float64}}, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Union{Nothing, Widgets.Widget{T, S} where S where T}, 1}}})
precompile(Tuple{typeof(CSSUtil.container), Array{Union{Nothing, Widgets.Widget{T, S} where S where T}, 1}})
precompile(Tuple{typeof(CSSUtil.vbox), Array{Union{Nothing, Widgets.Widget{T, S} where S where T}, 1}})
precompile(Tuple{getfield(WebIO, Symbol("#dom#13")){getfield(WebIO, Symbol("#dom#12#14")){Base.Dict{Any, Any}, WebIO.DOM}}, Widgets.Widget{:togglebuttons, Any}, Vararg{Any, N} where N})
precompile(Tuple{getfield(WebIO, Symbol("#dom#12#14")){Base.Dict{Any, Any}, WebIO.DOM}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, getfield(WebIO, Symbol("#dom#13")){getfield(WebIO, Symbol("#dom#12#14")){Base.Dict{Any, Any}, WebIO.DOM}}, Widgets.Widget{:togglebuttons, Any}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Widgets.node), WebIO.DOM, Widgets.Widget{:togglebuttons, Any}, Vararg{Any, N} where N})
precompile(Tuple{Type{WebIO.Node{T} where T}, WebIO.DOM, Widgets.Widget{:togglebuttons, Any}, Vararg{Any, N} where N})
precompile(Tuple{getfield(WebIO, Symbol("##Node#25")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{WebIO.Node{T} where T}, WebIO.DOM, Widgets.Widget{:togglebuttons, Any}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Observables, Symbol("##map#31")), WebIO.Node{WebIO.DOM}, typeof(Base.map), Function, Widgets.Widget{:togglebuttons, Any}, Widgets.Widget{:spinbox, Union{Nothing, Int64}}, Vararg{Any, N} where N})
precompile(Tuple{Observables.OnUpdate{Observables.MapUpdater{getfield(WebIO, Symbol("#55#58")), AbstractString}, Tuple{Observables.Observable{Any}}}, Observables.Observable{Any}})
precompile(Tuple{getfield(Observables, Symbol("##setindex!#5")), getfield(Observables, Symbol("#6#8")), typeof(Base.setindex!), Observables.Observable{AbstractString}, String})
precompile(Tuple{Observables.MapUpdater{getfield(WebIO, Symbol("#55#58")), AbstractString}, Observables.Observable{Any}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Tuple{Observables.AbstractObservable{T} where T, Union{Nothing, Bool}}}, Tuple{Observables.Observable{WebIO.Node{WebIO.DOM}}, Nothing}, String})
precompile(Tuple{typeof(Base.lock), getfield(Base, Symbol("#473#474")){Base.WeakKeyDict{Any, Any}, Tuple{WeakRef, String}, Observables.Observable{WebIO.Node{WebIO.DOM}}}, Base.ReentrantLock})
precompile(Tuple{getfield(WebIO, Symbol("##setobservable!#37")), Nothing, typeof(WebIO.setobservable!), WebIO.Scope, String, Observables.Observable{WebIO.Node{WebIO.DOM}}})
precompile(Tuple{Type{Observables.Observable{T} where T}, WebIO.Scope, String, WebIO.Node{WebIO.DOM}})
precompile(Tuple{typeof(Base.map!), Function, Observables.Observable{WebIO.Node{WebIO.DOM}}, Observables.Observable{Any}})
precompile(Tuple{Type{Observables.MapUpdater{F, T} where T where F}, getfield(WebIO, Symbol("#54#57")){Observables.Observable{Any}, WebIO.Scope}, Observables.Observable{WebIO.Node{WebIO.DOM}}})
precompile(Tuple{Type{Observables.OnUpdate{F, Args} where Args where F}, Observables.MapUpdater{getfield(WebIO, Symbol("#54#57")){Observables.Observable{Any}, WebIO.Scope}, WebIO.Node{WebIO.DOM}}, Tuple{Observables.Observable{Any}}})
precompile(Tuple{typeof(Observables.listeners), Observables.Observable{WebIO.Node{WebIO.DOM}}})
precompile(Tuple{typeof(Observables.on), WebIO.SyncCallback, Observables.Observable{WebIO.Node{WebIO.DOM}}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{WeakRef, Any}, Observables.Observable{WebIO.Node{WebIO.DOM}}})
precompile(Tuple{typeof(Base.lock), getfield(Base, Symbol("#493#494")){Base.WeakKeyDict{Any, Any}, Observables.Observable{WebIO.Node{WebIO.DOM}}}, Base.ReentrantLock})
precompile(Tuple{typeof(Base.lock), getfield(Base, Symbol("#495#496")){Base.WeakKeyDict{Any, Any}, Observables.Observable{WebIO.Node{WebIO.DOM}}}, Base.ReentrantLock})
precompile(Tuple{typeof(WebIO.setup_comm), WebIO.SyncCallback, Observables.Observable{WebIO.Node{WebIO.DOM}}})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{WebIO.Node{WebIO.DOM}}, WeakRef})
precompile(Tuple{typeof(Base.isequal), PyCall.PyObject, Observables.Observable{WebIO.Node{WebIO.DOM}}})
precompile(Tuple{typeof(Base.:(==)), Observables.Observable{WebIO.Node{WebIO.DOM}}, WeakRef})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{WebIO.Node{WebIO.DOM}}, Observables.Observable{WebIO.Node{WebIO.DOM}}})
precompile(Tuple{typeof(Base.getproperty), Observables.Observable{WebIO.Node{WebIO.DOM}}, Symbol})
precompile(Tuple{Type{WebIO.ObservableNode}, String, String})
precompile(Tuple{getfield(WebIO, Symbol("##Node#25")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{WebIO.Node{T} where T}, WebIO.Scope, WebIO.Node{WebIO.ObservableNode}})
precompile(Tuple{Type{WebIO.Node{T} where T}, WebIO.Scope, WebIO.Node{WebIO.ObservableNode}})
precompile(Tuple{typeof(Base.getindex), Observables.Observable{WebIO.Node{WebIO.DOM}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, WebIO.Node{WebIO.DOM}})
precompile(Tuple{typeof(Observables.obsid), Observables.Observable{WebIO.Node{WebIO.DOM}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, Bool}, Base.Pair{String, WebIO.Node{WebIO.DOM}}, Base.Pair{String, String}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{String, Bool}, Base.Pair{String, WebIO.Node{WebIO.DOM}}, Base.Pair{String, String}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, Bool}, Base.Pair{String, WebIO.Node{WebIO.DOM}}, Base.Pair{String, String}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Bool}, Tuple{Base.Pair{String, Bool}, Base.Pair{String, WebIO.Node{WebIO.DOM}}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, WebIO.Node{WebIO.DOM}, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, Bool}, Base.Pair{String, WebIO.Node{WebIO.DOM}}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(WebIO.render), WebIO.Node{WebIO.ObservableNode}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, WebIO.Node{WebIO.DOM}})
precompile(Tuple{typeof(Widgets.render), Widgets.Widget{:togglebuttons, Any}})
precompile(Tuple{typeof(WebIO.render), Widgets.Widget{:togglebuttons, Any}})
precompile(Tuple{getfield(InteractBase, Symbol("#147#151")), Widgets.Widget{:togglebuttons, Any}})
precompile(Tuple{getfield(WebIO, Symbol("##Node#25")), Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:className,), Tuple{String}}}, Type{WebIO.Node{T} where T}, Symbol, WebIO.Scope})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:className,), Tuple{String}}, Type{WebIO.Node{T} where T}, Symbol, WebIO.Scope})
precompile(Tuple{typeof(Widgets.render), Widgets.Widget{:spinbox, Union{Nothing, Float64}}})
precompile(Tuple{typeof(WebIO.render), Widgets.Widget{:spinbox, Union{Nothing, Float64}}})
precompile(Tuple{getfield(Base, Symbol("#64#65")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}, Widgets.Widget{:spinbox, Union{Nothing, Float64}}})
precompile(Tuple{typeof(WebIO.render), Nothing})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Char})
precompile(Tuple{typeof(JSON.Writer.show_string), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Char})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Char})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Pair{String, Char}})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Pair{String, String}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, Base.Pair{String, String}})
precompile(Tuple{typeof(Base.getindex), Observables.Observable{Union{Nothing, Float64}}})
precompile(Tuple{typeof(Observables.obsid), Observables.Observable{Union{Nothing, Float64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, Bool}, Base.Pair{String, Float64}, Base.Pair{String, String}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{String, Bool}, Base.Pair{String, Float64}, Base.Pair{String, String}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, Bool}, Base.Pair{String, Float64}, Base.Pair{String, String}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Bool}, Tuple{Base.Pair{String, Bool}, Base.Pair{String, Float64}, Base.Pair{String, String}}, Int64})
precompile(Tuple{Type{Base.Dict{String, Real}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{String, Bool}, Type{String}, Type{Real}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, Real}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, Real}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Real}, Bool, String})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, Real}, Base.Dict{String, Bool}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Real}, Float64, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Real}, Tuple{Base.Pair{String, Bool}, Base.Pair{String, Float64}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{String, Real}, Type{String}, Type{Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, Any}, Base.Dict{String, Real}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Float64, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, Bool}, Base.Pair{String, Float64}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(Base.show), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Float64, Bool, Bool})
precompile(Tuple{typeof(Base.print), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Float64})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Float64})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, Float64})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, WebIO.ObservableNode})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, WebIO.Node{WebIO.ObservableNode}})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, WebIO.Node{WebIO.ObservableNode}})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, WebIO.ObservableNode, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, JSON.Writer.CompositeTypeWrapper{WebIO.ObservableNode}, String})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, JSON.Writer.CompositeTypeWrapper{WebIO.ObservableNode}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, JSON.Writer.CompositeTypeWrapper{WebIO.ObservableNode}})
precompile(Tuple{WebIO.SyncCallback, String})
precompile(Tuple{getfield(WebIO, Symbol("#49#51")){WebIO.Scope, String}, String})
precompile(Tuple{typeof(Sockets.send), WebIO.ConnectionPool, Base.Dict{String, String}})
precompile(Tuple{typeof(WebIO.send_command), WebIO.Scope, String, Base.Pair{String, String}, Vararg{Base.Pair{String, String}, N} where N})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{Any}, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{Any}, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Base.Dict{String, String}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Base.Dict{String, String}}}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{WebIO.AbstractConnection}})
precompile(Tuple{typeof(Base.isopen), Blink.AtomShell.WebIOBlinkComm})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Base.Dict{String, String}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Base.Dict{String, String}}}})
precompile(Tuple{typeof(Sockets.send), Blink.AtomShell.WebIOBlinkComm, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{WebIO.AbstractConnection, Nothing}, Blink.AtomShell.WebIOBlinkComm})
precompile(Tuple{typeof(Base.throw_boundserror), Array{WebIO.AbstractConnection, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base._delete!), Base.Dict{WebIO.AbstractConnection, Nothing}, Int64})
precompile(Tuple{typeof(WebIO.send_message), WebIO.ConnectionPool, Blink.AtomShell.WebIOBlinkComm, Base.Dict{String, String}})
precompile(Tuple{getfield(WebIO, Symbol("#5#6")){WebIO.ConnectionPool, Base.Dict{String, String}, Blink.AtomShell.WebIOBlinkComm}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, String}, String, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, String}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Base.Dict{String, String}}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Base.Dict{String, String}}}, Int64})
precompile(Tuple{typeof(Blink.msg), Blink.Page, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Blink.msg), Blink.AtomShell.Window, Base.Dict{Symbol, Any}})
precompile(Tuple{getfield(Base, Symbol("##sprint#338")), Nothing, Int64, typeof(Base.sprint), Function, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.getindex), InteractBase.Vals2Idxs{Function}, Int64})
precompile(Tuple{getfield(Observables, Symbol("##setindex!#5")), getfield(Base, Symbol("#66#67")){Base.Fix2{typeof(Base.in), Array{Function, 1}}}, typeof(Base.setindex!), Observables.Observable{Any}, Function})
precompile(Tuple{getfield(Base, Symbol("#setindex!##kw")), NamedTuple{(:notify,), Tuple{getfield(Base, Symbol("#66#67")){Base.Fix2{typeof(Base.in), Array{Function, 1}}}}}, typeof(Base.setindex!), Observables.Observable{Any}, Function})
precompile(Tuple{Observables.OnUpdate{Observables.MapUpdater{getfield(Main, Symbol("#6#11")){UnionAll, PyPlot.Figure, Widgets.Widget{:togglebuttons, Any}}, Any}, Tuple{Widgets.Widget{:togglebuttons, Any}, Widgets.Widget{:spinbox, Union{Nothing, Int64}}, Widgets.Widget{:spinbox, Union{Nothing, Int64}}, Widgets.Widget{:dropdown, Any}, Widgets.Widget{:button, Int64}}}, Function})
precompile(Tuple{Observables.MapUpdater{getfield(Main, Symbol("#6#11")){UnionAll, PyPlot.Figure, Widgets.Widget{:togglebuttons, Any}}, Any}, Bool, Vararg{Any, N} where N})
precompile(Tuple{getfield(StaticArrays, Symbol("##s35#12")), Any, Any, Any, Any})
precompile(Tuple{Type{Base.Broadcast.BroadcastStyle}, Base.Broadcast.DefaultArrayStyle{1}, StaticArrays.StaticArrayStyle{1}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{DynamicalBilliards.Obstacle{Float64}, 1}}})
precompile(Tuple{Type{Core.Compiler.Signature}, Nothing, Core.Compiler.MaybeUndef, Array{Any, 1}, Type{T} where T})
precompile(Tuple{typeof(Main.bil_ui), typeof(Main.pol), Widgets.Widget{:slider, Float64}})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{Int64}, Observables.Observable{Bool}})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{Int64}, Observables.Observable{Any}})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{Int64}, Observables.Observable{AbstractString}})
precompile(Tuple{typeof(Base.map), Function, Widgets.Widget{:slider, Float64}, Widgets.Widget{:spinbox, Union{Nothing, Int64}}})
precompile(Tuple{typeof(Base.Math.cos_domain_error), Float64})
precompile(Tuple{typeof(Base.cos), Float64})
precompile(Tuple{typeof(Base.Math.sin_domain_error), Float64})
precompile(Tuple{typeof(Base.sin), Float64})
precompile(Tuple{getfield(DynamicalBilliards, Symbol("#12#13")){Float64, Int64, Array{Int64, 1}, Int64, DataType}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DynamicalBilliards, Symbol("#12#13")){Float64, Int64, Array{Int64, 1}, Int64, DataType}}})
precompile(Tuple{Type{DynamicalBilliards.Billiard{T, D, O, Y} where Y where O<:Tuple where D where T}, Array{DynamicalBilliards.Obstacle{Float64}, 1}})
precompile(Tuple{getfield(DynamicalBilliards, Symbol("##billiard_polygon#11")), Int64, Float64, Array{Int64, 1}, String, typeof(DynamicalBilliards.billiard_polygon), Int64, Float64, Array{Int64, 1}})
precompile(Tuple{typeof(DynamicalBilliards.billiard_polygon), Int64, Float64})
precompile(Tuple{typeof(Main.pol), Float64, Int64})
precompile(Tuple{typeof(Base.getindex), Type{Float64}, Float64, Float64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 1}, Array{Int64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Array{Float64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base._array_for), Type{Array{Float64, 1}}, Base.UnitRange{Int64}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Float64, 1}, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(DynamicalBilliards, Symbol("#12#13")){Float64, Int64, Array{Int64, 1}, Int64, DataType}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(DynamicalBilliards, Symbol("#12#13")){Float64, Int64, Array{Int64, 1}, Int64, DataType}}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Array{Float64, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(LinearAlgebra.generic_norm2), Array{Float64, 1}})
precompile(Tuple{typeof(LinearAlgebra.norm2), Array{Float64, 1}})
precompile(Tuple{typeof(LinearAlgebra.norm1), Array{Float64, 1}})
precompile(Tuple{typeof(LinearAlgebra.generic_normp), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(LinearAlgebra.norm), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(LinearAlgebra.normalize), Array{Float64, 1}, Int64})
precompile(Tuple{Type{DynamicalBilliards.InfiniteWall{T} where T<:AbstractFloat}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, String})
precompile(Tuple{typeof(Base.push!), Array{DynamicalBilliards.Obstacle{Float64}, 1}, DynamicalBilliards.InfiniteWall{Float64}})
precompile(Tuple{typeof(Base.findall), getfield(DynamicalBilliards, Symbol("#7#8")), Tuple{DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}})
precompile(Tuple{typeof(Base.length), Array{Union{}, 1}})
precompile(Tuple{typeof(Base.isodd), Int64})
precompile(Tuple{Type{DynamicalBilliards.Billiard{Float64, 3, Tuple{DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}}, Tuple{DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing})
precompile(Tuple{typeof(Base.map!), Function, Observables.Observable{Any}, Widgets.Widget{:slider, Float64}, Widgets.Widget{:spinbox, Union{Nothing, Int64}}})
precompile(Tuple{getfield(Observables, Symbol("##map#31")), DynamicalBilliards.Billiard{Float64, 3, Tuple{DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, typeof(Base.map), Function, Widgets.Widget{:slider, Float64}, Widgets.Widget{:spinbox, Union{Nothing, Int64}}})
precompile(Tuple{Type{Observables.MapUpdater{F, T} where T where F}, typeof(Main.pol), Observables.Observable{Any}})
precompile(Tuple{typeof(Observables.onany), Function, Widgets.Widget{:slider, Float64}, Vararg{Any, N} where N})
precompile(Tuple{Type{Observables.OnUpdate{F, Args} where Args where F}, Observables.MapUpdater{typeof(Main.pol), Any}, Tuple{Widgets.Widget{:slider, Float64}, Widgets.Widget{:spinbox, Union{Nothing, Int64}}}})
precompile(Tuple{typeof(Base.ntuple), getfield(StaticArrays, Symbol("#3#4")), Base.Val{4}})
precompile(Tuple{typeof(StaticArrays._axes), StaticArrays.Size{(4,)}})
precompile(Tuple{typeof(Base.iterate), StaticArrays.SOneTo{4}})
precompile(Tuple{getfield(Main, Symbol("#7#12")){Bool, Int64, Int64, UnionAll, Array{String, 1}, UnionAll, PyPlot.Figure}, DynamicalBilliards.Billiard{Float64, 3, Tuple{DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(DynamicalBilliards.totallength), Base.BottomRF{typeof(Base.add_sum)}}, Base._InitialValue, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}})
precompile(Tuple{typeof(BilharesMarkov.random_on_border), Type{DynamicalBilliards.Particle{T} where T<:AbstractFloat}, DynamicalBilliards.Billiard{Float64, 3, Tuple{DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(BilharesMarkov, Symbol("#13#14")){Float64, UnionAll, DynamicalBilliards.Billiard{Float64, 3, Tuple{DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, Array{Float64, 1}, Array{Float64, 1}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(DynamicalBilliards.arcintervals), DynamicalBilliards.Billiard{Float64, 3, Tuple{DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}})
precompile(Tuple{typeof(DynamicalBilliards.from_bcoords), Float64, Float64, DynamicalBilliards.Billiard{Float64, 3, Tuple{DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}})
precompile(Tuple{getfield(BilharesMarkov, Symbol("#13#14")){Float64, UnionAll, DynamicalBilliards.Billiard{Float64, 3, Tuple{DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, Array{Float64, 1}, Array{Float64, 1}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(BilharesMarkov, Symbol("#13#14")){Float64, UnionAll, DynamicalBilliards.Billiard{Float64, 3, Tuple{DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.collect_to!), Array{DynamicalBilliards.Particle{Float64}, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(BilharesMarkov, Symbol("#13#14")){Float64, UnionAll, DynamicalBilliards.Billiard{Float64, 3, Tuple{DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, Array{Float64, 1}, Array{Float64, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DynamicalBilliards.Particle{Float64}, 1}, DynamicalBilliards.Particle{Float64}, Base.Generator{Base.UnitRange{Int64}, getfield(BilharesMarkov, Symbol("#13#14")){Float64, UnionAll, DynamicalBilliards.Billiard{Float64, 3, Tuple{DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, Array{Float64, 1}, Array{Float64, 1}}}, Int64})
precompile(Tuple{getfield(DynamicalBilliards, Symbol("##parallelize#69")), Symbol, typeof(DynamicalBilliards.parallelize), Function, DynamicalBilliards.Billiard{Float64, 3, Tuple{DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, Int64, Array{DynamicalBilliards.Particle{Float64}, 1}})
precompile(Tuple{typeof(DynamicalBilliards.parallelize), Function, DynamicalBilliards.Billiard{Float64, 3, Tuple{DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, Int64, Array{DynamicalBilliards.Particle{Float64}, 1}})
precompile(Tuple{getfield(DynamicalBilliards, Symbol("#98#threadsfor_fun#72")){typeof(DynamicalBilliards.boundarymap), DynamicalBilliards.Billiard{Float64, 3, Tuple{DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, Int64, Array{DynamicalBilliards.Particle{Float64}, 1}, StaticArrays.SArray{Tuple{4}, Float64, 1, 4}, Array{Array{StaticArrays.SArray{Tuple{2}, Float64, 1, 2}, 1}, 1}, Base.UnitRange{Int64}}, Bool})
precompile(Tuple{getfield(DynamicalBilliards, Symbol("#98#threadsfor_fun#72")){typeof(DynamicalBilliards.boundarymap), DynamicalBilliards.Billiard{Float64, 3, Tuple{DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, Int64, Array{DynamicalBilliards.Particle{Float64}, 1}, StaticArrays.SArray{Tuple{4}, Float64, 1, 4}, Array{Array{StaticArrays.SArray{Tuple{2}, Float64, 1, 2}, 1}, 1}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Array{StaticArrays.SArray{Tuple{2}, Float64, 1, 2}, 1}, 1}, StaticArrays.SArray{Tuple{4}, Float64, 1, 4}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Array{StaticArrays.SArray{Tuple{2}, Float64, 1, 2}, 1}, 1}, StaticArrays.SArray{Tuple{4}, Float64, 1, 4}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Base.UnitRange{Int64}, getfield(DynamicalBilliards, Symbol("#138#144")){StaticArrays.SArray{Tuple{4}, Float64, 1, 4}}}, Int64})
precompile(Tuple{getfield(DynamicalBilliards, Symbol("##plot_boundarymap#133")), PyCall.PyObject, Array{String, 1}, String, Float64, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(DynamicalBilliards.plot_boundarymap), Array{Array{StaticArrays.SArray{Tuple{2}, Float64, 1, 2}, 1}, 1}, StaticArrays.SArray{Tuple{4}, Float64, 1, 4}})
precompile(Tuple{getfield(DynamicalBilliards, Symbol("#plot_boundarymap##kw")), NamedTuple{(:color, :ax), Tuple{Array{String, 1}, PyCall.PyObject}}, typeof(DynamicalBilliards.plot_boundarymap), Array{Array{StaticArrays.SArray{Tuple{2}, Float64, 1, 2}, 1}, 1}, StaticArrays.SArray{Tuple{4}, Float64, 1, 4}})
precompile(Tuple{Type{Tuple}, StaticArrays.Size{(4,)}})
precompile(Tuple{typeof(PyCall.array2py), StaticArrays.SArray{Tuple{4}, Float64, 1, 4}, Int64, Base.IteratorsMD.CartesianIndex{1}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{StaticArrays.SArray{Tuple{4}, Float64, 1, 4}}, Int64, Ptr{Nothing}})
precompile(Tuple{PyCall.PyObject, StaticArrays.SArray{Tuple{4}, Float64, 1, 4}})
precompile(Tuple{getfield(PyPlot, Symbol("#plot##kw")), NamedTuple{(:ax,), Tuple{PyCall.PyObject}}, typeof(PyPlot.plot), DynamicalBilliards.Billiard{Float64, 3, Tuple{DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, Type{DynamicalBilliards.Particle{T} where T<:AbstractFloat}})
precompile(Tuple{typeof(DynamicalBilliards.timeseries!), DynamicalBilliards.Particle{Float64}, DynamicalBilliards.Billiard{Float64, 3, Tuple{DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, Int64})
precompile(Tuple{getfield(BilharesMarkov, Symbol("##timeseries!#15")), Function, Float64, typeof(DynamicalBilliards.timeseries!), DynamicalBilliards.Particle{Float64}, DynamicalBilliards.Billiard{Float64, 3, Tuple{DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, Int64})
precompile(Tuple{getfield(Observables, Symbol("##setindex!#5")), getfield(Observables, Symbol("#6#8")), typeof(Base.setindex!), Observables.Observable{Any}, Widgets.Widget{:spinbox, Union{Nothing, Int64}}})
precompile(Tuple{typeof(Base.setindex!), Observables.Observable{Any}, Widgets.Widget{:spinbox, Union{Nothing, Int64}}})
precompile(Tuple{Observables.OnUpdate{Observables.MapUpdater{getfield(WebIO, Symbol("#55#58")), AbstractString}, Tuple{Observables.Observable{Any}}}, Widgets.Widget{:spinbox, Union{Nothing, Int64}}})
precompile(Tuple{typeof(WebIO.richest_mime), Widgets.Widget{:spinbox, Union{Nothing, Int64}}})
precompile(Tuple{typeof(WebIO.richest_html), Widgets.Widget{:spinbox, Union{Nothing, Int64}}})
precompile(Tuple{Observables.MapUpdater{getfield(WebIO, Symbol("#55#58")), AbstractString}, Widgets.Widget{:spinbox, Union{Nothing, Int64}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/html")}, Widgets.Widget{:spinbox, Union{Nothing, Int64}}})
precompile(Tuple{getfield(Base64, Symbol("##stringmime#6")), Nothing, typeof(Base64.stringmime), Base.Multimedia.MIME{Symbol("text/html")}, Widgets.Widget{:spinbox, Union{Nothing, Int64}}})
precompile(Tuple{typeof(Base64.stringmime), Base.Multimedia.MIME{Symbol("text/html")}, Widgets.Widget{:spinbox, Union{Nothing, Int64}}})
precompile(Tuple{typeof(Main.bil_ui), typeof(Main.pol), Widgets.Widget{:spinbox, Union{Nothing, Float64}}})
precompile(Tuple{typeof(Base.map), Function, Widgets.Widget{:spinbox, Union{Nothing, Float64}}, Widgets.Widget{:spinbox, Union{Nothing, Int64}}})
precompile(Tuple{typeof(Base.map!), Function, Observables.Observable{Any}, Widgets.Widget{:spinbox, Union{Nothing, Float64}}, Widgets.Widget{:spinbox, Union{Nothing, Int64}}})
precompile(Tuple{getfield(Observables, Symbol("##map#31")), DynamicalBilliards.Billiard{Float64, 3, Tuple{DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, typeof(Base.map), Function, Widgets.Widget{:spinbox, Union{Nothing, Float64}}, Widgets.Widget{:spinbox, Union{Nothing, Int64}}})
precompile(Tuple{typeof(Observables.onany), Function, Widgets.Widget{:spinbox, Union{Nothing, Float64}}, Vararg{Any, N} where N})
precompile(Tuple{Type{Observables.OnUpdate{F, Args} where Args where F}, Observables.MapUpdater{typeof(Main.pol), Any}, Tuple{Widgets.Widget{:spinbox, Union{Nothing, Float64}}, Widgets.Widget{:spinbox, Union{Nothing, Int64}}}})
precompile(Tuple{typeof(Base.isequal), Widgets.Widget{:spinbox, Union{Nothing, Float64}}, Observables.Observable{Union{Nothing, Int64}}})
precompile(Tuple{typeof(BilharesMarkov.random_on_border), Type{BilharesMarkov.HyperBKParticle{T} where T<:AbstractFloat}, DynamicalBilliards.Billiard{Float64, 3, Tuple{DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{BilharesMarkov.HyperBKParticle{Float64}, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(BilharesMarkov, Symbol("#13#14")){Float64, UnionAll, DynamicalBilliards.Billiard{Float64, 3, Tuple{DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, Array{Float64, 1}, Array{Float64, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{BilharesMarkov.HyperBKParticle{Float64}, 1}, BilharesMarkov.HyperBKParticle{Float64}, Base.Generator{Base.UnitRange{Int64}, getfield(BilharesMarkov, Symbol("#13#14")){Float64, UnionAll, DynamicalBilliards.Billiard{Float64, 3, Tuple{DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, Array{Float64, 1}, Array{Float64, 1}}}, Int64})
precompile(Tuple{getfield(DynamicalBilliards, Symbol("##parallelize#69")), Symbol, typeof(DynamicalBilliards.parallelize), Function, DynamicalBilliards.Billiard{Float64, 3, Tuple{DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, Int64, Array{BilharesMarkov.HyperBKParticle{Float64}, 1}})
precompile(Tuple{typeof(DynamicalBilliards.parallelize), Function, DynamicalBilliards.Billiard{Float64, 3, Tuple{DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, Int64, Array{BilharesMarkov.HyperBKParticle{Float64}, 1}})
precompile(Tuple{typeof(DynamicalBilliards.boundarymap), BilharesMarkov.HyperBKParticle{Float64}, DynamicalBilliards.Billiard{Float64, 3, Tuple{DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, Int64, StaticArrays.SArray{Tuple{4}, Float64, 1, 4}})
precompile(Tuple{getfield(DynamicalBilliards, Symbol("#98#threadsfor_fun#72")){typeof(DynamicalBilliards.boundarymap), DynamicalBilliards.Billiard{Float64, 3, Tuple{DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, Int64, Array{BilharesMarkov.HyperBKParticle{Float64}, 1}, StaticArrays.SArray{Tuple{4}, Float64, 1, 4}, Array{Array{StaticArrays.SArray{Tuple{2}, Float64, 1, 2}, 1}, 1}, Base.UnitRange{Int64}}, Bool})
precompile(Tuple{getfield(DynamicalBilliards, Symbol("#98#threadsfor_fun#72")){typeof(DynamicalBilliards.boundarymap), DynamicalBilliards.Billiard{Float64, 3, Tuple{DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, Int64, Array{BilharesMarkov.HyperBKParticle{Float64}, 1}, StaticArrays.SArray{Tuple{4}, Float64, 1, 4}, Array{Array{StaticArrays.SArray{Tuple{2}, Float64, 1, 2}, 1}, 1}, Base.UnitRange{Int64}}})
precompile(Tuple{getfield(PyPlot, Symbol("#plot##kw")), NamedTuple{(:ax,), Tuple{PyCall.PyObject}}, typeof(PyPlot.plot), DynamicalBilliards.Billiard{Float64, 3, Tuple{DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, Type{BilharesMarkov.HyperBKParticle{T} where T<:AbstractFloat}})
precompile(Tuple{getfield(BilharesMarkov, Symbol("##timeseries!#15")), Function, Float64, typeof(DynamicalBilliards.timeseries!), BilharesMarkov.HyperBKParticle{Float64}, DynamicalBilliards.Billiard{Float64, 3, Tuple{DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}, Int64})
precompile(Tuple{typeof(Base.vcat), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(DynamicalBilliards.extrapolate), BilharesMarkov.HyperBKParticle{Float64}, StaticArrays.SArray{Tuple{2}, Float64, 1, 2}, StaticArrays.SArray{Tuple{2}, Float64, 1, 2}, Float64, Float64, typeof(BilharesMarkov.hyper_transf)})
precompile(Tuple{typeof(Base.append!), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.promote_typeof), Widgets.Widget{:spinbox, Union{Nothing, Float64}}, Widgets.Widget{:spinbox, Union{Nothing, Int64}}})
precompile(Tuple{typeof(Base.promote_type), Type{Widgets.Widget{:togglebuttons, Any}}, Type{Widgets.Widget{:spinbox, S} where S}})
precompile(Tuple{Type{Array{Widgets.Widget{T, S} where S where T, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Widgets.Widget{T, S} where S where T, 1}, Tuple{Widgets.Widget{:togglebuttons, Any}, Widgets.Widget{:spinbox, Union{Nothing, Float64}}, Widgets.Widget{:spinbox, Union{Nothing, Int64}}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Widgets.Widget{T, S} where S where T, 1}}})
precompile(Tuple{typeof(CSSUtil.container), Array{Widgets.Widget{T, S} where S where T, 1}})
precompile(Tuple{typeof(CSSUtil.vbox), Array{Widgets.Widget{T, S} where S where T, 1}})
precompile(Tuple{getfield(Observables, Symbol("##setindex!#5")), getfield(Observables, Symbol("#6#8")), typeof(Base.setindex!), Observables.Observable{Any}, WebIO.Node{WebIO.DOM}})
precompile(Tuple{typeof(Base.setindex!), Observables.Observable{Any}, WebIO.Node{WebIO.DOM}})
precompile(Tuple{Observables.OnUpdate{Observables.MapUpdater{getfield(WebIO, Symbol("#54#57")){Observables.Observable{Any}, WebIO.Scope}, WebIO.Node{WebIO.DOM}}, Tuple{Observables.Observable{Any}}}, WebIO.Node{WebIO.DOM}})
precompile(Tuple{getfield(Observables, Symbol("##setindex!#5")), getfield(Observables, Symbol("#6#8")), typeof(Base.setindex!), Observables.Observable{WebIO.Node{WebIO.DOM}}, WebIO.Node{WebIO.DOM}})
precompile(Tuple{Observables.MapUpdater{getfield(WebIO, Symbol("#54#57")){Observables.Observable{Any}, WebIO.Scope}, WebIO.Node{WebIO.DOM}}, WebIO.Node{WebIO.DOM}})
precompile(Tuple{WebIO.SyncCallback, WebIO.Node{WebIO.DOM}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, WebIO.Node{WebIO.DOM}}}}})
precompile(Tuple{getfield(WebIO, Symbol("#49#51")){WebIO.Scope, String}, WebIO.Node{WebIO.DOM}})
precompile(Tuple{typeof(WebIO.send_command), WebIO.Scope, String, Base.Pair{String, String}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, WebIO.Node{WebIO.DOM}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, WebIO.Node{WebIO.DOM}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, String}, String, WebIO.Node{WebIO.DOM}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, String}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, WebIO.Node{WebIO.DOM}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, String, WebIO.Node{WebIO.DOM}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, WebIO.Node{WebIO.DOM}, WebIO.Node{WebIO.DOM}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, WebIO.Node{WebIO.DOM}}}, Int64})
precompile(Tuple{typeof(Sockets.send), WebIO.ConnectionPool, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{Any}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{Any}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Base.Dict{String, Any}}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Base.Dict{String, Any}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Base.Dict{String, Any}}}})
precompile(Tuple{typeof(Sockets.send), Blink.AtomShell.WebIOBlinkComm, Base.Dict{String, Any}})
precompile(Tuple{typeof(WebIO.send_message), WebIO.ConnectionPool, Blink.AtomShell.WebIOBlinkComm, Base.Dict{String, Any}})
precompile(Tuple{getfield(WebIO, Symbol("#5#6")){WebIO.ConnectionPool, Base.Dict{String, Any}, Blink.AtomShell.WebIOBlinkComm}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, String}, String, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, String}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Base.Dict{String, Any}}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Base.Dict{String, Any}}}, Int64})
precompile(Tuple{typeof(WebIO.dispatch), WebIO.Scope, String, Float64})
precompile(Tuple{getfield(Observables, Symbol("##setindex!#5")), getfield(WebIO, Symbol("#44#45")), typeof(Base.setindex!), Observables.Observable{Union{Nothing, Float64}}, Float64})
precompile(Tuple{typeof(WebIO.set_nosync), Observables.Observable{Union{Nothing, Float64}}, Float64})
precompile(Tuple{getfield(Observables, Symbol("##setindex!#5")), getfield(WebIO, Symbol("#44#45")), typeof(Base.setindex!), Observables.Observable{Int64}, Int64})
precompile(Tuple{typeof(WebIO.set_nosync), Observables.Observable{Int64}, Int64})
precompile(Tuple{typeof(Base.setproperty!), Observables.Observable{Union{Nothing, Float64}}, Symbol, Nothing})
precompile(Tuple{getfield(Observables, Symbol("##setindex!#5")), getfield(Widgets, Symbol("#118#121")){getfield(Widgets, Symbol("#116#119")){Widgets.Widget{:spinbox, Union{Nothing, Float64}}}}, typeof(Base.setindex!), Observables.Observable{Union{Nothing, Float64}}, Nothing})
precompile(Tuple{getfield(Observables, Symbol("##setindex!#5")), getfield(Widgets, Symbol("#118#121")){getfield(Widgets, Symbol("#116#119")){Widgets.Widget{:spinbox, Union{Nothing, Float64}}}}, typeof(Base.setindex!), Observables.Observable{Union{Nothing, Float64}}, Float64})
precompile(Tuple{getfield(Widgets, Symbol("#117#120")){Observables.Observable{Union{Nothing, Float64}}, Widgets.Widget{:spinbox, Union{Nothing, Float64}}, getfield(Widgets, Symbol("#116#119")){Widgets.Widget{:spinbox, Union{Nothing, Float64}}}}, Int64})
precompile(Tuple{getfield(Widgets, Symbol("#118#121")){getfield(Widgets, Symbol("#116#119")){Widgets.Widget{:spinbox, Union{Nothing, Float64}}}}, Function})
precompile(Tuple{typeof(Main.sinai), Nothing})
precompile(Tuple{Observables.MapUpdater{typeof(Main.sinai), Any}, Nothing})
precompile(Tuple{Observables.MapUpdater{typeof(Main.sinai), Any}, Float64})
precompile(Tuple{Observables.OnUpdate{Observables.MapUpdater{typeof(Main.sinai), Any}, Tuple{Widgets.Widget{:spinbox, Union{Nothing, Float64}}}}, Float64})
precompile(Tuple{getfield(Observables, Symbol("##setindex!#5")), getfield(Observables, Symbol("#6#8")), typeof(Base.setindex!), Observables.Observable{Any}, DynamicalBilliards.Billiard{Float64, 5, Tuple{DynamicalBilliards.Disk{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}})
precompile(Tuple{typeof(Base.setindex!), Observables.Observable{Any}, DynamicalBilliards.Billiard{Float64, 5, Tuple{DynamicalBilliards.Disk{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}})
precompile(Tuple{typeof(Base.length), StaticArrays.Size{(0,)}})
precompile(Tuple{typeof(Base.ntuple), getfield(StaticArrays, Symbol("#3#4")), Base.Val{1}})
precompile(Tuple{Observables.OnUpdate{Observables.MapUpdater{getfield(Main, Symbol("#7#12")){Bool, Int64, Int64, UnionAll, Array{String, 1}, UnionAll, PyPlot.Figure}, Any}, Tuple{Observables.Observable{Any}}}, DynamicalBilliards.Billiard{Float64, 5, Tuple{DynamicalBilliards.Disk{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}})
precompile(Tuple{Observables.MapUpdater{getfield(Main, Symbol("#7#12")){Bool, Int64, Int64, UnionAll, Array{String, 1}, UnionAll, PyPlot.Figure}, Any}, DynamicalBilliards.Billiard{Float64, 5, Tuple{DynamicalBilliards.Disk{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}})
precompile(Tuple{getfield(Observables, Symbol("##setindex!#5")), getfield(Observables, Symbol("#6#8")), typeof(Base.setindex!), Observables.Observable{Any}, Array{PyCall.PyObject, 1}})
precompile(Tuple{typeof(Base.setindex!), Observables.Observable{Any}, Array{PyCall.PyObject, 1}})
precompile(Tuple{Observables.OnUpdate{Observables.MapUpdater{typeof(Main.pol), Any}, Tuple{Widgets.Widget{:spinbox, Union{Nothing, Float64}}, Widgets.Widget{:spinbox, Union{Nothing, Int64}}}}, Float64})
precompile(Tuple{Observables.MapUpdater{typeof(Main.pol), Any}, Float64, Vararg{Any, N} where N})
precompile(Tuple{getfield(Observables, Symbol("##setindex!#5")), getfield(Observables, Symbol("#6#8")), typeof(Base.setindex!), Observables.Observable{Any}, DynamicalBilliards.Billiard{Float64, 3, Tuple{DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}})
precompile(Tuple{typeof(Base.setindex!), Observables.Observable{Any}, DynamicalBilliards.Billiard{Float64, 3, Tuple{DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}})
precompile(Tuple{Observables.OnUpdate{Observables.MapUpdater{getfield(Main, Symbol("#7#12")){Bool, Int64, Int64, UnionAll, Array{String, 1}, UnionAll, PyPlot.Figure}, Any}, Tuple{Observables.Observable{Any}}}, DynamicalBilliards.Billiard{Float64, 3, Tuple{DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}})
precompile(Tuple{Observables.MapUpdater{getfield(Main, Symbol("#7#12")){Bool, Int64, Int64, UnionAll, Array{String, 1}, UnionAll, PyPlot.Figure}, Any}, DynamicalBilliards.Billiard{Float64, 3, Tuple{DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}, DynamicalBilliards.InfiniteWall{Float64}}, Nothing}})
precompile(Tuple{getfield(Observables, Symbol("##setindex!#5")), getfield(WebIO, Symbol("#44#45")), typeof(Base.setindex!), Observables.Observable{Union{Nothing, Int64}}, Int64})
precompile(Tuple{typeof(WebIO.set_nosync), Observables.Observable{Union{Nothing, Int64}}, Int64})
precompile(Tuple{typeof(Base.setproperty!), Observables.Observable{Union{Nothing, Int64}}, Symbol, Nothing})
precompile(Tuple{getfield(Observables, Symbol("##setindex!#5")), getfield(Widgets, Symbol("#118#121")){getfield(Widgets, Symbol("#116#119")){Widgets.Widget{:spinbox, Union{Nothing, Int64}}}}, typeof(Base.setindex!), Observables.Observable{Union{Nothing, Int64}}, Nothing})
precompile(Tuple{getfield(Observables, Symbol("##setindex!#5")), getfield(Widgets, Symbol("#118#121")){getfield(Widgets, Symbol("#116#119")){Widgets.Widget{:spinbox, Union{Nothing, Int64}}}}, typeof(Base.setindex!), Observables.Observable{Union{Nothing, Int64}}, Int64})
precompile(Tuple{getfield(Widgets, Symbol("#117#120")){Observables.Observable{Union{Nothing, Int64}}, Widgets.Widget{:spinbox, Union{Nothing, Int64}}, getfield(Widgets, Symbol("#116#119")){Widgets.Widget{:spinbox, Union{Nothing, Int64}}}}, Int64})
precompile(Tuple{getfield(Widgets, Symbol("#118#121")){getfield(Widgets, Symbol("#116#119")){Widgets.Widget{:spinbox, Union{Nothing, Int64}}}}, Function})
precompile(Tuple{Observables.OnUpdate{Observables.MapUpdater{getfield(Main, Symbol("#6#11")){UnionAll, PyPlot.Figure, Widgets.Widget{:togglebuttons, Any}}, Any}, Tuple{Widgets.Widget{:togglebuttons, Any}, Widgets.Widget{:spinbox, Union{Nothing, Int64}}, Widgets.Widget{:spinbox, Union{Nothing, Int64}}, Widgets.Widget{:dropdown, Any}, Widgets.Widget{:button, Int64}}}, Int64})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{Float64}, WeakRef})
precompile(Tuple{typeof(Base.isequal), PyCall.PyObject, Observables.Observable{Float64}})
precompile(Tuple{typeof(Base.:(==)), Observables.Observable{Float64}, WeakRef})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{Float64}, Observables.Observable{Int64}})
precompile(Tuple{typeof(Base.isequal), Widgets.Widget{:slider, Float64}, WeakRef})
precompile(Tuple{typeof(Base.isequal), PyCall.PyObject, Widgets.Widget{:slider, Float64}})
precompile(Tuple{typeof(Base.:(==)), Widgets.Widget{:slider, Float64}, WeakRef})
precompile(Tuple{typeof(Base.isequal), Widgets.Widget{:slider, Float64}, Observables.Observable{Union{Nothing, Int64}}})
precompile(Tuple{typeof(Base.isequal), Widgets.Widget{:slider, Float64}, Observables.Observable{Any}})
precompile(Tuple{typeof(Base.isequal), Widgets.Widget{:spinbox, Union{Nothing, Int64}}, Observables.Observable{Union{Nothing, Int64}}})
precompile(Tuple{typeof(Base.isequal), Widgets.Widget{:spinbox, Union{Nothing, Float64}}, Observables.Observable{Bool}})
precompile(Tuple{typeof(Base.isequal), Widgets.Widget{:spinbox, Union{Nothing, Float64}}, Observables.Observable{AbstractString}})
precompile(Tuple{typeof(Base.isequal), Widgets.Widget{:spinbox, Union{Nothing, Int64}}, Observables.Observable{AbstractString}})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{Any}, Observables.Observable{AbstractString}})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{Float64}, Observables.Observable{Union{Nothing, Int64}}})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{Float64}, Observables.Observable{Any}})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{Float64}, Observables.Observable{WebIO.Node{WebIO.DOM}}})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{Union{Nothing, Int64}}, Observables.Observable{Int64}})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{Union{Nothing, Float64}}, Observables.Observable{Int64}})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{Union{Nothing, Float64}}, Observables.Observable{Any}})
precompile(Tuple{typeof(Base.isequal), Widgets.Widget{:spinbox, Union{Nothing, Int64}}, Observables.Observable{Union{Nothing, Float64}}})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{Union{Nothing, Float64}}, Observables.Observable{Union{Nothing, Int64}}})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{Int64}, Observables.Observable{Union{Nothing, Int64}}})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{Any}, Observables.Observable{Union{Nothing, Float64}}})
precompile(Tuple{getfield(Observables, Symbol("##setindex!#5")), getfield(WebIO, Symbol("#44#45")), typeof(Base.setindex!), Observables.Observable{Union{Nothing, Float64}}, Int64})
precompile(Tuple{typeof(WebIO.set_nosync), Observables.Observable{Union{Nothing, Float64}}, Int64})
precompile(Tuple{typeof(Base.rethrow), WebSockets.WebSocketClosedError})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{String, String}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Blink.handle_message), Blink.Page, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Mux.mk_response), Nothing})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#22#23")){getfield(REPL.LineEdit, Symbol("#113#166")), String}, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.edit_delete), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(REPL.LineEdit.edit_abort), Any})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#113#166")), Any, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(REPL.LineEdit.edit_abort), Any, Bool})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("##edit_abort#108")), Any, typeof(REPL.LineEdit.edit_abort), Any, Bool})
precompile(Tuple{typeof(Base._delete!), Base.Dict{String, String}, Int64})
precompile(Tuple{getfield(AssetRegistry, Symbol("#7#8")){String, String}})
precompile(Tuple{getfield(AssetRegistry, Symbol("##deregister#6")), String, typeof(AssetRegistry.deregister), String})
precompile(Tuple{getfield(AssetRegistry, Symbol("#9#10"))})
precompile(Tuple{typeof(Base.pop!), Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.Timer}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Base.Timer, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Symbol, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base._delete!), Base.Dict{Symbol, Base.Timer}, Int64})
precompile(Tuple{typeof(PyCall.pygui_stop), Symbol})
precompile(Tuple{typeof(PyCall.pygui_stop_all)})
precompile(Tuple{typeof(PyCall.Py_Finalize)})
precompile(Tuple{typeof(Base.Filesystem.temp_cleanup_purge)})
precompile(Tuple{typeof(Base.lock), getfield(Base, Symbol("#489#490")){Base.WeakKeyDict{Any, Any}, Observables.Observable{Union{Nothing, Int64}}}, Base.ReentrantLock})
precompile(Tuple{getfield(Base, Symbol("#467#468")){Base.WeakKeyDict{Any, Any}}, Observables.Observable{Union{Nothing, Int64}}})
precompile(Tuple{typeof(Base.lock), getfield(Base, Symbol("#489#490")){Base.WeakKeyDict{Any, Any}, Observables.Observable{Int64}}, Base.ReentrantLock})
precompile(Tuple{getfield(Base, Symbol("#467#468")){Base.WeakKeyDict{Any, Any}}, Observables.Observable{Int64}})
precompile(Tuple{typeof(Base.lock), getfield(Base, Symbol("#489#490")){Base.WeakKeyDict{Any, Any}, Observables.Observable{WebIO.Node{WebIO.DOM}}}, Base.ReentrantLock})
precompile(Tuple{getfield(Base, Symbol("#467#468")){Base.WeakKeyDict{Any, Any}}, Observables.Observable{WebIO.Node{WebIO.DOM}}})
precompile(Tuple{typeof(Base.lock), getfield(Base, Symbol("#489#490")){Base.WeakKeyDict{Any, Any}, Observables.Observable{Union{Nothing, Float64}}}, Base.ReentrantLock})
precompile(Tuple{getfield(Base, Symbol("#467#468")){Base.WeakKeyDict{Any, Any}}, Observables.Observable{Union{Nothing, Float64}}})
precompile(Tuple{typeof(Base.lock), getfield(Base, Symbol("#489#490")){Base.WeakKeyDict{Any, Any}, Observables.Observable{Any}}, Base.ReentrantLock})
precompile(Tuple{getfield(Base, Symbol("#467#468")){Base.WeakKeyDict{Any, Any}}, Observables.Observable{Any}})
precompile(Tuple{typeof(Base.lock), getfield(Base, Symbol("#489#490")){Base.WeakKeyDict{Any, Any}, Observables.Observable{AbstractString}}, Base.ReentrantLock})
precompile(Tuple{getfield(Base, Symbol("#467#468")){Base.WeakKeyDict{Any, Any}}, Observables.Observable{AbstractString}})
precompile(Tuple{typeof(Base.uvfinalize), Sockets.TCPServer})
precompile(Tuple{typeof(Base._delete!), Base.Dict{Int64, WeakRef}, Int64})
precompile(Tuple{getfield(Blink, Symbol("#10#11")), Blink.Page})
precompile(Tuple{typeof(Base.lock), getfield(Base, Symbol("#489#490")){Base.WeakKeyDict{Distributed.AbstractRemoteRef, Nothing}, Distributed.Future}, Base.ReentrantLock})
precompile(Tuple{typeof(Base.setproperty!), Distributed.Future, Symbol, Nothing})
precompile(Tuple{typeof(Distributed.finalize_ref), Distributed.Future})
precompile(Tuple{typeof(Base.isequal), Distributed.Future, Distributed.Future})
precompile(Tuple{getfield(Base, Symbol("#467#468")){Base.WeakKeyDict{Distributed.AbstractRemoteRef, Nothing}}, Distributed.Future})
precompile(Tuple{typeof(Base.lock), getfield(Base, Symbol("#489#490")){Base.WeakKeyDict{Any, Any}, Observables.Observable{Bool}}, Base.ReentrantLock})
precompile(Tuple{getfield(Base, Symbol("#467#468")){Base.WeakKeyDict{Any, Any}}, Observables.Observable{Bool}})
precompile(Tuple{typeof(FileWatching.uvfinalize), FileWatching.FileMonitor})
